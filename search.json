[{"title":"补充","url":"/%E8%A1%A5%E5%85%85/","content":"<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h2><p>ref被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的$refs对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例</p>\n<a id=\"more\"></a>\n\n\n<h3 id=\"获取dom元素\"><a href=\"#获取dom元素\" class=\"headerlink\" title=\"获取dom元素\"></a>获取dom元素</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;p ref&#x3D;&quot;p&quot;&gt;ref-test&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;&#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        mounted() &#123;</span><br><span class=\"line\">            console.log(this.$refs[&#39;p&#39;])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/ref.webp\" alt=\"alt\"></p>\n<h3 id=\"获取子组件中的data\"><a href=\"#获取子组件中的data\" class=\"headerlink\" title=\"获取子组件中的data\"></a>获取子组件中的data</h3><p>ref除了可以获取本页面的dom元素，还可以拿到子组件中的data和去调用子组件中的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">子组件</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">      &#123;&#123; msg &#125;&#125;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &quot;hello world&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    open() &#123;</span><br><span class=\"line\">      console.log(&quot;调用到了&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">父组件</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;HelloWorld ref&#x3D;&quot;hello&quot;&#x2F;&gt;</span><br><span class=\"line\">    &lt;button @click&#x3D;&quot;getHello&quot;&gt;获取helloworld组件中的值&lt;&#x2F;button&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import HelloWorld from &quot;.&#x2F;components&#x2F;HelloWorld.vue&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    HelloWorld</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    getHello() &#123;</span><br><span class=\"line\">      console.log(this.$refs[&#39;hello&#39;].msg)  &#x2F;&#x2F; hello world</span><br><span class=\"line\">      this.$refs[&#39;hello&#39;].open();           &#x2F;&#x2F; 调用到了</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"项目中实践1\"><a href=\"#项目中实践1\" class=\"headerlink\" title=\"项目中实践1\"></a>项目中实践1</h3><p><img src=\"/images/ref1.png\" alt=\"alt\"></p>\n<h3 id=\"项目中实践2\"><a href=\"#项目中实践2\" class=\"headerlink\" title=\"项目中实践2\"></a>项目中实践2</h3><p><img src=\"/images/ref2.png\" alt=\"alt\"><br><img src=\"/images/ref3.png\" alt=\"alt\"></p>\n<h2 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"nextTick\"></a>nextTick</h2><p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。<br><strong>理解：nextTick()，是将回调函数延迟在下一次dom更新数据后调用，简单的理解是：当数据更新了，在dom中渲染后，自动执行该函数</strong></p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>1、<strong>Vue生命周期的created()钩子函数进行的DOM操作一定要放在Vue.nextTick()的回调函数中</strong>，原因是在created()钩子函数执行的时候DOM 其实并未进行任何渲染，而此时进行DOM操作无异于徒劳，所以此处一定要将DOM操作的js代码放进Vue.nextTick()的回调函数中。与之对应的就是mounted钩子函数，因为该钩子函数执行时所有的DOM挂载已完成。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">created()&#123;</span><br><span class=\"line\">  let that&#x3D;this;</span><br><span class=\"line\">  that.$nextTick(function()&#123;  &#x2F;&#x2F;不使用this.$nextTick()方法会报错</span><br><span class=\"line\">      that.$refs[&#39;aa&#39;].innerHTML&#x3D;&quot;created中更改了按钮内容&quot;;  &#x2F;&#x2F;写入到DOM元素</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、当项目中你想在<strong>改变DOM元素的数据后基于新的dom做点什么</strong>，<strong>对新DOM一系列的js操作都需要放进Vue.nextTick()的回调函数中</strong>；通俗的理解是：更改数据后当你想立即使用js操作新的视图的时候需要使用它</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div class&#x3D;&quot;hello&quot;&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;button id&#x3D;&quot;firstBtn&quot; @click&#x3D;&quot;testClick()&quot; ref&#x3D;&quot;aa&quot;&gt;&#123;&#123;testMsg&#125;&#125;&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#39;HelloWorld&#39;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      testMsg:&quot;原始值&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    testClick:function()&#123;</span><br><span class=\"line\">      let that&#x3D;this;</span><br><span class=\"line\">      that.testMsg&#x3D;&quot;修改后的值&quot;;</span><br><span class=\"line\">      console.log(that.$refs[&#39;aa&#39;].innerText);   &#x2F;&#x2F;that.$refs[&#39;aa&#39;]获取指定DOM，输出：原始值</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>使用this.$nextTick()</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  testClick:function()&#123;</span><br><span class=\"line\">    let that&#x3D;this;</span><br><span class=\"line\">    that.testMsg&#x3D;&quot;修改后的值&quot;;</span><br><span class=\"line\">    that.$nextTick(function()&#123;</span><br><span class=\"line\">      console.log(that.$refs[&#39;aa&#39;].innerText);  &#x2F;&#x2F;输出：修改后的值</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM，<br>3、在使用某个第三方插件时 ，希望在vue生成的某些dom动态发生变化时重新应用该插件，也会用到该方法，这时候就需要在 $nextTick 的回调函数中执行重新应用插件的方法。</p>\n<h3 id=\"使用原理\"><a href=\"#使用原理\" class=\"headerlink\" title=\"使用原理\"></a>使用原理</h3><p><strong>作用</strong><br>Vue.nextTick用于延迟执行一段代码,即在下次 DOM 更新循环结束之后执行延迟回调。</p>\n<p>Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 <code>Promise.then</code> 和<code>MessageChannel</code>，如果执行环境不支持，会采用 <code>setTimeout(fn, 0)</code>代替。</p>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><h3 id=\"过滤器使用场景\"><a href=\"#过滤器使用场景\" class=\"headerlink\" title=\"过滤器使用场景\"></a>过滤器使用场景</h3><p>过滤器可以用在两个地方：双花括号插值和 v-bind 表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 在双花括号中 --&gt;</span><br><span class=\"line\">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 在 &#96;v-bind&#96; 中 --&gt;</span><br><span class=\"line\">&lt;div v-bind:id&#x3D;&quot;rawId | formatId&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<p>你可以在一个组件的选项中定义本地的过滤器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">filters: &#123;</span><br><span class=\"line\">  capitalize: function (value) &#123;</span><br><span class=\"line\">    if (!value) return &#39;&#39;</span><br><span class=\"line\">    value &#x3D; value.toString()</span><br><span class=\"line\">    return value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者在创建 Vue 实例之前全局定义过滤器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.filter(&#39;capitalize&#39;, function (value) &#123;</span><br><span class=\"line\">  if (!value) return &#39;&#39;</span><br><span class=\"line\">  value &#x3D; value.toString()</span><br><span class=\"line\">  return value.charAt(0).toUpperCase() + value.slice(1)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong><br>1.当全局过滤器和局部过滤器重名时，会采用局部过滤器。<br>2.全局注册是filter，没有s。而组件过滤器是filters，是有s的。虽然写的时候没有s不会报错，但是没有效果。</p>\n<h3 id=\"过滤器串联\"><a href=\"#过滤器串联\" class=\"headerlink\" title=\"过滤器串联\"></a>过滤器串联</h3><p>filterA 被定义为接收单个参数的过滤器函数，表达式 message 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 filterB，将 filterA 的结果传递到 filterB 中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/filter.webp\" alt=\"alt\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123; message | filterA(&#39;07&#39;,&#39;17&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/filter1.webp\" alt=\"alt\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123; &#39;Hello&#39;,&#39;World&#39; | filterB &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/filter2.webp\" alt=\"alt\"></p>\n<h2 id=\"require\"><a href=\"#require\" class=\"headerlink\" title=\"require\"></a>require</h2><h3 id=\"js引用\"><a href=\"#js引用\" class=\"headerlink\" title=\"js引用\"></a>js引用</h3><p><img src=\"/images/require.png\" alt=\"alt\"></p>\n<h3 id=\"css引用\"><a href=\"#css引用\" class=\"headerlink\" title=\"css引用\"></a>css引用</h3><p><img src=\"/images/src.png\" alt=\"alt\"></p>\n","categories":["vue"],"tags":["vue"]},{"title":"moment.js","url":"/moment-js/","content":"<p><a href=\"http://momentjs.cn/\" target=\"_blank\" rel=\"noopener\" title=\"Moment.js\">Moment.js</a><br>JavaScript 日期处理类库</p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"时间戳转年月日\"><a href=\"#时间戳转年月日\" class=\"headerlink\" title=\"时间戳转年月日\"></a>时间戳转年月日</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">moment(new Date().getTime()).format(&#39;YYYY-MM-DD HH:mm:ss&#39;)</span><br><span class=\"line\">moment(Date.now()).format(&#39;YYYY-MM-DD HH:mm:ss&#39;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"年月日转时间戳\"><a href=\"#年月日转时间戳\" class=\"headerlink\" title=\"年月日转时间戳\"></a>年月日转时间戳</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">moment(Date.now(), &#39;YYYY-MM-DD HH:mm:ss&#39;).valueOf()</span><br><span class=\"line\">moment(Date.now()).valueOf()</span><br></pre></td></tr></table></figure>","categories":["vue","js"],"tags":["vue","js"]},{"title":"表单验证","url":"/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/","content":"<p>element-ui中表单验证的三种方式</p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"第一种常用方式：表单上加rules｛object｝\"><a href=\"#第一种常用方式：表单上加rules｛object｝\" class=\"headerlink\" title=\"第一种常用方式：表单上加rules｛object｝\"></a>第一种常用方式：表单上加rules｛object｝</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;el-form class&#x3D;&quot;apply-form first-form&quot; :model&#x3D;&quot;formData&quot; :rules&#x3D;&quot;rule&quot; ref&#x3D;&quot;form&quot;&gt;</span><br><span class=\"line\">    &lt;el-form-item label&#x3D;&quot;姓名&quot; prop&#x3D;&quot;visitorName&quot;&gt;</span><br><span class=\"line\">        &lt;el-input v-model&#x3D;&quot;formData.visitorName&quot; placeholder&#x3D;&quot;请输入姓名&quot; clearable&gt;&lt;&#x2F;el-input&gt;</span><br><span class=\"line\">    &lt;&#x2F;el-form-item&gt;</span><br><span class=\"line\">    &lt;el-form-item label&#x3D;&quot;身份证号&quot; prop&#x3D;&quot;cardCode&quot;&gt;</span><br><span class=\"line\">       &lt;el-input v-model&#x3D;&quot;formData.cardCode&quot; :maxlength&#x3D;&quot;18&quot; placeholder&#x3D;&quot;请输入身份证号&quot; clearable&gt;&lt;&#x2F;el-input&gt;</span><br><span class=\"line\">    &lt;&#x2F;el-form-item&gt;</span><br><span class=\"line\">&lt;&#x2F;el-form&gt;</span><br></pre></td></tr></table></figure>\n<p>这种方式需要在data()中写入rule{},对于需要校验字段prop中的如visitorName写上验证规则，如下：<br>可以设置双重验证标准</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">   return &#123;</span><br><span class=\"line\">       formData: &#123;</span><br><span class=\"line\">           visitorName: &#39;&#39;,</span><br><span class=\"line\">           cardType: 1,</span><br><span class=\"line\">           cardCode: &#39;&#39;</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       rule: &#123;</span><br><span class=\"line\">           visitorName: [</span><br><span class=\"line\">               &#123; required: true, message: &#39;请输入姓名&#39;, trigger: &#39;blur&#39; &#125;,</span><br><span class=\"line\">               &#123; min: 2, max: 10, message: &#39;长度在 2 到 10 个字符&#39;, trigger: &#39;blur&#39; &#125;,</span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                        required: true,</span><br><span class=\"line\">                        pattern: &#x2F;^[\\u4e00-\\u9fa5_a-zA-Z0-9.·-]+$&#x2F;,</span><br><span class=\"line\">                        message: &#39;姓名不支持特殊字符&#39;,</span><br><span class=\"line\">                        trigger: &#39;blur&#39;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          cardCode: [</span><br><span class=\"line\">              &#123; required: true, message: &#39;请输入身份证号&#39;, trigger: &#39;blur&#39; &#125;,</span><br><span class=\"line\">              &#123; min: 15, max: 18, message: &#39;请如实填写18位号码，以供学校保卫科核对&#39;, trigger: &#39;blur&#39; &#125;,</span><br><span class=\"line\">              &#123;</span><br><span class=\"line\">                   required: true,</span><br><span class=\"line\">                   pattern: &#x2F;(^\\d&#123;15&#125;$)|(^\\d&#123;18&#125;$)|(^\\d&#123;17&#125;(\\d|X|x)$)&#x2F;,</span><br><span class=\"line\">                   message: &#39;请输入正确的身份证号码&#39;,</span><br><span class=\"line\">                   trigger: &#39;blur&#39;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中对于有些需要自定义的校验规则可以作为变量写在data中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">    let reg &#x3D; &#x2F;(?!^(\\d+|[a-zA-Z]+|[~!@#$%^&amp;*?]+)$)^[\\w~!@#$%^&amp;*?]&#123;6,12&#125;$&#x2F;</span><br><span class=\"line\">    var validateNewPwd &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        if (!reg.test(value)) &#123;</span><br><span class=\"line\">            callback(new Error(&#39;密码应是6-12位数字、字母或字符！&#39;))</span><br><span class=\"line\">        &#125; else if (this.form.oldPasswd &#x3D;&#x3D;&#x3D; value) &#123;</span><br><span class=\"line\">            callback(new Error(&#39;新密码与旧密码不可一致！&#39;))</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            callback()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var validateComfirmPwd &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        if (!reg.test(value)) &#123;</span><br><span class=\"line\">            callback(new Error(&#39;密码应是6-12位数字、字母或字符！&#39;))</span><br><span class=\"line\">        &#125; else if (this.form.newPasswd !&#x3D;&#x3D; value) &#123;</span><br><span class=\"line\">            callback(new Error(&#39;确认密码与新密码不一致！&#39;))</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            callback()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        form: &#123;</span><br><span class=\"line\">            newPasswd: &#39;&#39;,</span><br><span class=\"line\">            comfirmPwd: &#39;&#39;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        rules: &#123;</span><br><span class=\"line\">            newPasswd: [</span><br><span class=\"line\">                &#123; required: true, message: &#39;请输入新密码&#39;, trigger: &#39;blur&#39; &#125;,</span><br><span class=\"line\">                &#123; validator: validateNewPwd, trigger: &#39;blur&#39; &#125;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            comfirmPwd: [</span><br><span class=\"line\">                &#123; required: true, message: &#39;请输入确认密码&#39;, trigger: &#39;blur&#39; &#125;,</span><br><span class=\"line\">                &#123; validator: validateComfirmPwd, trigger: &#39;blur&#39; &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二种方式：在el-form-item单个添加\"><a href=\"#第二种方式：在el-form-item单个添加\" class=\"headerlink\" title=\"第二种方式：在el-form-item单个添加\"></a>第二种方式：在el-form-item单个添加</h2><p>这种方式适用于需要个别检验的字段，或者表单字段有变动的校验；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;el-form-item label&#x3D;&quot;电话号码&quot; class&#x3D;&quot;el-form-item--small has-error&quot; :prop&#x3D;&quot;phoneNum&quot; :rules&#x3D;&quot;[&#123; required: true, message: &#39;请输入电话号码&#39;, trigger: &#39;blur&#39; &#125;, &#123; required: true, pattern: &#x2F;^((13|14|15|16|17|18)[0-9]&#123;1&#125;\\d&#123;8&#125;)|((166|199|198)[0-9]&#123;1&#125;\\d&#123;7&#125;)$&#x2F;, message: &#39;请输入正确的电话号码&#39;, trigger: &#39;blur&#39; &#125;]&quot;&gt;</span><br><span class=\"line\">    &lt;el-input v-model&#x3D;&quot;v.phoneNum&quot; :maxlength&#x3D;&quot;11&quot; placeholder clearable&gt;&lt;&#x2F;el-input&gt;</span><br><span class=\"line\">&lt;&#x2F;el-form-item&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三种方式：动态增减表单项\"><a href=\"#第三种方式：动态增减表单项\" class=\"headerlink\" title=\"第三种方式：动态增减表单项\"></a>第三种方式：动态增减表单项</h2><p>先看需求效果图<br><img src=\"/images/formdata1.png\" alt=\"alt\"><br>对应的数据结构：<br><img src=\"/images/formdata2.png\" alt=\"alt\"><br>对应删除增加表单项的操作为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">addPhone() &#123;</span><br><span class=\"line\">    let len &#x3D; this.formData.phoneInfoList.length</span><br><span class=\"line\">    this.$set(this.formData.phoneInfoList, len, &#123;</span><br><span class=\"line\">        relation: [],</span><br><span class=\"line\">        phoneNum: &#39;&#39;,</span><br><span class=\"line\">        relationType: 0,</span><br><span class=\"line\">        schoolId: this.selectedUser.schoolId,</span><br><span class=\"line\">        userCode: this.selectedUser.userCode</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">deletePhone(item) &#123;</span><br><span class=\"line\">    if (this.formData.phoneInfoList.length &gt; 1) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 表示先获取这个元素的下标，然后从这个下标开始计算，删除长度为1的元素</span><br><span class=\"line\">        this.formData.phoneInfoList.splice(this.formData.phoneInfoList.indexOf(item), 1);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        this.$vux.toast.text(&#39;至少保留一个家长亲情号码！&#39;)</span><br><span class=\"line\">        return false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这样的rule、prop直接写就对应不上表单mode绑定的对象上的属性，所以在此要用循环的方式找到要校验的字段所在数据中的索引，然后再以字符串拼接的方式连上校验字段名称：<br><img src=\"/images/formdata3.png\" alt=\"alt\"></p>\n<p>渲染出来的html为：<br><img src=\"/images/formdata4.png\" alt=\"alt\"></p>\n<h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><p>获取form表单参数 <code>this.refName</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 提交</span><br><span class=\"line\">submit(formName) &#123;</span><br><span class=\"line\">    this.$refs[formName].validate((valid) &#x3D;&gt; &#123;</span><br><span class=\"line\">        if (valid) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;如果通过验证 to do...</span><br><span class=\"line\">            let params &#x3D; this.form</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          console.log(&#39;error submit!!&#39;)</span><br><span class=\"line\">          return false</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重置\"><a href=\"#重置\" class=\"headerlink\" title=\"重置\"></a>重置</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$refs[form].resetFields();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"/images/formdata5.png\" alt=\"alt\"><br>表单的html代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;el-form :model&#x3D;&quot;ruleForm&quot; status-icon :rules&#x3D;&quot;rules&quot; ref&#x3D;&quot;ruleForm&quot; label-width&#x3D;&quot;100px&quot; class&#x3D;&quot;demo-ruleForm&quot;&gt;</span><br><span class=\"line\"> &lt;el-form-item label&#x3D;&quot;用户名&quot; prop&#x3D;&quot;username&quot;&gt;</span><br><span class=\"line\">    &lt;el-input   v-model.number&#x3D;&quot;ruleForm.username&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class=\"line\">  &lt;&#x2F;el-form-item&gt;</span><br><span class=\"line\">  &lt;el-form-item label&#x3D;&quot;密码&quot; prop&#x3D;&quot;password&quot;&gt;</span><br><span class=\"line\">    &lt;el-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;ruleForm.password&quot; autocomplete&#x3D;&quot;off&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class=\"line\">  &lt;&#x2F;el-form-item&gt;</span><br><span class=\"line\">  &lt;el-form-item label&#x3D;&quot;确认密码&quot; prop&#x3D;&quot;checkPass&quot;&gt;</span><br><span class=\"line\">    &lt;el-input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;ruleForm.checkPass&quot; autocomplete&#x3D;&quot;off&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class=\"line\">  &lt;&#x2F;el-form-item&gt;</span><br><span class=\"line\">  &lt;el-form-item&gt;</span><br><span class=\"line\">    &lt;el-button type&#x3D;&quot;primary&quot; @click&#x3D;&quot;submitForm(&#39;ruleForm&#39;)&quot;&gt;提交&lt;&#x2F;el-button&gt; </span><br><span class=\"line\">    &lt;el-button @click&#x3D;&quot;resetForm(&#39;ruleForm&#39;)&quot;&gt;重置&lt;&#x2F;el-button&gt;</span><br><span class=\"line\">  &lt;&#x2F;el-form-item&gt;</span><br><span class=\"line\">&lt;&#x2F;el-form&gt;</span><br></pre></td></tr></table></figure>\n<p>js代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import Head from &#39;..&#x2F;..&#x2F;components&#x2F;common&#x2F;Head&#39;</span><br><span class=\"line\">import axios from &#39;axios&#39;</span><br><span class=\"line\">import Qs from &#39;qs&#39;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">        components:&#123;</span><br><span class=\"line\">    Head</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">       var checkUser &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">         if (!value) &#123;</span><br><span class=\"line\">          return callback(new Error(&#39;用户名不能为空&#39;));</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">        if (!Number.isInteger(value)) &#123;</span><br><span class=\"line\">            callback(new Error(&#39;请输入数字值&#39;));</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">            &#x2F;&#x2F; if (value !&#x3D; 11) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;   callback(new Error(&#39;手机格式不正确&#39;));</span><br><span class=\"line\">            &#x2F;&#x2F; &#125; else &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;   callback();</span><br><span class=\"line\">            &#x2F;&#x2F; &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, 1000);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      var vapass &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        if (value &#x3D;&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">          callback(new Error(&#39;请输入密码&#39;));</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          if (this.ruleForm.checkPass !&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">            this.$refs.ruleForm.validateField(&#39;checkPass&#39;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          callback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      var varepass &#x3D; (rule, value, callback) &#x3D;&gt; &#123;</span><br><span class=\"line\">        if (value &#x3D;&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class=\"line\">          callback(new Error(&#39;请再次输入密码&#39;));</span><br><span class=\"line\">        &#125; else if (value !&#x3D;&#x3D; this.ruleForm.password) &#123;</span><br><span class=\"line\">          callback(new Error(&#39;两次输入密码不一致!&#39;));</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          callback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        ruleForm: &#123;</span><br><span class=\"line\">          password: &#39;&#39;,</span><br><span class=\"line\">          checkPass: &#39;&#39;,</span><br><span class=\"line\">          username: &#39;&#39;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        rls: &#123;</span><br><span class=\"line\">          password: [</span><br><span class=\"line\">            &#123; validator: vapass, trigger: &#39;blur&#39; &#125;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          checkPass: [</span><br><span class=\"line\">            &#123; validator: varepass, trigger: &#39;blur&#39; &#125;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          username: [</span><br><span class=\"line\">             &#123; validator: checkUser, trigger: &#39;blur&#39; &#125;</span><br><span class=\"line\">           ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      submitForm(formName) &#123;</span><br><span class=\"line\">        this.$refs[formName].validate((valid) &#x3D;&gt; &#123;</span><br><span class=\"line\">          if (valid) &#123;</span><br><span class=\"line\">            &#x2F;*在这里进行跨域请求*&#x2F;</span><br><span class=\"line\">                  this.axios(&#123;</span><br><span class=\"line\">                            method: &quot;post&quot;,</span><br><span class=\"line\">                            url: &#39;&#x2F;api&#x2F;PsychoSys&#x2F;regedit.action&#39;,</span><br><span class=\"line\">                            data: Qs.stringify(this.ruleForm)</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        .then(function(res) &#123;</span><br><span class=\"line\">                           console.log(res);</span><br><span class=\"line\">                       &#125;)</span><br><span class=\"line\">                        .catch(function(err) &#123;</span><br><span class=\"line\">                           console.log(err);</span><br><span class=\"line\">                       &#125;);</span><br><span class=\"line\">            &#x2F;*在这里进行跨域请求*&#x2F;</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            console.log(&#39;error submit!!&#39;);</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      resetForm(formName) &#123;</span><br><span class=\"line\">        this.$refs[formName].resetFields();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>","categories":["vue","element"],"tags":["vue,element"]},{"title":"axios安装、使用和配置","url":"/axios%E5%AE%89%E8%A3%85%E3%80%81%E4%BD%BF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AE/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>cdn</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;axios&#x2F;dist&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<p>npm </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install axios -S</span><br></pre></td></tr></table></figure>\n<p>安装完成后，在main.js文件中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import axios from &#39;axios&#39;</span><br><span class=\"line\">Vue.prototype.$axios &#x3D; axios</span><br></pre></td></tr></table></figure>\n\n\n<a id=\"more\"></a>\n\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><strong>GET</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let params &#x3D; &#123; id: 12345 &#125;</span><br><span class=\"line\">axios.get(&#39;&#x2F;user&#39;, &#123; params &#125;)</span><br><span class=\"line\">.then((res) &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res);</span><br><span class=\"line\">&#125;).catch((error) &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(error);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>POST</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let params &#x3D; &#123; id: 12345 &#125;</span><br><span class=\"line\">axios.post(&#39;&#x2F;user&#39;, params)</span><br><span class=\"line\">.then((res) &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res);</span><br><span class=\"line\">&#125;).catch((error) &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(error);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><strong>请求超时时间</strong><br>时间单位为毫秒，下述设置为50秒后请求失效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios.defaults.timeout &#x3D; 50000</span><br></pre></td></tr></table></figure>\n\n<p><strong>基础URL</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios.defaults.baseURL &#x3D; &#39;&#x2F;api&#x2F;ecm&#x2F;&#39;</span><br></pre></td></tr></table></figure>\n\n<p><strong>请求头</strong><br>需要设置Content-Type，可以单独提取一个文件配置，也可以在request.js里配置<br>http.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios.defaults.headers.post[&#39;Content-Type&#39;] &#x3D; &#39;application&#x2F;x-www-form-urlencoded&#39;</span><br><span class=\"line\">axios.defaults.headers.post[&#39;Content-Type&#39;] &#x3D; &#39;application&#x2F;json;charset&#x3D;UTF-8&#39;</span><br></pre></td></tr></table></figure>\n\n<p><strong>拦截器</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; http request 拦截器</span><br><span class=\"line\">axios.interceptors.request.use(</span><br><span class=\"line\">  config &#x3D;&gt; &#123;</span><br><span class=\"line\">    config.headers.post[&#39;csrftoken&#39;] &#x3D; VueCookie.get(&#39;csrftoken&#39;),</span><br><span class=\"line\">    config.headers.put[&#39;csrftoken&#39;] &#x3D; VueCookie.get(&#39;csrftoken&#39;),</span><br><span class=\"line\">    config.headers.delete[&#39;csrftoken&#39;] &#x3D; VueCookie.get(&#39;csrftoken&#39;)</span><br><span class=\"line\">    return config</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  err &#x3D;&gt; &#123;</span><br><span class=\"line\">    return Promise.reject(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; http response 拦截器</span><br><span class=\"line\">axios.interceptors.response.use(</span><br><span class=\"line\">  response &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (response) &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return response</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (error.response) &#123;</span><br><span class=\"line\">      switch (error.response.status) &#123;</span><br><span class=\"line\">        case 400:</span><br><span class=\"line\">          Message.error(error.response.data)</span><br><span class=\"line\">          break</span><br><span class=\"line\">        case 500:</span><br><span class=\"line\">          Message.error(error.response.data)</span><br><span class=\"line\">          break      </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Promise.reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>当你了解完上述的知识后，就可以基本完成axios的配置和使用了，在src目录下新建api文件夹，在api文件夹中新建api.js文件</p>\n<p><strong>utils/request.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import axios from &#39;axios&#39;</span><br><span class=\"line\">import &#123; Message &#125; from &#39;element-ui&#39;</span><br><span class=\"line\">import store from &#39;@&#x2F;store&#x2F;index&#39;</span><br><span class=\"line\">import router from &#39;@&#x2F;router&#39;</span><br><span class=\"line\">import &#123; getToken, removeToken &#125; from &#39;@&#x2F;utils&#x2F;auth&#39;</span><br><span class=\"line\">&#x2F;&#x2F; const qs &#x3D; require(&#39;qs&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 响应时间</span><br><span class=\"line\">axios.defaults.timeout &#x3D; 20000</span><br><span class=\"line\">&#x2F;&#x2F; 配置cookie</span><br><span class=\"line\">&#x2F;&#x2F; axios.defaults.withCredentials &#x3D; true</span><br><span class=\"line\">&#x2F;&#x2F; 配置请求头application&#x2F;x-www-form-urlencoded</span><br><span class=\"line\">axios.defaults.headers.post[&#39;Content-Type&#39;] &#x3D; &#39;application&#x2F;json;charset&#x3D;UTF-8&#39;</span><br><span class=\"line\">&#x2F;&#x2F; 配置接口地址</span><br><span class=\"line\">&#x2F;&#x2F; axios.defaults.baseURL &#x3D; process.env.API_ROOT</span><br><span class=\"line\">&#x2F;&#x2F; http request 拦截器</span><br><span class=\"line\">axios.interceptors.request.use(</span><br><span class=\"line\">  config &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; const token &#x3D; getCookie(&#39;名称&#39;);</span><br><span class=\"line\">    config.data &#x3D; JSON.stringify(config.data)</span><br><span class=\"line\">    &#x2F;&#x2F; Do something before request is sent</span><br><span class=\"line\">    if (store.getters.token) &#123;</span><br><span class=\"line\">      config.headers[&#39;token&#39;] &#x3D; getToken() &#x2F;&#x2F; 让每个请求携带token--[&#39;X-Token&#39;]为自定义key 请根据实际情况自行修改</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return config</span><br><span class=\"line\">  &#125;, error &#x3D;&gt; &#123;</span><br><span class=\"line\">    Message.error(&#39;请求错误!&#39;)</span><br><span class=\"line\">    return Promise.reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">&#x2F;&#x2F; http response 拦截器</span><br><span class=\"line\">axios.interceptors.response.use(</span><br><span class=\"line\">  response &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (response.data.errCode &#x3D;&#x3D;&#x3D; 2) &#123;</span><br><span class=\"line\">      router.push(&#123;</span><br><span class=\"line\">        path: &#39;&#x2F;&#39;,</span><br><span class=\"line\">        querry: &#123;redirect: router.currentRoute.fullPath&#125;&#x2F;&#x2F; 从哪个页面跳转</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return response</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error &#x3D;&gt; &#123;</span><br><span class=\"line\">    if (error.response) &#123;</span><br><span class=\"line\">      let _status &#x3D; parseInt(error.response.status)</span><br><span class=\"line\">      if (_status &#x3D;&#x3D;&#x3D; 403) &#123;</span><br><span class=\"line\">        router.push(&#123; path: &#39;&#x2F;login&#39; &#125;)</span><br><span class=\"line\">        removeToken(&#39;token&#39;)</span><br><span class=\"line\">        localStorage.clear()</span><br><span class=\"line\">        Message(&#123;</span><br><span class=\"line\">          message: error.response.data,</span><br><span class=\"line\">          type: &#39;error&#39;,</span><br><span class=\"line\">          duration: 2 * 1000</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        removeToken(&#39;token&#39;)</span><br><span class=\"line\">        localStorage.clear()</span><br><span class=\"line\">        router.replace(&#123;</span><br><span class=\"line\">          path: &#39;&#x2F;login&#39;,</span><br><span class=\"line\">          query: &#123;redirect: router.currentRoute.fullPath&#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        Message(&#123;</span><br><span class=\"line\">          message: error.message,</span><br><span class=\"line\">          type: &#39;error&#39;,</span><br><span class=\"line\">          duration: 2 * 1000</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Promise.reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 封装get方法</span><br><span class=\"line\"> * @param url</span><br><span class=\"line\"> * @param data</span><br><span class=\"line\"> * @returns &#123;Promise&#125;</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">export function get (url, params &#x3D; &#123;&#125;) &#123;</span><br><span class=\"line\">  &#x2F;&#x2F; console.log(qs.stringify(params))</span><br><span class=\"line\">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">    axios.get(url, &#123;</span><br><span class=\"line\">      params</span><br><span class=\"line\">    &#125;).then(response &#x3D;&gt; &#123;</span><br><span class=\"line\">      resolve(response.data)</span><br><span class=\"line\">    &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 封装post请求</span><br><span class=\"line\"> * @param url</span><br><span class=\"line\"> * @param data</span><br><span class=\"line\"> * @returns &#123;Promise&#125;</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">export function post (url, data &#x3D; &#123;&#125;) &#123;</span><br><span class=\"line\">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">    axios.post(url, data)</span><br><span class=\"line\">      .then(response &#x3D;&gt; &#123;</span><br><span class=\"line\">        resolve(response.data)</span><br><span class=\"line\">      &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 封装exportExl请求</span><br><span class=\"line\"> * @param url</span><br><span class=\"line\"> * @param data</span><br><span class=\"line\"> * @returns &#123;Promise&#125;</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">export function exportExl (url, title, data &#x3D; &#123;&#125;) &#123;</span><br><span class=\"line\">  return axios(&#123; &#x2F;&#x2F; 用axios发送post请求</span><br><span class=\"line\">    method: &#39;post&#39;,</span><br><span class=\"line\">    url: url, &#x2F;&#x2F; 请求地址</span><br><span class=\"line\">    data: data, &#x2F;&#x2F; 参数</span><br><span class=\"line\">    responseType: &#39;blob&#39;, &#x2F;&#x2F; 表明返回服务器返回的数据类型</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      &#39;Content-Type&#39;: &#39;application&#x2F;json&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    const link &#x3D; document.createElement(&#39;a&#39;)</span><br><span class=\"line\">    let blob &#x3D; new Blob([res.data], &#123;type: &#39;application&#x2F;vnd.ms-excel&#39;&#125;)</span><br><span class=\"line\">    link.style.display &#x3D; &#39;none&#39;</span><br><span class=\"line\">    link.href &#x3D; URL.createObjectURL(blob)</span><br><span class=\"line\">    link.setAttribute(&#39;download&#39;, title + &#39;.xls&#39;)</span><br><span class=\"line\">    document.body.appendChild(link)</span><br><span class=\"line\">    link.click()</span><br><span class=\"line\">    URL.revokeObjectURL(link.href) &#x2F;&#x2F; 释放URL 对象</span><br><span class=\"line\">    document.body.removeChild(link)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 封装delete请求</span><br><span class=\"line\"> * @param url</span><br><span class=\"line\"> * @param data</span><br><span class=\"line\"> * @returns &#123;Promise&#125;</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">export function del (url, params &#x3D; &#123;&#125;) &#123;</span><br><span class=\"line\">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">    axios.delete(url, &#123;</span><br><span class=\"line\">      params</span><br><span class=\"line\">    &#125;).then(response &#x3D;&gt; &#123;</span><br><span class=\"line\">      resolve(response.data)</span><br><span class=\"line\">    &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 封装put请求</span><br><span class=\"line\"> * @param url</span><br><span class=\"line\"> * @param data</span><br><span class=\"line\"> * @returns &#123;Promise&#125;</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">export function put (url, data &#x3D; &#123;&#125;) &#123;</span><br><span class=\"line\">  return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">    axios.put(url, data)</span><br><span class=\"line\">      .then(response &#x3D;&gt; &#123;</span><br><span class=\"line\">        resolve(response.data)</span><br><span class=\"line\">      &#125;, err &#x3D;&gt; &#123;</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>api.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123;post, exportExl, get, del&#125; from &#39;@&#x2F;utils&#x2F;request&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export function getAllDailyReport (params) &#123;</span><br><span class=\"line\">  return post(&#39;&#x2F;web&#x2F;dailyReport&#x2F;xxxxx&#39;, params)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; getAllDailyReport &#125; from &#39;@&#x2F;api&#x2F;securityBusiness&#39;</span><br><span class=\"line\">dataList (val, searchWay) &#123;</span><br><span class=\"line\">      let params &#x3D; &#123;</span><br><span class=\"line\">        &#39;pageNum&#39;: val,</span><br><span class=\"line\">        &#39;pageSize&#39;: &#39;10&#39;,</span><br><span class=\"line\">        &#39;supportTaskName&#39;: this.formSecurityData.supportTaskName</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (searchWay) &#123;</span><br><span class=\"line\">        localStorage.setItem(&#39;searchWay&#39;, JSON.stringify(params))</span><br><span class=\"line\">        localStorage.setItem(&#39;searchRouter&#39;, this.$route.path)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      getAllDailyReport(params).then((res) &#x3D;&gt; &#123;</span><br><span class=\"line\">        let _data &#x3D; res.data.pageInfo</span><br><span class=\"line\">        if (_data) &#123;</span><br><span class=\"line\">          let tableDate &#x3D; _data.list</span><br><span class=\"line\">          this.tableData &#x3D; tableDate</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.totalNum &#x3D; _data.total</span><br><span class=\"line\">        this.pageSize &#x3D; _data.pageSize</span><br><span class=\"line\">        this.pageNum &#x3D; 1</span><br><span class=\"line\">      &#125;, (err) &#x3D;&gt; &#123;</span><br><span class=\"line\">        console.log(err)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","categories":["vue"],"tags":["vue"]},{"title":"ES6之async和await","url":"/ES6%E4%B9%8Basync%E5%92%8Cawait/","content":"<p><code>async</code>和<code>await</code>是用来处理异步的。即你需要异步像同步一样执行，需要异步返回结果之后，再往下依据结果继续执行。<br><code>async</code> 是“异步”的简写，而 await 可以认为是 async wait 的简写。<br><code>async</code> 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。</p>\n<a id=\"more\"></a>\n\n\n<h3 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">async function testAsync() &#123;</span><br><span class=\"line\">    return &quot;hello async&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const result &#x3D; testAsync();</span><br><span class=\"line\">console.log(result);</span><br></pre></td></tr></table></figure>\n<p>打印输出的是一个Promise 对象，async 函数会返回一个<code>Promise</code> 对象。<br>在最外层不能用 await 获取其返回值的情况下，使用 <code>then()</code> 链来处理这个 Promise 对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">testAsync().then(v &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(v);    &#x2F;&#x2F; 输出 hello async</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当 <code>async</code> 函数没有返回值时，返回 <code>Promise.resolve(undefined)</code></p>\n<h3 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h3><p><strong>await只能放在async函数内部使用</strong><br><code>await</code> 用于一个异步操作之前，表示要“等待”这个异步操作的返回值。<br><code>await</code> 也可以用于一个同步的值。</p>\n<p>如果它等到的不是一个 <code>Promise</code> 对象，那 await 表达式的运算结果就是它等到的东西。<br>如果它等到的是一个 <code>Promise</code> 对象，<code>await</code> 就会阻塞后面的代码，等着 <code>Promise</code> 对象 <code>resolve</code>，然后得到 <code>resolve</code> 的值，作为 <code>await</code> 表达式的运算结果。</p>\n<h3 id=\"同步代码\"><a href=\"#同步代码\" class=\"headerlink\" title=\"同步代码\"></a>同步代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const a &#x3D; await &#39;hello world&#39;</span><br><span class=\"line\">&#x2F;&#x2F; 相当于</span><br><span class=\"line\">const a &#x3D; await Promise.resolve(&#39;hello world&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; 所以直接写同步代码即可，不需要await关键字</span><br><span class=\"line\">const a &#x3D; &#39;hello world&#39;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异步代码\"><a href=\"#异步代码\" class=\"headerlink\" title=\"异步代码\"></a>异步代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 2s 之后返回双倍的值</span><br><span class=\"line\">function doubleAfter2seconds(num) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            resolve(2 * num)</span><br><span class=\"line\">        &#125;, 2000);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function testResult () &#123;</span><br><span class=\"line\">    let result &#x3D; await doubleAfter2seconds(30);</span><br><span class=\"line\">    console.log(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testResult();</span><br><span class=\"line\">&#x2F;&#x2F; 2s 之后，输出了60.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Demo1\"><a href=\"#Demo1\" class=\"headerlink\" title=\"Demo1\"></a>Demo1</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 2s 之后返回双倍的值</span><br><span class=\"line\">function doubleAfter2seconds(num) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            resolve(2 * num)</span><br><span class=\"line\">        &#125;, 2000);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function testResult () &#123;</span><br><span class=\"line\">    console.log(&#39;内部调用前&#39;) &#x2F;&#x2F; 2</span><br><span class=\"line\">    let result &#x3D; await doubleAfter2seconds(30);</span><br><span class=\"line\">    console.log(result); &#x2F;&#x2F; 4</span><br><span class=\"line\">    console.log(&#39;内部调用后&#39;) &#x2F;&#x2F; 5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&#39;外部调用前&#39;) &#x2F;&#x2F; 1</span><br><span class=\"line\">testResult();</span><br><span class=\"line\">console.log(&#39;外部调用后&#39;) &#x2F;&#x2F; 3</span><br><span class=\"line\">&#x2F;&#x2F; --- 依次输出</span><br><span class=\"line\">&#x2F;&#x2F; 外部调用前</span><br><span class=\"line\">&#x2F;&#x2F; 内部调用前</span><br><span class=\"line\">&#x2F;&#x2F; 外部调用后</span><br><span class=\"line\">&#x2F;&#x2F; --- 2s 之后输出</span><br><span class=\"line\">&#x2F;&#x2F; 60</span><br><span class=\"line\">&#x2F;&#x2F; 内部调用后</span><br></pre></td></tr></table></figure>\n\n<p><strong>分析一下上面的执行顺序：</strong><br>1、首先打印输出外部调用前，同步代码，顺序执行。<br>2、然后调用方法<code>testResult()</code>，打印输出内部调用前，同步代码，顺序执行。<br>3、再执行异步方法<code>doubleAfter2seconds</code>，<br>　1&gt;如果没用await关键字，此后的执行顺序应该是<br>　　内部调用后，外部调用后，2s 之后输出60<br>　　因为异步方法不阻塞其他代码的执行，最后再输出60<br>　2&gt;这里使用了<code>await</code>关键字，所以到这里后会等待异步返回结果，再往下执行。<br>4、当<code>testResult</code>函数内部<code>await</code>阻塞执行后，不会影响到<code>testResult</code>函数外面</p>\n<p><strong>async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。</strong></p>\n<p>所以，在调用<code>testResult</code>函数后，会继续向下执行，打印输出外部调用后<br>5、当2s之后，异步函数<code>doubleAfter2seconds</code>执行完成，返回结果，<br>打印输出60<br>6、因为<code>await</code>将异步变成同步，所以在输出60后，同步执行，再输出内部调用后</p>\n<h3 id=\"Demo2\"><a href=\"#Demo2\" class=\"headerlink\" title=\"Demo2\"></a>Demo2</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">console.log(&quot;1&quot;)</span><br><span class=\"line\">异步处理函数：console.log（2）</span><br><span class=\"line\">console.log(3)</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">正常情况 132</span><br><span class=\"line\">用async await 123</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Demo3\"><a href=\"#Demo3\" class=\"headerlink\" title=\"Demo3\"></a>Demo3</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 2s 之后返回双倍的值</span><br><span class=\"line\">function doubleAfter2seconds(num) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            resolve(2 * num)</span><br><span class=\"line\">        &#125;, 2000);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function testResult () &#123;</span><br><span class=\"line\">    let first &#x3D; await doubleAfter2seconds(10);</span><br><span class=\"line\">    let second &#x3D; await doubleAfter2seconds(20);    </span><br><span class=\"line\">    console.log(first + second);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>方式一</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 2s 之后返回双倍的值</span><br><span class=\"line\">function doubleAfter2seconds(num) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            resolve(2 * num)</span><br><span class=\"line\">        &#125;, 2000);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function testResult () &#123;</span><br><span class=\"line\">    let first &#x3D; await doubleAfter2seconds(10);</span><br><span class=\"line\">    let second &#x3D; await doubleAfter2seconds(20);    </span><br><span class=\"line\">    let res &#x3D; first + second;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testResult().then(res &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(res);      </span><br><span class=\"line\">&#125;).catch(error &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(error);     </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>方式二</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 2s 之后返回双倍的值</span><br><span class=\"line\">function doubleAfter2seconds(num) &#123;</span><br><span class=\"line\">    return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            resolve(2 * num)</span><br><span class=\"line\">        &#125;, 2000);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function testResult () &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        let first &#x3D; await doubleAfter2seconds(10);</span><br><span class=\"line\">        let second &#x3D; await doubleAfter2seconds(20);    </span><br><span class=\"line\">        let res &#x3D; first + second;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125; catch (error) &#123;</span><br><span class=\"line\">        console.log(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testResult()</span><br></pre></td></tr></table></figure>\n\n<p><strong>在接口中使用(axios)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">created () &#123;</span><br><span class=\"line\">    this.init()</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    async init () &#123;</span><br><span class=\"line\">      try &#123;</span><br><span class=\"line\">          let first &#x3D; await this.getOne();</span><br><span class=\"line\">          let second &#x3D; await this.getTwo();    </span><br><span class=\"line\">          let res &#x3D; first + second;</span><br><span class=\"line\">          console.log(res);</span><br><span class=\"line\">      &#125; catch (error) &#123;</span><br><span class=\"line\">          console.log(error);</span><br><span class=\"line\">      &#125;        </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getOne () &#123;</span><br><span class=\"line\">        const params &#x3D; &#123;name: &#39;one&#39;&#125;</span><br><span class=\"line\">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">            axios.get(&#39;&#x2F;one&#39;, &#123; params&#125;).then((res) &#x3D;&gt; &#123;</span><br><span class=\"line\">                if (res.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class=\"line\">                    resolve(res)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).catch((err) &#x3D;&gt; &#123;</span><br><span class=\"line\">                reject(err)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getTwo () &#123;</span><br><span class=\"line\">        const params &#x3D; &#123;name: &#39;two&#39;&#125;</span><br><span class=\"line\">        return new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">            axios.get(&#39;&#x2F;two&#39;, &#123; params&#125;).then((res) &#x3D;&gt; &#123;</span><br><span class=\"line\">                if (res.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class=\"line\">                    resolve(res)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).catch((err) &#x3D;&gt; &#123;</span><br><span class=\"line\">                reject(err)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>","categories":["ES6"],"tags":["ES6"]},{"title":"展开运算符","url":"/%E5%B1%95%E5%BC%80%E8%BF%90%E7%AE%97%E7%AC%A6/","content":"<p>语法：<code>...</code><br>类型：数组</p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"不定参数\"><a href=\"#不定参数\" class=\"headerlink\" title=\"不定参数\"></a>不定参数</h2><p>作用：指定多个各自独立的参数，通过整合后的数组来访问。<br>限制：1、最多只能声明一个。2、只能放在参数末尾。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function indefinite (params, ...args) &#123;</span><br><span class=\"line\">    console.log(args.length); &#x2F;&#x2F; 1</span><br><span class=\"line\">    console.log(arguments.length); &#x2F;&#x2F; 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">indefinite(&#39;lee&#39;, 18);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"展开运算符\"><a href=\"#展开运算符\" class=\"headerlink\" title=\"展开运算符\"></a>展开运算符</h2><h3 id=\"数组的最大值最小值\"><a href=\"#数组的最大值最小值\" class=\"headerlink\" title=\"数组的最大值最小值\"></a>数组的最大值最小值</h3><p>es5</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let arr &#x3D; [1, 2, 3];</span><br><span class=\"line\">console.log(Math.max.apply(Math, arr)); &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>\n<p>ES6</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let arr &#x3D; [1, 2, 3];</span><br><span class=\"line\">console.log(Math.max(...arr)); &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>\n\n<p><strong>限定最小值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let arr &#x3D; [-1, -2, -3];</span><br><span class=\"line\">console.log(Math.max(...arr, 0)); &#x2F;&#x2F; 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合并数组\"><a href=\"#合并数组\" class=\"headerlink\" title=\"合并数组\"></a>合并数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 方式一</span><br><span class=\"line\">let arr1 &#x3D; [&#39;a&#39;, &#39;b&#39;];</span><br><span class=\"line\">let arr2 &#x3D; [1, 2];</span><br><span class=\"line\">arr2.push(...arr1);</span><br><span class=\"line\">&#x2F;&#x2F; 方式二</span><br><span class=\"line\">let arr1 &#x3D; [&#39;a&#39;, &#39;b&#39;];</span><br><span class=\"line\">let arr2 &#x3D; [1, 2, ...arr1];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"浅拷贝数组\"><a href=\"#浅拷贝数组\" class=\"headerlink\" title=\"浅拷贝数组\"></a>浅拷贝数组</h3><p>ES5</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let arr1 &#x3D; [&#39;a&#39;, &#39;b&#39;];</span><br><span class=\"line\">let arr2 &#x3D; arr1.slice();</span><br></pre></td></tr></table></figure>\n<p>ES6</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let arr1 &#x3D; [&#39;a&#39;, &#39;b&#39;];</span><br><span class=\"line\">let arr2 &#x3D; [...arr1];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将伪书组转为真实数组-arguments、NodeList等\"><a href=\"#将伪书组转为真实数组-arguments、NodeList等\" class=\"headerlink\" title=\"将伪书组转为真实数组(arguments、NodeList等)\"></a>将伪书组转为真实数组(arguments、NodeList等)</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let str &#x3D; &quot;hello&quot;;</span><br><span class=\"line\">let arr &#x3D; Array.from(str);</span><br><span class=\"line\">console.log(arr); &#x2F;&#x2F; [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let str &#x3D; &quot;hello&quot;;</span><br><span class=\"line\">let arr &#x3D; [...str];</span><br><span class=\"line\">console.log(arr); &#x2F;&#x2F; [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let [a, ...b] &#x3D; [0, 1, 2];</span><br><span class=\"line\">console.log(a); &#x2F;&#x2F; 0</span><br><span class=\"line\">console.log(b); &#x2F;&#x2F; [1, 2]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"合并\"><a href=\"#合并\" class=\"headerlink\" title=\"合并\"></a>合并</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let obj1 &#x3D; &#123;x:1, y:2&#125;;</span><br><span class=\"line\">let obj2 &#x3D; &#123;...obj1, a:3, b:4&#125;;</span><br><span class=\"line\">console.log(obj2); &#x2F;&#x2F; &#123;x: 1, y: 2, a: 3, b: 4&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"浅拷贝对象\"><a href=\"#浅拷贝对象\" class=\"headerlink\" title=\"浅拷贝对象\"></a>浅拷贝对象</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let obj1 &#x3D; &#123;x:1, y:2&#125;;</span><br><span class=\"line\">let obj2 &#x3D; &#123;...obj1&#125;;</span><br><span class=\"line\">console.log(obj2); &#x2F;&#x2F; &#123;x: 1, y: 2&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解构赋值-1\"><a href=\"#解构赋值-1\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let &#123;x,y,...z&#125; &#x3D; &#123;x:1, y:2, a:3, b:4&#125;;</span><br><span class=\"line\">console.log(x); &#x2F;&#x2F; 1</span><br><span class=\"line\">console.log(y); &#x2F;&#x2F; 2</span><br><span class=\"line\">console.log(z); &#x2F;&#x2F; &#123;a:3, b:4&#125;</span><br></pre></td></tr></table></figure>","categories":["ES6"],"tags":["ES6"]},{"title":"ES6字符串模板","url":"/ES6%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF/","content":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>用 `` 代替了单引号和双引号</p>\n<a id=\"more\"></a>\n\n<h2 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var message &#x3D; &#96;hello</span><br><span class=\"line\">world&#96;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串占位符\"><a href=\"#字符串占位符\" class=\"headerlink\" title=\"字符串占位符\"></a>字符串占位符</h2><p>语法：<code>${}</code><br>占位符都是JavaScript表达式，包括变量、运算式、函数调用等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let message &#x3D; &quot;world&quot;;</span><br><span class=\"line\">let info &#x3D; &#96;hello $&#123;message&#125;&#96;;</span><br><span class=\"line\">console.log(info); &#x2F;&#x2F; hello world</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let info &#x3D; &#96;hello $&#123;7 * 3&#125;&#96;;</span><br><span class=\"line\">console.log(info); &#x2F;&#x2F; hello 21</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function say () &#123;</span><br><span class=\"line\">    return &#39;function&#39;;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\">let message &#x3D; &#96;hello $&#123; say() &#125;&#96;;</span><br><span class=\"line\">console.log(message); &#x2F;&#x2F; hello function</span><br></pre></td></tr></table></figure>","categories":["ES6"],"tags":["ES6"]},{"title":"vue常用的基础指令","url":"/vue%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/","content":"<p>Vue的基本指令</p>\n<a id=\"more\"></a>\n\n<h2 id=\"语法模板\"><a href=\"#语法模板\" class=\"headerlink\" title=\"语法模板\"></a>语法模板</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123;&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id&#x3D;&quot;example&quot;&gt;</span><br><span class=\"line\">  &#123;&#123; message.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<p>模板不再是简单的声明式逻辑,模板内的表达式非常便利，但对于复杂的逻辑，不建议在模板内使用,应当使用计算属性</p>\n<h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 完整语法 --&gt;</span><br><span class=\"line\">&lt;a v-bind:href&#x3D;&quot;url&quot;&gt;...&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 缩写 --&gt;</span><br><span class=\"line\">&lt;a :href&#x3D;&quot;url&quot;&gt;...&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span><br><span class=\"line\">&lt;a :[key]&#x3D;&quot;url&quot;&gt; ... &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">  &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;vue生命周期学习&lt;&#x2F;title&gt;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    .bgClass&#123;</span><br><span class=\"line\">      background: #ccc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;&#x2F;style&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue&#x2F;2.4.2&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;span v-bind:title&#x3D;&quot;message&quot; :style&#x3D;&quot;&#123;color: &#39;red&#39;&#125;&quot; :class&#x3D;&quot;bindClass&quot;&gt;</span><br><span class=\"line\">    鼠标悬停查看动态绑定的提示信息！</span><br><span class=\"line\">  &lt;&#x2F;span&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> var app &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: &#39;页面加载于 &#39; + new Date().toLocaleString(),</span><br><span class=\"line\">    bindClass: &#39;bgClass&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h2><p>用 <code>v-on</code> 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法 <code>v-on:click可缩写为@click</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 完整语法 --&gt;</span><br><span class=\"line\">&lt;a v-on:click&#x3D;&quot;doSomething&quot;&gt;...&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 缩写 --&gt;</span><br><span class=\"line\">&lt;a @click&#x3D;&quot;doSomething&quot;&gt;...&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span><br><span class=\"line\">&lt;a @[event]&#x3D;&quot;doSomething&quot;&gt; ... &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app-5&quot;&gt;</span><br><span class=\"line\">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;button v-on:click&#x3D;&quot;reverseMessage&quot;&gt;反转消息&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">var app5 &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app-5&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    message: &#39;Hello Vue.js!&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    reverseMessage: function () &#123;</span><br><span class=\"line\">      this.message &#x3D; this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"v-if、v-else、v-else-if、v-show\"><a href=\"#v-if、v-else、v-else-if、v-show\" class=\"headerlink\" title=\"v-if、v-else、v-else-if、v-show\"></a>v-if、v-else、v-else-if、v-show</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">  &lt;p v-if&#x3D;&quot;seen&quot;&gt;控制这里的数据是否显示&lt;&#x2F;p&gt;</span><br><span class=\"line\">  &lt;p v-else&gt; v-else &lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">var app3 &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    seen: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>1.共同点</strong><br>都是动态显示DOM元素</p>\n<p><strong>2.区别</strong><br>（1）手段：</p>\n<ul>\n<li>v-if是动态的向DOM树内添加或者删除DOM元素；</li>\n<li>v-show是通过设置DOM元素的display样式属性控制显隐；</li>\n</ul>\n<p>（2）编译过程：</p>\n<ul>\n<li>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；</li>\n<li>v-show只是简单的基于css切换；</li>\n</ul>\n<p>（3）编译条件：</p>\n<ul>\n<li>v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译（编译被缓存？编译被缓存后，然后再切换的时候进行局部卸载);</li>\n<li>v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素保留；</li>\n</ul>\n<p>（4）性能消耗：</p>\n<ul>\n<li>v-if有更高的切换消耗；</li>\n<li>v-show有更高的初始渲染消耗；</li>\n</ul>\n<p>（5）使用场景：</p>\n<ul>\n<li>v-if适合运营条件不大可能改变；</li>\n<li>v-show适合频繁切换。</li>\n</ul>\n<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h2><p><code>不推荐同时使用 v-if 和 v-for。 当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;li v-for&#x3D;&quot;item in list&quot; :key&#x3D;&quot;item.id&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;item.text&#125;&#125;</span><br><span class=\"line\">&lt;&#x2F;li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">    list:[</span><br><span class=\"line\">      &#123; id: 0, text: &#39;蔬菜&#39; &#125;,</span><br><span class=\"line\">      &#123; id: 1, text: &#39;奶酪&#39; &#125;,</span><br><span class=\"line\">      &#123; id: 2, text: &#39;随便其它什么人吃的东西&#39; &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;button @click &#x3D;&quot;reverse&quot;&gt;反转数据&lt;&#x2F;button&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class=\"line\">    &lt;input v-model:value&#x3D;&quot;message&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">    var vue &#x3D; new Vue(&#123;</span><br><span class=\"line\">        el:&#39;#app&#39;,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">            message:&#39;Hello Vue&#39;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods:&#123;</span><br><span class=\"line\">            reverse:function() &#123;</span><br><span class=\"line\">                this.message &#x3D; this.message.split(&#39;&#39;).reverse().join(&#39;&#39;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"绑定-HTML-Class\"><a href=\"#绑定-HTML-Class\" class=\"headerlink\" title=\"绑定 HTML Class\"></a>绑定 HTML Class</h2><p><strong>对象语法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div</span><br><span class=\"line\">  class&#x3D;&quot;static&quot;</span><br><span class=\"line\">  v-bind:class&#x3D;&quot;&#123; active: isActive, &#39;text-danger&#39;: hasError &#125;&quot;</span><br><span class=\"line\">&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  hasError: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:class&#x3D;&quot;classObject&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObject: &#123;</span><br><span class=\"line\">    active: true,</span><br><span class=\"line\">    &#39;text-danger&#39;: false</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果渲染为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;static active&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<p>或者返回对象的计算属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:class&#x3D;&quot;classObject&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  isActive: true,</span><br><span class=\"line\">  error: null</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  classObject: function () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      active: this.isActive &amp;&amp; !this.error,</span><br><span class=\"line\">      &#39;text-danger&#39;: this.error &amp;&amp; this.error.type &#x3D;&#x3D;&#x3D; &#39;fatal&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>数组语法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:class&#x3D;&quot;[activeClass, errorClass]&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  activeClass: &#39;active&#39;,</span><br><span class=\"line\">  errorClass: &#39;text-danger&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>三元表达式</strong><br>根据条件切换列表中的 class</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:class&#x3D;&quot;[isActive ? activeClass : &#39;&#39;, errorClass]&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<p>当有多个条件 class 时这样写有些繁琐。所以在数组语法中也可以使用对象语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:class&#x3D;&quot;[&#123; active: isActive &#125;, errorClass]&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"绑定内联样式\"><a href=\"#绑定内联样式\" class=\"headerlink\" title=\"绑定内联样式\"></a>绑定内联样式</h2><p><strong>对象语法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:style&#x3D;&quot;&#123; color: activeColor, fontSize: fontSize + &#39;px&#39; &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  activeColor: &#39;red&#39;,</span><br><span class=\"line\">  fontSize: 30</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:style&#x3D;&quot;styleObject&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  styleObject: &#123;</span><br><span class=\"line\">    color: &#39;red&#39;,</span><br><span class=\"line\">    fontSize: &#39;13px&#39;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>数组语法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div v-bind:style&#x3D;&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算属性computed\"><a href=\"#计算属性computed\" class=\"headerlink\" title=\"计算属性computed\"></a>计算属性computed</h2><ul>\n<li>computed属性对象中定义计算属性的方法，在页面中使用来显示计算的结果。用于简单运算,在模板中放入太多的逻辑会让模板过重且难以维护.</li>\n<li>computed用来监控自己定义的变量，该变量不在data里面声明，直接在computed里面定义，然后就可以在页面上进行双向数据绑定展示出结果或者用作其他处理；</li>\n<li>computed比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;demo&quot;&gt;&#123;&#123; fullName &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#demo&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: &#39;Foo&#39;,</span><br><span class=\"line\">    lastName: &#39;Bar&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    fullName: function () &#123;</span><br><span class=\"line\">      return this.firstName + &#39; &#39; + this.lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"监听属性watch\"><a href=\"#监听属性watch\" class=\"headerlink\" title=\"监听属性watch\"></a>监听属性watch</h2><ul>\n<li>watch主要用于监控vue实例的变化，它监控的变量当然必须在data里面声明才可以，它可以监控一个变量，也可以是一个对象</li>\n<li>watch一般用于监控路由、input输入框的值特殊处理等等，它比较适合的场景是一个数据影响多个数据<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;demo&quot;&gt;&#123;&#123; fullName &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#demo&#39;,</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    firstName: &#39;Foo&#39;,</span><br><span class=\"line\">    lastName: &#39;Bar&#39;,</span><br><span class=\"line\">    fullName: &#39;Foo Bar&#39;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    firstName (newVal, oldVal) &#123;</span><br><span class=\"line\">      this.fullName &#x3D; newVal + &#39; &#39; + this.lastName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lastName (newVal, oldVal) &#123;</span><br><span class=\"line\">      this.fullName &#x3D; this.firstName + &#39; &#39; + newVal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>watch 还有一个deep属性</strong><br>默认值是 false，代表是否深度监听</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data () &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    obj: &#123;</span><br><span class=\"line\">      a: &#39;111&#39;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    array:[&#39;mu&#39;,&#39;zi&#39;,&#39;dig&#39;,&#39;big&#39;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  obj: &#123;</span><br><span class=\"line\">    handler (newVal,oldVal) &#123;</span><br><span class=\"line\">      console.log(&#39;obj.a changed&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    immediate: true,</span><br><span class=\"line\">    deep: true</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  array:&#123;</span><br><span class=\"line\">    handler(newVal,oldVal)&#123;</span><br><span class=\"line\">      console.log(newVal+&#39;--&#39;+oldVal)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    deep:true,</span><br><span class=\"line\">    immediate:true,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  &#39;obj.a&#39;: &#123;</span><br><span class=\"line\">    handler (newVal,oldVal) &#123;</span><br><span class=\"line\">      console.log(&#39;obj.a changed&#39;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    immediate: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>immediate</strong><br>watch在初始化绑定的时候不会执行，等到改变之后才会去侦听计算。使用这个属性后，在初始化绑定的时候，也会去执行侦听器。</p>\n<p><strong>Demo</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">    a: 1,</span><br><span class=\"line\">    b: 2,</span><br><span class=\"line\">    c: 3,</span><br><span class=\"line\">    d: 4,</span><br><span class=\"line\">    e: &#123;</span><br><span class=\"line\">      f: &#123;</span><br><span class=\"line\">        g: 5</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  watch: &#123;</span><br><span class=\"line\">    a: function (val, oldVal) &#123;</span><br><span class=\"line\">      console.log(&#39;new: %s, old: %s&#39;, val, oldVal)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;&#x2F; 方法名</span><br><span class=\"line\">    b: &#39;someMethod&#39;,</span><br><span class=\"line\">    &#x2F;&#x2F; 深度 watcher</span><br><span class=\"line\">    c: &#123;</span><br><span class=\"line\">      handler: function (val, oldVal) &#123; &#x2F;* ... *&#x2F; &#125;,</span><br><span class=\"line\">      deep: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;&#x2F; 该回调将会在侦听开始之后被立即调用</span><br><span class=\"line\">    d: &#123;</span><br><span class=\"line\">      handler: function (val, oldVal) &#123; &#x2F;* ... *&#x2F; &#125;,</span><br><span class=\"line\">      immediate: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    e: [</span><br><span class=\"line\">      function handle1 (val, oldVal) &#123; &#x2F;* ... *&#x2F; &#125;,</span><br><span class=\"line\">      function handle2 (val, oldVal) &#123; &#x2F;* ... *&#x2F; &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &#x2F;&#x2F; watch vm.e.f&#39;s value: &#123;g: 5&#125;</span><br><span class=\"line\">    &#39;e.f&#39;: function (val, oldVal) &#123; &#x2F;* ... *&#x2F; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">vm.a &#x3D; 2 &#x2F;&#x2F; &#x3D;&gt; new: 2, old: 1</span><br></pre></td></tr></table></figure>\n\n<p><strong>监听路由</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">watch:&#123;</span><br><span class=\"line\">  $route(to,from)&#123;</span><br><span class=\"line\">    console.log(to.path);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"computed-vs-methods-vs-watch\"><a href=\"#computed-vs-methods-vs-watch\" class=\"headerlink\" title=\"computed vs methods vs watch\"></a>computed vs methods vs watch</h2><ul>\n<li>computed是计算一个新的属性，并将该属性挂载到vm（Vue实例）上，而watch是监听已经存在且已挂载到vm上的数据，所以用watch同样可以监听computed计算属性的变化（其它还有data、props）</li>\n<li>computed本质是一个惰性求值的观察者，具有缓存性，只有当依赖变化后，第一次访问 computed 属性，才会计算新的值，而watch则是当数据发生变化便会调用执行函数</li>\n<li>computed 结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用。计算属性可用于性能开销比较大的时候，有效的缓存可以很大程度上减少开销。</li>\n<li>methods 表示一个具体的操作，主要用于写业务逻辑</li>\n<li>watch 主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是computed和methods的结合体</li>\n<li>从使用场景上说，computed适用一个数据被多个数据影响，而watch适用一个数据影响多个数据</li>\n<li>在涉及到异步数据操作的时候，就只能用watch去实现了。</li>\n</ul>\n","categories":["vue"],"tags":["vue"]},{"title":"Object的方法","url":"/Object%E7%9A%84%E6%96%B9%E6%B3%95/","content":"<h2 id=\"定义属性\"><a href=\"#定义属性\" class=\"headerlink\" title=\"定义属性\"></a>定义属性</h2><p>定义一个对象，必须明确属性名和对应的值，即使属性名和声明的变量名一样（var a = {obj：obj}），ES6及后续版本允许我们用短的代码声明对象，用于将对象的属性分配给与属性同名的变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var x &#x3D; 1, y &#x3D; 2;</span><br><span class=\"line\">var object &#x3D; &#123;</span><br><span class=\"line\"> x: x,</span><br><span class=\"line\"> y: y </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log(object.x); &#x2F;&#x2F;output 1</span><br></pre></td></tr></table></figure>\n<p>但是ES6之后，你可以这么做</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let x &#x3D; 1, y &#x3D; 2;</span><br><span class=\"line\">let object &#x3D; &#123; x, y &#125;;</span><br><span class=\"line\">console.log(object);    &#x2F;&#x2F; &#123;x: 1, y: 2&#125;</span><br><span class=\"line\">console.log(object.x);  &#x2F;&#x2F; &#x2F;&#x2F;output 1</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n\n<h2 id=\"计算属性名\"><a href=\"#计算属性名\" class=\"headerlink\" title=\"计算属性名\"></a>计算属性名</h2><p>对象属性支持计算属性名。其允许在[]中放入表达式，计算结果可以当做属性名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let object &#x3D; &#123;</span><br><span class=\"line\">  [&quot;first&quot; + &quot;Name&quot;]: &quot;Eden&quot;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#x2F;&#x2F;extract</span><br><span class=\"line\">console.log(object[&quot;first&quot; + &quot;Name&quot;]); </span><br><span class=\"line\">&#x2F;&#x2F;Output &quot;Eden”</span><br><span class=\"line\">console.log(object);</span><br><span class=\"line\">&#x2F;&#x2F;Output &quot;&#123; firstName: &#39;Eden&#39; &#125;”</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is()\"></a>Object.is()</h2><p><code>Object.is()</code>它用来比较两个值是否严格相等，与严格比较运算符（ === ）的行为基本一致，是在三等号判断的基础上新增了两个不同之处。<br><code>Object.is()不同之处只有两个：一是+0不等于-0，二是NaN等于自身。</code><br>语法：<br><code>Object.is(value1, value2);</code><br>传入两个要比较的值，判断是否相同，全等的话返回true，不全等返回false。<br><img src=\"/images/objectIs.png\" alt=\"alt\"><br>三等号既要判断值的类型是否相等，还要判断引用地址是否相等。所以<code>Object.is()</code>也是，在判断对象和数组这些引用类型的数据是不相等的。</p>\n<h2 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h2><p>Object.assign()方法用于对象的合并，将源对象（ source ）的所有可枚举属性，复制到目标对象（ target ）。<br><img src=\"/images/objectAssign.png\" alt=\"alt\"><br><strong>注意：</strong><br>这里是<code>浅拷贝</code>！！<br>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会<code>覆盖</code>前面的属性！！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let obj1 &#x3D; &#123;a:&#123;b:1&#125;,b:22&#125;;</span><br><span class=\"line\">let obj2 &#x3D; Object.assign(&#123;b:11&#125;,obj1);</span><br><span class=\"line\">console.log(obj2); &#x2F;&#x2F; &#123;b:22,a:&#123;b:1&#125;&#125;</span><br><span class=\"line\">&#x2F;&#x2F;修改obj1的属性值</span><br><span class=\"line\">obj1.a.b &#x3D; 2;</span><br><span class=\"line\">&#x2F;&#x2F;这时会影响到obj2的属性值，这就是浅拷贝导致的</span><br><span class=\"line\">console.log(obj2.a.b); &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-keys-、Object-values-、Object-entries\"><a href=\"#Object-keys-、Object-values-、Object-entries\" class=\"headerlink\" title=\"Object.keys()、Object.values()、Object.entries()\"></a>Object.keys()、Object.values()、Object.entries()</h2><p><code>Object.keys()</code>方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属性的<code>键名</code>数组。</p>\n<p><code>Object.values()</code>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属性的<code>键值</code>数组。</p>\n<p><code>Object.entries()</code>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（ enumerable ）属性的<code>键值对</code>数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let obj &#x3D; &#123;name:&quot;winne&quot;,age:22&#125;;</span><br><span class=\"line\">let objKeys &#x3D; Object.keys(obj);</span><br><span class=\"line\">let objValues &#x3D; Object.values(obj);</span><br><span class=\"line\">let objItem &#x3D; Object.entries(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(objKeys);   &#x2F;&#x2F;[&quot;name&quot;,&quot;age&quot;]</span><br><span class=\"line\">console.log(objValues); &#x2F;&#x2F;[&quot;winne&quot;,22]</span><br><span class=\"line\">console.log(objItem);   &#x2F;&#x2F;[[&quot;name&quot;,&quot;winne&quot;],[&quot;age&quot;,22]]</span><br></pre></td></tr></table></figure>\n<p>取出了想要的部分，我们就可以遍历数组取得每一项了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;for..of遍历</span><br><span class=\"line\"></span><br><span class=\"line\">for( let key of objKeys)&#123;</span><br><span class=\"line\">    console.log(key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;name</span><br><span class=\"line\">&#x2F;&#x2F;age</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;forEach遍历</span><br><span class=\"line\">objKeys.forEach(function(item,index)&#123;</span><br><span class=\"line\">    console.log(item,index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#x2F;&#x2F;name  0</span><br><span class=\"line\">&#x2F;&#x2F;age   1</span><br></pre></td></tr></table></figure>","categories":["ES6"],"tags":["ES6"]},{"title":"Array方法","url":"/Array%E6%96%B9%E6%B3%95/","content":"<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">通过下标取值,forEach是数组的方法不能break，continue，</span><br><span class=\"line\"></span><br><span class=\"line\">let arr &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;];</span><br><span class=\"line\">let forEachRetrun &#x3D; arr.forEach(function (item,index)&#123;</span><br><span class=\"line\">\tconsole.log(item,index);\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n\n<h2 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">map映射,对数组的每一项都运行给定的函数，返回每次函数调用的结果组成一个新数组</span><br><span class=\"line\">map的返回值是一个数组，数组的个数和操作的数组一样</span><br><span class=\"line\">map返回的数组的每一项是回调函数的返回值</span><br><span class=\"line\"></span><br><span class=\"line\">var numbers &#x3D; [1, 5, 10, 15];</span><br><span class=\"line\">var doubles &#x3D; numbers.map(function(item, index) &#123;</span><br><span class=\"line\">  console.log(item, index)</span><br><span class=\"line\">  return item * 2;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(doubles)</span><br><span class=\"line\">&#x2F;&#x2F; doubles is now [2, 10, 20, 30]</span><br><span class=\"line\">&#x2F;&#x2F; numbers is still [1, 5, 10, 15]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><p>将数组中的数据拼接成为字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let arr &#x3D; [</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tname:&#39;leo1&#39;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tname:&#39;leo2&#39;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\">let str &#x3D; &#39;&#39;;</span><br><span class=\"line\">for( var i &#x3D; 0; i &lt; arr.length; i++ )&#123;</span><br><span class=\"line\">\tstr +&#x3D; &#96;&lt;li&gt;$&#123;arr[i].name&#125;&lt;&#x2F;li&gt;&#96;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(str);</span><br><span class=\"line\">&#x2F;&#x2F; &lt;li&gt;leo1&lt;&#x2F;li&gt;&lt;li&gt;leo2&lt;&#x2F;li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">let arrStr &#x3D; arr.map(function (item)&#123;</span><br><span class=\"line\">\treturn &#96;&lt;li&gt;$&#123;item.name&#125;&lt;&#x2F;li&gt;&#96;\t</span><br><span class=\"line\">&#125;).join(&#39;&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(arrStr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h2><p>对数组的每一项都运行给定的函数，返回 结果为 ture 的项组成的数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var numsArr &#x3D; [1,2,3,4,5,6,7,8];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 小于5的数，放在数组中</span><br><span class=\"line\">var empty &#x3D; []</span><br><span class=\"line\">for( var i &#x3D; 0; i &lt; numsArr.length; i++ )&#123;</span><br><span class=\"line\">\tif(numsArr[i] &lt; 5)&#123;</span><br><span class=\"line\">\t\tempty.push(numsArr[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(empty);</span><br><span class=\"line\"></span><br><span class=\"line\">let filetrReturn &#x3D; numsArr.filter(function (item,index)&#123;</span><br><span class=\"line\">\tconsole.log(item,index);</span><br><span class=\"line\">\treturn item &lt; 5;\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(filetrReturn);</span><br><span class=\"line\"></span><br><span class=\"line\">let arr &#x3D; [</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tname:&#39;leo1&#39;,</span><br><span class=\"line\">\t\tage:30</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tname:&#39;leo2&#39;,</span><br><span class=\"line\">\t\tage:40</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tname:&#39;leo1&#39;,</span><br><span class=\"line\">\t\tage:20</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tname:&#39;leo2&#39;,</span><br><span class=\"line\">\t\tage:60</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">let newArr &#x3D; arr.filter(function (item)&#123;</span><br><span class=\"line\">\treturn item.age &gt; 20\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(newArr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every\"></a>every</h2><p>对数组的每一项都运行给定的函数，每一项都返回 ture,则返回 true，如果有一个不符合，就返回false.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let arr &#x3D; [1,2,3,4,5,6];</span><br><span class=\"line\"></span><br><span class=\"line\">let bl &#x3D; arr.every(function (item)&#123;</span><br><span class=\"line\">\treturn item &gt; -1\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(bl);</span><br><span class=\"line\">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some\"></a>some</h2><p>对数组的每一项都运行给定的函数，任意一项都返回 ture,则返回 true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let arr &#x3D; [1,2,3,4,5,6];</span><br><span class=\"line\">let bl2 &#x3D; arr.some(function (item)&#123;</span><br><span class=\"line\">\treturn item &gt; 5\t</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(bl2);</span><br><span class=\"line\">&#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h2><p>Array.reduce(callback[,初始值])    callback会接受两个参数item1 item2、没给reduce写初始值，callback会默认第一次接受数组中的前两个值。</p>\n<p><strong>执行callback</strong></p>\n<ul>\n<li>第一次：接收数组中前两个值 </li>\n<li>第二次开始，第一个参数是上一次执行的回调函数的返回值，第二个参数从数组中取<br>。。。。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">数组中的数字累加</span><br><span class=\"line\">var arr &#x3D; [1,2,3,4,5,6,7];</span><br><span class=\"line\">var n &#x3D; 0;</span><br><span class=\"line\">for( var i &#x3D; 0; i &lt; arr.length; i++ )&#123;</span><br><span class=\"line\">\tn +&#x3D; arr[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(n); &#x2F;&#x2F; 28</span><br><span class=\"line\"></span><br><span class=\"line\">var n &#x3D; arr.reduce(function (item1,item2)&#123;</span><br><span class=\"line\">\tconsole.log(item1,item2);\t</span><br><span class=\"line\">\treturn item1 + item2</span><br><span class=\"line\">&#125;,100)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(n);  &#x2F;&#x2F; 128</span><br><span class=\"line\"></span><br><span class=\"line\">var arr &#x3D; [&#123;</span><br><span class=\"line\">\tage: 30,</span><br><span class=\"line\">\theight: 180</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">\tage: 30,</span><br><span class=\"line\">\theight: 180</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">\tage: 30,</span><br><span class=\"line\">\theight: 180</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">\tage: 30,</span><br><span class=\"line\">\theight: 180</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">var m &#x3D; arr.reduce(function (item1,item2)&#123;</span><br><span class=\"line\">\tconsole.log(item1,item2);</span><br><span class=\"line\">\treturn &#123;</span><br><span class=\"line\">\t\tage: item1.age + item2.age,</span><br><span class=\"line\">\t\theight: item1.height + item2.height</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">\tage: 0,</span><br><span class=\"line\">\theight: 1000</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(m); &#x2F;&#x2F; &#123;age: 120, height: 1720&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>reduce方法简单实现数组中对象去重</strong><br>js数组的reduce方法，接收一个函数（必须）和指定的初始值（非必须）作为参数，函数有三个参数，分别为初始值，当前项，当前数组，进行累加或者累积操作，初始值为每次累加或者累计后的结果<br><strong>注意：在ie9一下的浏览器中，并不支持该方法 ！</strong><br>语法：<code>arr.reduce(fn(pre,cur,arr){},[initialValue])</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [</span><br><span class=\"line\">　　&#123;value:&#39;苹果&#39;,id:1&#125;,</span><br><span class=\"line\">　　&#123;value:&#39;香蕉&#39;,id:2&#125;,</span><br><span class=\"line\">　　&#123;value:&#39;苹果&#39;,id:3&#125;</span><br><span class=\"line\"> ]</span><br><span class=\"line\">var hash &#x3D; &#123;&#125;;</span><br><span class=\"line\">arr &#x3D; arr.reduce((item, next) &#x3D;&gt;&#123;</span><br><span class=\"line\">   hash[next.value] ? &#39;&#39; : hash[next.value] &#x3D; true &amp;&amp; item.push(next); </span><br><span class=\"line\">   return item</span><br><span class=\"line\">&#125;, [])</span><br><span class=\"line\">console.log(arr)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;  &#123;value: &quot;苹果&quot;, id: 1&#125; &#123;value: &quot;香蕉&quot;, id: 2&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h2><p>传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它，并且终止搜索。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [1,2,3,4,5,6,7];</span><br><span class=\"line\">var item &#x3D; arr.find(item &#x3D;&gt; &#123;</span><br><span class=\"line\">\treturn item  &gt; 4</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(item);  &#x2F;&#x2F; 5</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex\"></a>findIndex</h2><p>传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它的下标，终止搜索。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var arr &#x3D; [1,2,3,4,5,6,7];</span><br><span class=\"line\">var index &#x3D; arr.findIndex(item &#x3D;&gt; &#123;</span><br><span class=\"line\">\treturn item  &gt; 4</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(index);  &#x2F;&#x2F; 4</span><br></pre></td></tr></table></figure>\n<h2 id=\"from\"><a href=\"#from\" class=\"headerlink\" title=\"from\"></a>from</h2><p>将类似数组的对象（array-like object）和可遍历（iterable）的对象转为真正的数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const bar &#x3D; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];</span><br><span class=\"line\">Array.from(bar);</span><br><span class=\"line\">&#x2F;&#x2F; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">Array.from(&#39;foo&#39;);</span><br><span class=\"line\">&#x2F;&#x2F; [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"of\"><a href=\"#of\" class=\"headerlink\" title=\"of\"></a>of</h2><p>用于将一组值，转换为数组。这个方法的主要目的，是弥补数组构造函数 Array() 的不足。因为参数个数的不同，会导致 Array() 的行为有差异。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array()             &#x2F;&#x2F; []</span><br><span class=\"line\">Array(3)           &#x2F;&#x2F; [, , ,]</span><br><span class=\"line\">Array(3, 11, 8)    &#x2F;&#x2F; [3, 11, 8]</span><br><span class=\"line\">Array.of(7);       &#x2F;&#x2F; [7]</span><br><span class=\"line\">Array.of(1, 2, 3); &#x2F;&#x2F; [1, 2, 3]</span><br><span class=\"line\"></span><br><span class=\"line\">Array(7);          &#x2F;&#x2F; [ , , , , , , ]</span><br><span class=\"line\">Array(1, 2, 3);    &#x2F;&#x2F; [1, 2, 3]</span><br></pre></td></tr></table></figure>\n<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes\"></a>includes</h2><p>判断数组中是否存在该元素，参数：查找的值、起始位置，可以替换 ES5 时代的 indexOf 判断方式。indexOf 判断元素是否为 NaN，会判断错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var a &#x3D; [1, 2, 3];</span><br><span class=\"line\">a.includes(2); &#x2F;&#x2F; true</span><br><span class=\"line\">a.includes(4); &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>\n<h2 id=\"keys-返回迭代器：返回键值对的key\"><a href=\"#keys-返回迭代器：返回键值对的key\" class=\"headerlink\" title=\"keys() 返回迭代器：返回键值对的key\"></a>keys() 返回迭代器：返回键值对的key</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 定义一个 Array 对象</span><br><span class=\"line\">let arr &#x3D; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义一个 Object 对象</span><br><span class=\"line\">let obj &#x3D; &#123; foo: &quot;bar&quot;, baz: 42 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义一个  类数组 对象 </span><br><span class=\"line\">let ArrayLike &#x3D; &#123; 0 : &quot;a&quot;, 1 : &quot;b&quot;, 2 : &quot;c&quot;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 类数组 对象, 随机 key 排序 </span><br><span class=\"line\">let anObj &#x3D; &#123; 100: &#39;a&#39;, 2: &#39;b&#39;, 7: &#39;c&#39; &#125;; </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* getFoo 是个不可枚举的属性 *&#x2F; </span><br><span class=\"line\">var my_obj &#x3D; Object.create(&#123;&#125;, &#123;</span><br><span class=\"line\">     getFoo : &#123; value : function () &#123; return this.foo &#125; &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">my_obj.foo &#x3D; 1;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 打印结果</span><br><span class=\"line\">console.log(Object.keys(arr));       &#x2F;&#x2F; [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;]</span><br><span class=\"line\">console.log(Object.keys(obj));       &#x2F;&#x2F; [&quot;foo&quot;,&quot;baz&quot;]</span><br><span class=\"line\">console.log(Object.keys(ArrayLike));     &#x2F;&#x2F; [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;]</span><br><span class=\"line\">console.log(Object.keys(anObj));   &#x2F;&#x2F; [&#39;2&#39;, &#39;7&#39;, &#39;100&#39;]</span><br><span class=\"line\">console.log(Object.keys(my_obj)); &#x2F;&#x2F; [&#39;foo&#39;]</span><br></pre></td></tr></table></figure>\n<h2 id=\"求数组中的最大值-amp-求数字中的最小值\"><a href=\"#求数组中的最大值-amp-求数字中的最小值\" class=\"headerlink\" title=\"求数组中的最大值&amp;求数字中的最小值\"></a>求数组中的最大值&amp;求数字中的最小值</h2><p>虽然Math.min()能取到最小值,Math.max()能取到最大值,但是不支持数组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Math.min.apply(obj,args);</span><br></pre></td></tr></table></figure>\n<p>这个obj对象将代替Function类里this对象，第二个传进来的是数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Math.max.apply(obj,parms);</span><br></pre></td></tr></table></figure>\n<p>这个obj对象将代替Function类里this对象，第二个传进来的是参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var obj &#x3D; Math.max.apply(obj,arr)</span><br><span class=\"line\">console.log(obj); &#x2F;&#x2F; 100</span><br><span class=\"line\"></span><br><span class=\"line\">var arr &#x3D; [1,2,3,4,9,100,0];</span><br><span class=\"line\">console.log(Math.max(...arr));</span><br><span class=\"line\">console.log(Math.min(...arr));</span><br></pre></td></tr></table></figure>\n<h2 id=\"Array常用方法\"><a href=\"#Array常用方法\" class=\"headerlink\" title=\"Array常用方法\"></a>Array常用方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Array 对象属性</span><br><span class=\"line\"></span><br><span class=\"line\">constructor 返回对创建此对象的数组函数的引用。</span><br><span class=\"line\">length 设置或返回数组中元素的数目。</span><br><span class=\"line\">prototype 使您有能力向对象添加属性和方法。</span><br><span class=\"line\"></span><br><span class=\"line\">Array 对象方法</span><br><span class=\"line\"></span><br><span class=\"line\">concat() 连接两个或更多的数组，并返回结果。</span><br><span class=\"line\">join() 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</span><br><span class=\"line\">pop() 删除并返回数组的最后一个元素。  </span><br><span class=\"line\">shift() 删除并返回数组的第一个元素</span><br><span class=\"line\">push() 向数组的末尾添加一个或更多元素，并返回新的长度。</span><br><span class=\"line\">unshift() 向数组的开头添加一个或更多元素，并返回新的长度。</span><br><span class=\"line\">reverse() 颠倒数组中元素的顺序。</span><br><span class=\"line\">slice() 从某个已有的数组返回选定的元素</span><br><span class=\"line\">sort() 对数组的元素进行排序</span><br><span class=\"line\">splice() 删除元素，并向数组添加新元素。</span><br><span class=\"line\">toSource() 返回该对象的源代码。</span><br><span class=\"line\">toString() 把数组转换为字符串，并返回结果。</span><br><span class=\"line\">toLocaleString() 把数组转换为本地数组，并返回结果。</span><br><span class=\"line\">valueOf() 返回数组对象的原始值</span><br></pre></td></tr></table></figure>","categories":["ES6"],"tags":["ES6"]},{"title":"vue生命周期","url":"/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","content":"<p>每个Vue实例在被创建之前都要经过一系列的初始化过程 <strong>（创建、挂载、更新、销毁）</strong> ,这个过程就是vue的生命周期。</p>\n<a id=\"more\"></a>\n\n\n<p>##Vue生命周期图##<br><img src=\"/images/lifecycle.png\" alt=\"alt\"><br>vue一整个的生命周期中会有很多钩子函数提供给我们在vue生命周期不同的时刻进行操作</p>\n<ul>\n<li>beforeCreate</li>\n<li>created</li>\n<li>beforeMount</li>\n<li>mounted</li>\n<li>beforeUpdate</li>\n<li>updated</li>\n<li>beforeDestroy</li>\n<li>destroyed</li>\n</ul>\n<h2 id=\"Vue生命周期详解\"><a href=\"#Vue生命周期详解\" class=\"headerlink\" title=\"Vue生命周期详解\"></a>Vue生命周期详解</h2><p><strong>1、beforeCreate（实例创建前）</strong><br>  在new一个vue实例后，只有一些默认的生命周期钩子和默认事件，其他的东西都还没创建。在beforeCreate生命周期执行的时候，<code>data和methods</code>中的数据都还没有初始化。不能在这个阶段使用data中的数据和methods中的方法</p>\n<ul>\n<li><code>可以在这加个loading事件</code></li>\n</ul>\n<p><strong>2、create（实例创建完成）</strong><br>  <code>data 和 methods</code> 都已经被初始化好了，如果要调用 methods 中的方法，或者操作 data 中的数据，最早可以在这个阶段中操作</p>\n<ul>\n<li><code>在这结束loading，还做一些初始化，实现函数自执行</code></li>\n</ul>\n<p><strong>3、beforeMount（挂载前）</strong><br>  执行到这个钩子的时候，在内存中已经编译好了模板了，但是还没有挂载到页面中，此时，页面还是旧的<br><strong>4、mounted（挂在完成）</strong><br>  执行到这个钩子的时候，就表示Vue实例已经初始化完成了。此时组件脱离了创建阶段，进入到了运行阶段。 如果我们想要通过插件操作页面上的DOM节点，最早可以在和这个阶段中进行</p>\n<ul>\n<li><code>在这发起后端请求，拿回数据，配合路由钩子做一些事情</code></li>\n</ul>\n<p><strong>5、beforeUpdate（更新前）</strong><br>  当执行这个钩子时，页面中的显示的数据还是旧的，data中的数据是更新后的， 页面还没有和最新的数据保持同步<br><strong>6、updated（更新完成）</strong><br>  页面显示的数据和data中的数据已经保持同步了，都是最新的<br><strong>7、beforeDestory（销毁前）</strong><br>  Vue实例从运行阶段进入到了销毁阶段，这个时候上所有的 data 和 methods ， 指令， 过滤器 ……都是处于可用状态。还没有真正被销毁</p>\n<ul>\n<li><code>添加事件你确认删除XX吗？</code></li>\n</ul>\n<p><strong>8、destroyed（销毁完成）</strong><br>这个时候上所有的 data 和 methods ， 指令， 过滤器 ……都是处于不可用状态。组件已经被销毁了。</p>\n<ul>\n<li><code>添加事件当前组件已被删除，清空相关内容</code></li>\n</ul>\n<h2 id=\"代码详解\"><a href=\"#代码详解\" class=\"headerlink\" title=\"代码详解\"></a>代码详解</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">  &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;vue生命周期学习&lt;&#x2F;title&gt;</span><br><span class=\"line\">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;vue&#x2F;2.4.2&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;h1&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class=\"line\">    &lt;button @click&#x3D;&#39;handleChange&#39;&gt;点击修改数据&lt;&#x2F;button&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var vm &#x3D; new Vue(&#123;</span><br><span class=\"line\">    el: &#39;#app&#39;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      message: &#39;Vue的生命周期&#39;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeCreate: function() &#123;</span><br><span class=\"line\">      console.group(&#39;------beforeCreate创建前状态------&#39;);</span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot; , &quot;el     : &quot; + this.$el); &#x2F;&#x2F;undefined</span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); &#x2F;&#x2F;undefined </span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message) </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created: function() &#123;</span><br><span class=\"line\">      console.group(&#39;------created创建完毕状态------&#39;);</span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el); &#x2F;&#x2F;undefined</span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); &#x2F;&#x2F;已被初始化 </span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); &#x2F;&#x2F;已被初始化</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeMount: function() &#123;</span><br><span class=\"line\">      console.group(&#39;------beforeMount挂载前状态------&#39;);</span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + (this.$el)); &#x2F;&#x2F;已被初始化</span><br><span class=\"line\">      console.log(this.$el);</span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); &#x2F;&#x2F;已被初始化  </span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); &#x2F;&#x2F;已被初始化  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mounted: function() &#123;</span><br><span class=\"line\">      console.group(&#39;------mounted 挂载结束状态------&#39;);</span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el); &#x2F;&#x2F;已被初始化</span><br><span class=\"line\">      console.log(this.$el);    </span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); &#x2F;&#x2F;已被初始化</span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); &#x2F;&#x2F;已被初始化 </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeUpdate: function () &#123;</span><br><span class=\"line\">      console.group(&#39;beforeUpdate 更新前状态&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》&#39;);</span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class=\"line\">      console.log(this.$el);   </span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updated: function () &#123;</span><br><span class=\"line\">      console.group(&#39;updated 更新完成状态&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》&#39;);</span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class=\"line\">      console.log(this.$el); </span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    beforeDestroy: function () &#123;</span><br><span class=\"line\">      console.group(&#39;beforeDestroy 销毁前状态&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》&#39;);</span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class=\"line\">      console.log(this.$el);    </span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message); </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    destroyed: function () &#123;</span><br><span class=\"line\">      console.group(&#39;destroyed 销毁完成状态&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》&#39;);</span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;el     : &quot; + this.$el);</span><br><span class=\"line\">      console.log(this.$el);  </span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;data   : &quot; + this.$data); </span><br><span class=\"line\">      console.log(&quot;%c%s&quot;, &quot;color:red&quot;,&quot;message: &quot; + this.message)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">      handleChange()&#123;</span><br><span class=\"line\">        this.message &#x3D; &#39;嘿， 我改了数据！&#39;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>","categories":["vue"],"tags":["vue"]},{"title":"SASS入门","url":"/SASS%E5%85%A5%E9%97%A8/","content":"<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>sass让人们受益的一个重要特性就是它为css引入了变量。你可以把反复使用的css属性值 定义成变量，然后通过变量名来引用它们，而无需重复书写这一属性值。<br>sass使用$符号来标识变量，比如$highlight-color和$sidebar-width。</p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"vue项目中手动安装\"><a href=\"#vue项目中手动安装\" class=\"headerlink\" title=\"vue项目中手动安装\"></a>vue项目中手动安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$npm install --save-dev node-sass</span><br><span class=\"line\">$npm install --save-dev sass-loader</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h2><h3 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h3><p>变量的作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$nav-color: #F90;</span><br><span class=\"line\">$basic-border: 1px solid black;</span><br><span class=\"line\">nav &#123;</span><br><span class=\"line\">  $width: 100px;</span><br><span class=\"line\">  width: $width;</span><br><span class=\"line\">  color: $nav-color;</span><br><span class=\"line\">  border: $basic-border;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;编译后</span><br><span class=\"line\"></span><br><span class=\"line\">nav &#123;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  color: #F90;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"变量引用\"><a href=\"#变量引用\" class=\"headerlink\" title=\"变量引用\"></a>变量引用</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$highlight-color: #F90;</span><br><span class=\"line\">$highlight-border: 1px solid $highlight-color;</span><br><span class=\"line\">.selected &#123;</span><br><span class=\"line\">  border: $highlight-border;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;编译后</span><br><span class=\"line\"></span><br><span class=\"line\">.selected &#123;</span><br><span class=\"line\">  border: 1px solid #F90;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"嵌套CSS-规则\"><a href=\"#嵌套CSS-规则\" class=\"headerlink\" title=\"嵌套CSS 规则\"></a>嵌套CSS 规则</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#content article h1 &#123; color: #333 &#125;</span><br><span class=\"line\">#content article p &#123; margin-bottom: 1.4em &#125;</span><br><span class=\"line\">#content aside &#123; background-color: #EEE &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#content &#123;</span><br><span class=\"line\">  article &#123;</span><br><span class=\"line\">    h1 &#123; color: #333 &#125;</span><br><span class=\"line\">    p &#123; margin-bottom: 1.4em &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  aside &#123; background-color: #EEE &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"父选择器的标识符-amp\"><a href=\"#父选择器的标识符-amp\" class=\"headerlink\" title=\"父选择器的标识符&amp;\"></a>父选择器的标识符&amp;</h3><p>当你为链接之类的元素写：hover这种伪类时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">article a &#123;</span><br><span class=\"line\">  color: blue;</span><br><span class=\"line\">  &amp;:hover &#123; color: red &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当用户在使用IE浏览器时，你会通过JavaScript在<body>标签上添加一个ie的类名，为这种情况编写特殊的样式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#content aside &#123;</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">  body.ie &amp; &#123; color: green &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;*编译后*&#x2F;</span><br><span class=\"line\">#content aside &#123;color: red&#125;;</span><br><span class=\"line\">body.ie #content aside &#123; color: green &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"群组选择器的嵌套\"><a href=\"#群组选择器的嵌套\" class=\"headerlink\" title=\"群组选择器的嵌套\"></a>群组选择器的嵌套</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.container &#123;</span><br><span class=\"line\">  h1, h2, h3 &#123;margin-bottom: .8em&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;*编译后*&#x2F;</span><br><span class=\"line\">.container h1, .container h2, .container h3 &#123; margin-bottom: .8em &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nav, aside &#123;</span><br><span class=\"line\">  a &#123;color: blue&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;*编译后*&#x2F;</span><br><span class=\"line\">nav a, aside a &#123;color: blue&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"子组合选择器和同层组合选择器：-gt-、-和\"><a href=\"#子组合选择器和同层组合选择器：-gt-、-和\" class=\"headerlink\" title=\"子组合选择器和同层组合选择器：&gt;、+和~\"></a>子组合选择器和同层组合选择器：&gt;、+和~</h3><ul>\n<li><code>&gt;</code>选择器只会选择article下紧跟着的子元素中命中section选择器的元素</li>\n<li><code>+</code>用同层相邻组合选择器+选择header元素后紧跟的p元素</li>\n<li><code>~</code>用同层全体组合选择器~，选择所有跟在article后的同层article元素，不管它们之间隔了多少其他元素<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">article &#123;</span><br><span class=\"line\">  ~ article &#123; border-top: 1px dashed #ccc &#125;</span><br><span class=\"line\">  &gt; section &#123; background: #eee &#125;</span><br><span class=\"line\">  dl &gt; &#123;</span><br><span class=\"line\">    dt &#123; color: #333 &#125;</span><br><span class=\"line\">    dd &#123; color: #555 &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  nav + &amp; &#123; margin-top: 0 &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;*编译后*&#x2F;</span><br><span class=\"line\">article ~ article &#123; border-top: 1px dashed #ccc &#125;</span><br><span class=\"line\">article &gt; footer &#123; background: #eee &#125;</span><br><span class=\"line\">article dl &gt; dt &#123; color: #333 &#125;</span><br><span class=\"line\">article dl &gt; dd &#123; color: #555 &#125;</span><br><span class=\"line\">nav + article &#123; margin-top: 0 &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"嵌套属性\"><a href=\"#嵌套属性\" class=\"headerlink\" title=\"嵌套属性\"></a>嵌套属性</h3><p>在<code>sass</code>中，除了<code>CSS</code>选择器，属性也可以进行嵌套。尽管编写属性涉及的重复不像编写选择器那么糟糕，但是要反复写<code>border-style、border-width、border-color</code>以及<code>border-*</code>等也是非常烦人的。在sass中，你只需敲写一遍border：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nav &#123;</span><br><span class=\"line\">  border: &#123;</span><br><span class=\"line\">  style: solid;</span><br><span class=\"line\">  width: 1px;</span><br><span class=\"line\">  color: #ccc;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;*编译后*&#x2F;</span><br><span class=\"line\">nav &#123;</span><br><span class=\"line\">  border-style: solid;</span><br><span class=\"line\">  border-width: 1px;</span><br><span class=\"line\">  border-color: #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入SASS文件\"><a href=\"#导入SASS文件\" class=\"headerlink\" title=\"导入SASS文件\"></a>导入SASS文件</h2><p>即<code>@import</code>规则，它允许在一个css文件中导入其他css文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@import &#39;src&#x2F;assets&#x2F;styles&#x2F;common&#x2F;mixin&#39;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用SASS部分文件\"><a href=\"#使用SASS部分文件\" class=\"headerlink\" title=\"使用SASS部分文件\"></a>使用SASS部分文件</h3><p>当通过<code>@import</code>把<code>sass</code>样式分散到多个文件时，你通常只想生成少数几个<code>css</code>文件。那些专门为<code>@import</code>命令而编写的<code>sass</code>文件，并不需要生成对应的独立css文件，这样的sass文件称为局部文件。对此，sass有一个特殊的约定来命名这些文件。</p>\n<p>此约定即，<code>sass局部文件的文件名以下划线开头</code>。这样，sass就不会在编译时单独编译这个文件输出css，而只把这个文件用作导入。当你@import一个局部文件时，还可以不写文件的全名，即省略文件名开头的下划线。举例来说，你想导入<code>themes/_night-sky.scss</code>这个局部文件里的变量，你只需在样式表中写<code>@import &quot;themes/night-sky&quot;</code>;。</p>\n<h3 id=\"默认变量值\"><a href=\"#默认变量值\" class=\"headerlink\" title=\"默认变量值\"></a>默认变量值</h3><ul>\n<li>!default用于变量，含义是：如果这个变量被声明赋值了，那就用它声明的值，否则就用这个默认值。</li>\n<li>!default它很像css属性中!important标签的对立面<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$fancybox-width: 400px !default;</span><br><span class=\"line\">.fancybox &#123;</span><br><span class=\"line\">width: $fancybox-width;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n如果用户在导入你的sass局部文件之前声明了一个$fancybox-width变量，那么你的局部文件中对$fancybox-width赋值400px的操作就无效。如果用户没有做这样的声明，则$fancybox-width将默认为400px。</li>\n</ul>\n<h3 id=\"嵌套导入\"><a href=\"#嵌套导入\" class=\"headerlink\" title=\"嵌套导入\"></a>嵌套导入</h3><p>sass允许@import命令写在css规则内。这种导入方式下，局部文件会被直接插入到css规则内导入它的地方。<br>举例说明，有一个名为_blue-theme.scss的局部文件，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">aside &#123;</span><br><span class=\"line\">  background: blue;</span><br><span class=\"line\">  color: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后把它导入到一个CSS规则内，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.blue-theme &#123;@import &quot;blue-theme&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;生成的结果跟你直接在.blue-theme选择器内写_blue-theme.scss文件的内容完全一样。</span><br><span class=\"line\"></span><br><span class=\"line\">.blue-theme &#123;</span><br><span class=\"line\">  aside &#123;</span><br><span class=\"line\">    background: blue;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"混合器\"><a href=\"#混合器\" class=\"headerlink\" title=\"混合器\"></a>混合器</h2><p>混合器使用@mixin标识符定义。这个标识符给一大段样式赋予一个名字，这样你就可以轻易地通过引用这个名字重用这段样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@mixin rounded-corners &#123;</span><br><span class=\"line\">  -moz-border-radius: 5px;</span><br><span class=\"line\">  -webkit-border-radius: 5px;</span><br><span class=\"line\">  border-radius: 5px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后就可以在你的样式表中通过@include来使用这个混合器，放在你希望的任何地方。@include调用会把混合器中的所有样式提取出来放在@include被调用的地方</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">notice &#123;</span><br><span class=\"line\">  background-color: green;</span><br><span class=\"line\">  border: 2px solid #00aa00;</span><br><span class=\"line\">  @include rounded-corners;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;*编译后*&#x2F;</span><br><span class=\"line\">.notice &#123;</span><br><span class=\"line\">  background-color: green;</span><br><span class=\"line\">  border: 2px solid #00aa00;</span><br><span class=\"line\">  -moz-border-radius: 5px;</span><br><span class=\"line\">  -webkit-border-radius: 5px;</span><br><span class=\"line\">  border-radius: 5px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"混合器中的CSS规则\"><a href=\"#混合器中的CSS规则\" class=\"headerlink\" title=\"混合器中的CSS规则\"></a>混合器中的CSS规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@mixin no-bullets &#123;</span><br><span class=\"line\">  list-style: none;</span><br><span class=\"line\">  li &#123;</span><br><span class=\"line\">    list-style-image: none;</span><br><span class=\"line\">    list-style-type: none;</span><br><span class=\"line\">    margin-left: 0px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ul.plain &#123;</span><br><span class=\"line\">  color: #444;</span><br><span class=\"line\">  @include no-bullets;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;*编译后*&#x2F;</span><br><span class=\"line\">ul.plain &#123;</span><br><span class=\"line\">  color: #444;</span><br><span class=\"line\">  list-style: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ul.plain li &#123;</span><br><span class=\"line\">  list-style-image: none;</span><br><span class=\"line\">  list-style-type: none;</span><br><span class=\"line\">  margin-left: 0px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给混合器传参\"><a href=\"#给混合器传参\" class=\"headerlink\" title=\"给混合器传参\"></a>给混合器传参</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@mixin link-colors($normal, $hover, $visited) &#123;</span><br><span class=\"line\">  color: $normal;</span><br><span class=\"line\">  &amp;:hover &#123; color: $hover; &#125;</span><br><span class=\"line\">  &amp;:visited &#123; color: $visited; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当混合器被@include时，你可以把它当作一个css函数来传参。如果你像下边这样写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a &#123;</span><br><span class=\"line\">  @include link-colors(blue, red, green);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*编译后*&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">a &#123; color: blue; &#125;</span><br><span class=\"line\">a:hover &#123; color: red; &#125;</span><br><span class=\"line\">a:visited &#123; color: green; &#125;</span><br></pre></td></tr></table></figure>\n<p>sass允许通过语法$name: value的形式指定每个参数的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">a &#123;</span><br><span class=\"line\">    @include link-colors(</span><br><span class=\"line\">      $normal: blue,</span><br><span class=\"line\">      $visited: green,</span><br><span class=\"line\">      $hover: red</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用选择器继承来精简CSS\"><a href=\"#使用选择器继承来精简CSS\" class=\"headerlink\" title=\"使用选择器继承来精简CSS\"></a>使用选择器继承来精简CSS</h2><p>使用sass的时候，最后一个减少重复的主要特性就是选择器继承，选择器继承是说一个选择器可以继承为另一个选择器定义的所有样式。这个通过@extend语法实现。这个通过@extend语法实现。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;通过选择器继承继承样式</span><br><span class=\"line\">.error &#123;</span><br><span class=\"line\">  border: 1px solid red;</span><br><span class=\"line\">  background-color: #fdd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.seriousError &#123;</span><br><span class=\"line\">  @extend .error;</span><br><span class=\"line\">  border-width: 3px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>.seriousError</code>不仅会继承<code>.error</code>自身的所有样式，任何跟<code>.error</code>有关的组合选择器样式也会被<code>.seriousError</code>以组合选择器的形式继承</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;.seriousError从.error继承样式</span><br><span class=\"line\">.error a&#123;  &#x2F;&#x2F;应用到.seriousError a</span><br><span class=\"line\">  color: red;</span><br><span class=\"line\">  font-weight: 100;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">h1.error &#123; &#x2F;&#x2F;应用到hl.seriousError</span><br><span class=\"line\">  font-size: 1.2rem;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在class=”seriousError”的html元素内的超链接也会变成红色和粗体。</p>\n","categories":["vue","css"],"tags":["vue,css"]},{"title":"UI组件","url":"/UI%E7%BB%84%E4%BB%B6/","content":"<p><a href=\"https://element.eleme.cn/#/zh-CN/component/installation\" target=\"_blank\" rel=\"noopener\" title=\"element-ui\">element-ui</a></p>\n<a id=\"more\"></a>\n\n","categories":["vue"],"tags":["vue"]},{"title":"父子组件传值","url":"/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/","content":"<p>在Vue中，父组件通过<code>prop</code>给子组件下发数据，子组件通过事件<code>$emit</code>给父组件发送信息。</p>\n<a id=\"more\"></a>\n\n\n\n<h2 id=\"父组件向子组件传值\"><a href=\"#父组件向子组件传值\" class=\"headerlink\" title=\"父组件向子组件传值\"></a>父组件向子组件传值</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 父组件 --&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;certificate-input :p_model&#x3D;&#39;pname&#39; :xi_model&#x3D;&quot;xiname&quot; :arr&#x3D;&quot;arr&quot; :break&#x3D;&quot;break&quot; :obj&#x3D;&quot;obj&quot;&gt;&lt;&#x2F;certificate-input&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">import CertificateInput from &#39;..&#x2F;common&#x2F;CertificateInput.vue&#39;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    name: &#39;&#39;,</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        CertificateInput </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        pname:&quot;&quot;,</span><br><span class=\"line\">        xiname:123,</span><br><span class=\"line\">        arr:[],</span><br><span class=\"line\">        break: false,</span><br><span class=\"line\">        obj: &#123;&#125;</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 子组件 --&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    pModel: &#123;</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &#39;hello world&#39;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    xiModel: &#123;</span><br><span class=\"line\">      type: Number,</span><br><span class=\"line\">      default: 0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    break: &#123;</span><br><span class=\"line\">      type: Boolean,</span><br><span class=\"line\">      default: true</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    arr: &#123;</span><br><span class=\"line\">      type: Array,</span><br><span class=\"line\">      default: () &#x3D;&gt; &#123;</span><br><span class=\"line\">        return []</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    arr: &#123;</span><br><span class=\"line\">      type: Object,</span><br><span class=\"line\">      default: () &#x3D;&gt; &#123;</span><br><span class=\"line\">        return &#123;&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"子组件向父组件传值\"><a href=\"#子组件向父组件传值\" class=\"headerlink\" title=\"子组件向父组件传值\"></a>子组件向父组件传值</h2><p>每个Vue实例都实现了事件接口：使用<code>$on(evntName)</code>监听事件；使用<code>$emit(eventName,optionalPayload)</code>触发事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 父组件 --&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;test&quot;&gt;</span><br><span class=\"line\">      &lt;test-com @childFn&#x3D;&quot;parentFn&quot;&gt;&lt;&#x2F;test-com&gt;</span><br><span class=\"line\">      &lt;br&#x2F;&gt; </span><br><span class=\"line\">      子组件传来的值 : &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; ...</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        message: &#39;&#39;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">       parentFn(payload) &#123;</span><br><span class=\"line\">        this.message &#x3D; payload;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 子组件 --&gt;</span><br><span class=\"line\">&lt;template&gt; </span><br><span class=\"line\">&lt;div class&#x3D;&quot;testCom&quot;&gt;</span><br><span class=\"line\">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;button @click&#x3D;&quot;click&quot;&gt;Send&lt;&#x2F;button&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; ...</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">          &#x2F;&#x2F; 默认</span><br><span class=\"line\">          message: &#39;我是来自子组件的消息&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">      click() &#123;</span><br><span class=\"line\">            this.$emit(&#39;childFn&#39;, this.message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"sync修饰符\"><a href=\"#sync修饰符\" class=\"headerlink\" title=\".sync修饰符\"></a>.sync修饰符</h2><p>作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;comp :foo.sync&#x3D;&quot;bar&quot;&gt;&lt;&#x2F;comp&gt;</span><br></pre></td></tr></table></figure>\n<p>会被扩展为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;comp :foo&#x3D;&quot;bar&quot; @update:foo&#x3D;&quot;val &#x3D;&gt; bar &#x3D; val&quot;&gt;&lt;&#x2F;comp&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$emit(&#39;update:foo&#39;, newValue)</span><br></pre></td></tr></table></figure>","categories":["vue"],"tags":["vue"]},{"title":"vuex","url":"/vuex/","content":"<p>Vuex 是一个专为 Vue.js 应用程序开发的<code>状态管理模式</code>，可以帮助我们管理共享状态。在具有VueX的Vue项目中，我们只需要把这些值定义在VueX中，即可在整个Vue项目的组件中使用。</p>\n<p>在Vue项目开发中，需要监控项目中得各种值，为了提高效率，Vue提供了一款浏览器扩展——<code>VueDevtools</code>。</p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"初始化store下index-js中的内容\"><a href=\"#初始化store下index-js中的内容\" class=\"headerlink\" title=\"初始化store下index.js中的内容\"></a>初始化<code>store</code>下<code>index.js</code>中的内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">import Vuex from &#39;vuex&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;挂载Vuex</span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;创建VueX对象</span><br><span class=\"line\">const store &#x3D; new Vuex.Store(&#123;</span><br><span class=\"line\">    state:&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;存放的键值对就是所要管理的状态</span><br><span class=\"line\">        name:&#39;helloVueX&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n<h3 id=\"将store挂载到当前项目的Vue实例当中去\"><a href=\"#将store挂载到当前项目的Vue实例当中去\" class=\"headerlink\" title=\"将store挂载到当前项目的Vue实例当中去\"></a>将store挂载到当前项目的Vue实例当中去</h3><p>打开main.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">import App from &#39;.&#x2F;App&#39;</span><br><span class=\"line\">import router from &#39;.&#x2F;router&#39;</span><br><span class=\"line\">import store from &#39;.&#x2F;store&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip &#x3D; false</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* eslint-disable no-new *&#x2F;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#39;#app&#39;,</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  store,  &#x2F;&#x2F;store:store 和router一样，将我们创建的Vuex实例挂载到这个vue实例中</span><br><span class=\"line\">  render: h &#x3D;&gt; h(App)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"在组件中使用Vuex\"><a href=\"#在组件中使用Vuex\" class=\"headerlink\" title=\"在组件中使用Vuex\"></a>在组件中使用Vuex</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&#39;app&#39;&gt;</span><br><span class=\"line\">        name:</span><br><span class=\"line\">        &lt;h1&gt;&#123;&#123; $store.state.name &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>\n<p>或者要在组件方法中使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">...,</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    add()&#123;</span><br><span class=\"line\">      console.log(this.$store.state.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"VueX中的核心内容\"><a href=\"#VueX中的核心内容\" class=\"headerlink\" title=\"VueX中的核心内容\"></a>VueX中的核心内容</h2><p>在VueX对象中，其实不止有state,还有用来操作state中数据的方法集，以及当我们需要对state中的数据需要加工的方法集等等成员。</p>\n<p><strong>成员列表：</strong></p>\n<ul>\n<li>state 存放状态</li>\n<li>mutations state成员操作</li>\n<li>getters 加工state成员给外界</li>\n<li>actions 异步操作</li>\n<li>modules 模块化状态管理</li>\n</ul>\n<h3 id=\"VueX的工作流程\"><a href=\"#VueX的工作流程\" class=\"headerlink\" title=\"VueX的工作流程\"></a>VueX的工作流程</h3><p>首先，Vue组件如果调用某个VueX的方法过程中需要向后端请求时或者说出现异步操作时，需要<code>dispatch VueX</code>中<code>actions</code>的方法，以保证数据的同步。可以说，<code>action</code>的存在就是为了让<code>mutations</code>中的方法能在异步操作中起作用。</p>\n<p>如果没有异步操作，那么我们就可以直接在组件内提交状态中的<code>Mutations</code>中自己编写的方法来达成对<code>state</code>成员的操作。不建议在组件中直接对state中的成员进行操作，这是因为直接修改(例如：this.$store.state.name = ‘hello’)的话不能被VueDevtools所监控到。</p>\n<p>最后被修改后的state成员会被渲染到组件的原位置当中去。</p>\n<p><img src=\"/images/vuex.png\" alt=\"alt\"></p>\n<h3 id=\"Mutations\"><a href=\"#Mutations\" class=\"headerlink\" title=\"Mutations\"></a>Mutations</h3><p>mutations是操作state数据的方法的集合，比如对该数据的修改、增加、删除等等。<br>mutations方法都有默认的形参：(<code>[state] [,payload]</code>)</p>\n<ul>\n<li>state是当前VueX对象中的state</li>\n<li>payload是该方法在被调用时传递参数使用的<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- index.js --&gt;</span><br><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">import Vuex from &#39;vuex&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\">const store &#x3D; new Vuex(&#123;</span><br><span class=\"line\">    state:&#123;</span><br><span class=\"line\">        name:&#39;helloVueX&#39;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations:&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;es6语法，等同edit:funcion()&#123;...&#125;</span><br><span class=\"line\">        edit(state)&#123;</span><br><span class=\"line\">            state.name &#x3D; &#39;jack&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n而在组件中，我们需要这样去调用这个mutation——例如在App.vue的某个method中:<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$store.commit(&#39;edit&#39;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Mutation传值\"><a href=\"#Mutation传值\" class=\"headerlink\" title=\"Mutation传值\"></a>Mutation传值</h3><p>在实际生产过程中，会遇到需要在提交某个mutation时需要携带一些参数给方法使用。<br>单个值提交时:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$store.commit(&#39;edit&#39;,15)</span><br></pre></td></tr></table></figure>\n<p>当需要多参提交时，推荐把他们放在一个对象中来提交:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$store.commit(&#39;edit&#39;,&#123;age:15,sex:&#39;男&#39;&#125;)</span><br></pre></td></tr></table></figure>\n<p>接收挂载的参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">edit(state,payload)&#123;</span><br><span class=\"line\">  state.name &#x3D; &#39;jack&#39;</span><br><span class=\"line\">  console.log(payload) &#x2F;&#x2F; 15或&#123;age:15,sex:&#39;男&#39;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种提交方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$store.commit(&#123;</span><br><span class=\"line\">    type:&#39;edit&#39;,</span><br><span class=\"line\">    payload:&#123;</span><br><span class=\"line\">        age:15,</span><br><span class=\"line\">        sex:&#39;男&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"增删state中的成员\"><a href=\"#增删state中的成员\" class=\"headerlink\" title=\"增删state中的成员\"></a>增删state中的成员</h3><p>为了配合Vue的响应式数据，我们在Mutations的方法中，应当使用Vue提供的方法来进行操作。<br>如果使用delete或者xx.xx = xx的形式去删或增，则Vue不能对数据进行实时响应。</p>\n<ul>\n<li>Vue.set 为某个对象设置成员的值，若不存在则新增</li>\n</ul>\n<p>例如对state对象中添加一个age成员</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.set(state,&quot;age&quot;,15)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Vue.delete 删除成员</li>\n</ul>\n<p>将刚刚添加的age成员删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.delete(state,&#39;age&#39;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Actions\"><a href=\"#Actions\" class=\"headerlink\" title=\"Actions\"></a>Actions</h3><p>由于直接在mutation方法中进行异步操作，将会引起数据失效。所以提供了Actions来专门进行异步操作，最终提交mutation方法。</p>\n<p><strong>Actions中的方法有两个默认参数</strong></p>\n<ul>\n<li>context 上下文(相当于箭头函数中的this)对象</li>\n<li>payload 挂载参数</li>\n</ul>\n<p>由于<code>setTimeout</code>是异步操作，所以需要使用<code>actions</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">actions:&#123;</span><br><span class=\"line\">    aEdit(context,payload)&#123;</span><br><span class=\"line\">        setTimeout(()&#x3D;&gt;&#123;</span><br><span class=\"line\">            context.commit(&#39;edit&#39;,payload)</span><br><span class=\"line\">        &#125;,2000)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在组件中调用:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$store.dispatch(&#39;aEdit&#39;,&#123;age:15&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Getters\"><a href=\"#Getters\" class=\"headerlink\" title=\"Getters\"></a>Getters</h3><p>可以对state中的成员加工后传递给外界</p>\n<p><strong>Getters中的方法有两个默认参数</strong></p>\n<ul>\n<li>state 当前VueX对象中的状态对象</li>\n<li>getters 当前getters对象，用于将getters下的其他getter拿来用<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">getters:&#123;</span><br><span class=\"line\">    nameInfo(state)&#123;</span><br><span class=\"line\">        return &quot;姓名:&quot;+state.name</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fullInfo(state,getters)&#123;</span><br><span class=\"line\">        return getters.nameInfo+&#39;年龄:&#39;+state.age</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n或者<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const getters &#x3D; &#123;</span><br><span class=\"line\">  loading: state &#x3D;&gt; state.user.loading,</span><br><span class=\"line\">  token: state &#x3D;&gt; state.user.token,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default getters</span><br></pre></td></tr></table></figure>\n组件中调用<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$store.getters.fullInfo</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Models\"><a href=\"#Models\" class=\"headerlink\" title=\"Models\"></a>Models</h3><p>当项目庞大，状态非常多时，可以采用模块化管理模式。Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 <code>state、mutation、action、getter、</code>甚至是嵌套子模块——从上至下进行同样方式的分割。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">models:&#123;</span><br><span class=\"line\">    a:&#123;</span><br><span class=\"line\">        state:&#123;&#125;,</span><br><span class=\"line\">        getters:&#123;&#125;,</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>组件内调用模块a的状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$store.state.a</span><br></pre></td></tr></table></figure>\n<p>而提交或者<code>dispatch</code>某个方法和以前一样,会自动执行所有模块内的对应<code>type</code>的方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$store.commit(&#39;editKey&#39;)</span><br><span class=\"line\">this.$store.dispatch(&#39;aEditKey&#39;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"模块的细节\"><a href=\"#模块的细节\" class=\"headerlink\" title=\"模块的细节\"></a>模块的细节</h3><ul>\n<li>模块中<code>mutations</code>和<code>getters</code>中的方法接受的第一个参数是自身局部模块内部的<code>state</code><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">models:&#123;</span><br><span class=\"line\">    a:&#123;</span><br><span class=\"line\">        state:&#123;key:5&#125;,</span><br><span class=\"line\">        mutations:&#123;</span><br><span class=\"line\">            editKey(state)&#123;</span><br><span class=\"line\">                state.key &#x3D; 9</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>getters</code>中方法的第三个参数是根节点状态<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">models:&#123;</span><br><span class=\"line\">    a:&#123;</span><br><span class=\"line\">        state:&#123;key:5&#125;,</span><br><span class=\"line\">        getters:&#123;</span><br><span class=\"line\">            getKeyCount(state,getter,rootState)&#123;</span><br><span class=\"line\">                return  rootState.key + state.key</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>actions</code>中方法获取局部模块状态是<code>context.state</code>,根节点状态是<code>context.rootState</code><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">models:&#123;</span><br><span class=\"line\">    a:&#123;</span><br><span class=\"line\">        state:&#123;key:5&#125;,</span><br><span class=\"line\">        actions:&#123;</span><br><span class=\"line\">            aEidtKey(context)&#123;</span><br><span class=\"line\">                if(context.state.key &#x3D;&#x3D;&#x3D; context.rootState.key)&#123;</span><br><span class=\"line\">                    context.commit(&#39;editKey&#39;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"store目录结构\"><a href=\"#store目录结构\" class=\"headerlink\" title=\"store目录结构\"></a>store目录结构</h2><p><img src=\"/images/store.png\" alt=\"alt\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- index.js --&gt;</span><br><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">import Vuex from &#39;vuex&#39;</span><br><span class=\"line\">import getters from &#39;.&#x2F;getters&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">import user from &#39;.&#x2F;modules&#x2F;user&#39;</span><br><span class=\"line\">import aside from &#39;.&#x2F;modules&#x2F;aside&#39;</span><br><span class=\"line\">import homeTemp from &#39;.&#x2F;modules&#x2F;homeTemp&#39;</span><br><span class=\"line\">import homeNormal from &#39;.&#x2F;modules&#x2F;homeNormal&#39;</span><br><span class=\"line\">import homePage from &#39;.&#x2F;modules&#x2F;homePage&#39;</span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\">const store &#x3D; new Vuex.Store(&#123;</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    user,</span><br><span class=\"line\">    aside,</span><br><span class=\"line\">    homeTemp,</span><br><span class=\"line\">    homeNormal,</span><br><span class=\"line\">    homePage</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- getters.js --&gt;</span><br><span class=\"line\">const getters &#x3D; &#123;</span><br><span class=\"line\">  loading: state &#x3D;&gt; state.user.loading,</span><br><span class=\"line\">  token: state &#x3D;&gt; state.user.token,</span><br><span class=\"line\">  dialogMask: state &#x3D;&gt; state.homeTemp.dialogMask,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default getters</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- dialogMask.js --&gt;</span><br><span class=\"line\">const dialogMask &#x3D; &#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    dialogMask: false</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    SET_MASKDIALOG: (state, dialogMask) &#x3D;&gt; &#123;</span><br><span class=\"line\">      state.dialogMask &#x3D; dialogMask</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    maskDialog (&#123; commit &#125;, params) &#123;</span><br><span class=\"line\">      commit(&#39;SET_MASKDIALOG&#39;, params)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default dialogMask</span><br></pre></td></tr></table></figure>\n<p>组件内调用某个模块的状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$store.getters.dialogMask</span><br></pre></td></tr></table></figure>\n<p>组件内某个模块更改状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$store.dispatch(&#39;dialogMask&#39;, true)</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let params &#x3D; &#123;&#39;accountNo&#39;: this.loginForm.username, &#39;password&#39;: md5(this.loginForm.password)&#125;</span><br><span class=\"line\">this.$store.dispatch(&#39;Login&#39;, params).then((res) &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(res)</span><br><span class=\"line\">  localStorage.setItem(&#39;orgIds&#39;, res.data.data.orgId)</span><br><span class=\"line\">  this.$router.push(&#123; path: &#39;&#x2F;&#39; &#125;)</span><br><span class=\"line\">&#125;).catch((err) &#x3D;&gt; &#123;</span><br><span class=\"line\">  console.log(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","categories":["vue"],"tags":["vue"]},{"title":"promise","url":"/promise/","content":"<h2 id=\"promise介绍\"><a href=\"#promise介绍\" class=\"headerlink\" title=\"promise介绍\"></a>promise介绍</h2><p>1、主要用于异步计算<br>2、可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果<br>3、可以在对象之间传递和操作promise，帮助我们处理队列<br>4、promise是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）<br>5、并未剥夺函数return的能力，因此无需层层传递callback，进行回调获取数据<br>6、代码风格，容易理解，便于维护<br>7、多个异步等待合并便于解决</p>\n<a id=\"more\"></a>\n\n\n<p><strong>promise有三个状态</strong> </p>\n<ul>\n<li>pending[待定]初始状态</li>\n<li>fulfilled[实现]操作成功</li>\n<li>rejected[被否决]操作失败<br>当promise状态发生改变，就会触发then()里的响应函数处理后续步骤；<br>promise状态一经改变，不会再变。</li>\n</ul>\n<p><strong>Promise对象的状态改变，只有两种可能</strong></p>\n<ul>\n<li>从pending变为fulfilled</li>\n<li>从pending变为rejected</li>\n</ul>\n<p><strong>promise作为队列最为重要的特性，我们在任何一个地方生成了一个promise队列之后，我们可以把他作为一个变量传递到其他地方</strong></p>\n<h2 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\".then()\"></a>.then()</h2><p>1、接收两个函数作为参数，分别代表fulfilled（成功）和rejected（失败）<br>2、.then()返回一个新的Promise实例，所以它可以链式调用<br>3、当前面的Promise状态改变时，.then()根据其最终状态，选择特定的状态响应函数执行<br>4、状态响应函数可以返回新的promise，或其他值，不返回值也可以我们可以认为它返回了一个null；<br>5、如果返回新的promise，那么下一级.then()会在新的promise状态改变之后执行<br>6、如果返回其他任何值，则会立即执行下一级.then()<br>** 错误处理两种做法 **</p>\n<ul>\n<li>reject(‘错误信息’).then(() =&gt; {}, () =&gt; {错误处理逻辑})</li>\n<li>throw new Error(‘错误信息’).catch( () =&gt; {错误处理逻辑})<h2 id=\"catch\"><a href=\"#catch\" class=\"headerlink\" title=\".catch()\"></a>.catch()</h2>catch也会返回一个promise实例，并且是resolved状态,会继续向下执行。<br>如果抛出错误变为rejected状态，所以绕过两个then直接跑到最下面的catch<br><img src=\"/images/catch1.png\" alt=\"alt\"><br><img src=\"/images/catch1Result.png\" alt=\"alt\"><br><img src=\"/images/catch2.png\" alt=\"alt\"><br><img src=\"/images/catch2Result.png\" alt=\"alt\"><h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function fn1 () &#123;</span><br><span class=\"line\">    let p &#x3D; new Promise((resolve,reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;fn1函数&#39;)</span><br><span class=\"line\">            &#x2F;&#x2F; let num &#x3D; Math.ceil(Math.random()*10)</span><br><span class=\"line\">            let num &#x3D;3</span><br><span class=\"line\">            num &lt; 5 ? resolve(num) : reject(&#39;数太大了&#39;)</span><br><span class=\"line\">        &#125;,2000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function fn2 () &#123;</span><br><span class=\"line\">    let p &#x3D; new Promise((resolve,reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;fn2函数&#39;)</span><br><span class=\"line\">            resolve(&#39;fn2执行下一个操作&#39;)</span><br><span class=\"line\">        &#125;,2000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function fn3 () &#123;</span><br><span class=\"line\">    let p &#x3D; new Promise((resolve,reject) &#x3D;&gt; &#123;</span><br><span class=\"line\">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class=\"line\">            console.log(&#39;fn3函数&#39;)</span><br><span class=\"line\">            resolve(&#39;fn3执行下一个操作&#39;)</span><br><span class=\"line\">        &#125;,2000)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return p</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"then-gt-gt-catch-gt\"><a href=\"#then-gt-gt-catch-gt\" class=\"headerlink\" title=\"then(()=&gt; {}, ()=&gt; {}).catch(()=&gt;{})\"></a>then(()=&gt; {}, ()=&gt; {}).catch(()=&gt;{})</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fn1().then((data) &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(data)</span><br><span class=\"line\">    &#x2F;&#x2F; console.log(dataparams)</span><br><span class=\"line\">    return fn2()</span><br><span class=\"line\">&#125;, (err,data) &#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(err)</span><br><span class=\"line\">&#125;).then((data)&#x3D;&gt; &#123;</span><br><span class=\"line\">    console.log(data)</span><br><span class=\"line\">    return fn3()</span><br><span class=\"line\">&#125;).then((data)&#x3D;&gt;&#123;</span><br><span class=\"line\">    console.log(data)</span><br><span class=\"line\">    return &#39;直接返回数据&#39;</span><br><span class=\"line\">&#125;).then((data)&#x3D;&gt;&#123;</span><br><span class=\"line\">    console.log(data)</span><br><span class=\"line\">    return data</span><br><span class=\"line\">&#125;).catch(function(reason)&#123;</span><br><span class=\"line\">    console.log(&#39;rejected&#39;);</span><br><span class=\"line\">    console.log(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-all-then-gt\"><a href=\"#Promise-all-then-gt\" class=\"headerlink\" title=\"Promise.all([]).then(()=&gt;{})\"></a>Promise.all([]).then(()=&gt;{})</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; &#39;谁跑的慢，以谁为准执行回调&#39;</span><br><span class=\"line\">&#x2F;&#x2F; &#39;谁跑的慢，以谁为准执行回调&#39;</span><br><span class=\"line\">&#x2F;&#x2F; 使用场景 所有的异步操作执行结束 在执行then</span><br><span class=\"line\"></span><br><span class=\"line\">Promise</span><br><span class=\"line\">.all([fn1(), fn2(), fn3()])</span><br><span class=\"line\">.then(function(results)&#123;</span><br><span class=\"line\">    console.log(results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-race-then-gt\"><a href=\"#Promise-race-then-gt\" class=\"headerlink\" title=\"Promise.race([]).then(()=&gt;{})\"></a>Promise.race([]).then(()=&gt;{})</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; &#39;谁跑的快，以谁为准执行回调&#39;</span><br><span class=\"line\">&#x2F;&#x2F; 使用场景</span><br><span class=\"line\">&#x2F;&#x2F;请求某个图片资源</span><br><span class=\"line\">function requestImg()&#123;</span><br><span class=\"line\">    var p &#x3D; new Promise(function(resolve, reject)&#123;</span><br><span class=\"line\">        var img &#x3D; new Image();</span><br><span class=\"line\">        img.onload &#x3D; function()&#123;</span><br><span class=\"line\">            resolve(img);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        img.src &#x3D; &#39;xxxxxx&#39;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;延时函数，用于给请求计时</span><br><span class=\"line\">function timeout()&#123;</span><br><span class=\"line\">    var p &#x3D; new Promise(function(resolve, reject)&#123;</span><br><span class=\"line\">        setTimeout(function()&#123;</span><br><span class=\"line\">            reject(&#39;图片请求超时&#39;);</span><br><span class=\"line\">        &#125;, 5000);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Promise</span><br><span class=\"line\">.race([requestImg(), timeout()])</span><br><span class=\"line\">.then(function(results)&#123;</span><br><span class=\"line\">    console.log(results);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":["ES6"],"tags":["ES6"]},{"title":"vue-router","url":"/vue-router/","content":"<h2 id=\"路由传参\"><a href=\"#路由传参\" class=\"headerlink\" title=\"路由传参\"></a>路由传参</h2><h3 id=\"定义vue-router的动态路由\"><a href=\"#定义vue-router的动态路由\" class=\"headerlink\" title=\"定义vue-router的动态路由\"></a>定义vue-router的动态路由</h3><table>\n<thead>\n<tr>\n<th>声明式</th>\n<th>编程式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td>\n<td><code>router.push(...)</code></td>\n</tr>\n</tbody></table>\n<p>路由中设置多段<code>路径参数</code>，对应的值都会设置到 <code>$route.params</code> 中。例如：</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>匹配路径</th>\n<th>$route.params</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/user/:username</td>\n<td>/user/evan</td>\n<td>{ username: ‘evan’ }</td>\n</tr>\n<tr>\n<td>/user/:username/post/:post_id</td>\n<td>/user/evan/post/123</td>\n<td>{ username: ‘evan’, post_id: ‘123’ }</td>\n</tr>\n</tbody></table>\n<a id=\"more\"></a>\n\n\n<p>携带参数的路由实现方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 对象</span><br><span class=\"line\">router.push(&#123; name: &#39;home&#39; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 带查询参数，变成 &#x2F;register?plan&#x3D;private</span><br><span class=\"line\">router.push(&#123; path: &#39;register&#39;, query: &#123; plan: &#39;private&#39; &#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; -&gt; &#x2F;user&#x2F;123</span><br><span class=\"line\">router.push(&#123; path: &#96;&#x2F;user&#x2F;$&#123;userId&#125;&#96; &#125;) </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; -&gt; &#x2F;user&#x2F;123</span><br><span class=\"line\">router.push(&#123; name: &#39;user&#39;, params: &#123; userId &#125;&#125;)</span><br></pre></td></tr></table></figure>\n<p>注意：如果提供了 <code>path，params</code> 会被忽略，上述例子中的 <code>query</code> 并不属于这种情况。</p>\n<h3 id=\"获取传过来的动态参数\"><a href=\"#获取传过来的动态参数\" class=\"headerlink\" title=\"获取传过来的动态参数\"></a>获取传过来的动态参数</h3><p>如果 在router目录下的path属性加上<code>/:id</code>，则使用router对象的<code>params.id</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.$route.params.id</span><br><span class=\"line\">this.$route.query.name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"路由懒加载及嵌套\"><a href=\"#路由懒加载及嵌套\" class=\"headerlink\" title=\"路由懒加载及嵌套\"></a>路由懒加载及嵌套</h2><p><code>require.ensure()</code>和<code>import()</code> 使用区分</p>\n<h3 id=\"require-ensure（）接受三个参数\"><a href=\"#require-ensure（）接受三个参数\" class=\"headerlink\" title=\"require.ensure（）接受三个参数\"></a>require.ensure（）接受三个参数</h3><p>第一个参数的依赖关系是一个数组，代表了当前需要进来的模块的一些依赖;</p>\n<p>第二个参数回调就是一个回调函数其中需要注意的是，这个回调函数有一个参数要求，通过这个要求就可以在回调函数内动态引入其他模块值得注意的是，虽然这个要求是回调函数的参数，理论上可以换其他名称，但是实际上是不能换的，否则的的的的WebPack就无法静态分析的时候处理它;</p>\n<p>第三个参数errorCallback比较好理解，就是处理错误的回调;</p>\n<p>第四个参数chunkName则是指定打包的组块名称。</p>\n<p><img src=\"/images/ensure.png\" alt=\"alt\"></p>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import()\"></a>import()</h3><p>这个的进口不同于模块引入时的导入，可以理解为一个动态加载的模块的函数（函数等），传入其中的参数就是相应的模块<br><img src=\"/images/import.png\" alt=\"alt\"></p>\n<h3 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h3><p><img src=\"/images/index.png\" alt=\"alt\"></p>\n<h2 id=\"route-router-的区别\"><a href=\"#route-router-的区别\" class=\"headerlink\" title=\"route router 的区别\"></a>route router 的区别</h2><p><code>$route</code>对象表示当前的路由信息，包含了当前 URL 解析得到的信息。<br>包含当前的路径，参数，query对象等。<br><img src=\"/images/route.png\" alt=\"alt\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.$route.path**      字符串，对应当前路由的路径，总是解析为绝对路径，如&quot;&#x2F;foo&#x2F;bar&quot;。</span><br><span class=\"line\"></span><br><span class=\"line\">2.$route.params**      一个 key&#x2F;value 对象，包含了 动态片段 和 全匹配片段，      如果没有路由参数，就是一个空对象。</span><br><span class=\"line\"></span><br><span class=\"line\">3.$route.query**      一个 key&#x2F;value 对象，表示 URL 查询参数。      例如，对于路径 &#x2F;foo?user&#x3D;1，则有$route.query.user &#x3D;&#x3D; 1，      如果没有查询参数，则是个空对象。</span><br><span class=\"line\"></span><br><span class=\"line\">4.$route.hash**      当前路由的hash值 (不带#) ，如果没有 hash 值，则为空字符串。锚点*</span><br><span class=\"line\"></span><br><span class=\"line\">5.$route.fullPath**      完成解析后的 URL，包含查询参数和hash的完整路径。</span><br><span class=\"line\"></span><br><span class=\"line\">6.$route.matched**      数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。</span><br><span class=\"line\"></span><br><span class=\"line\">7.$route.name    当前路径名字</span><br><span class=\"line\"></span><br><span class=\"line\">8.$route.meta  路由元信息</span><br></pre></td></tr></table></figure>\n<p><code>$router</code>对象是全局路由的实例，是<code>router</code>构造方法的实例。<br><img src=\"/images/router.png\" alt=\"alt\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. push方法</span><br><span class=\"line\">2. go</span><br><span class=\"line\">  页面路由跳转 </span><br><span class=\"line\">  前进或者后退this.$router.go(-1)  &#x2F;&#x2F; 后退</span><br><span class=\"line\">3、replace</span><br><span class=\"line\">push方法会向 history 栈添加一个新的记录，而replace方法是替换当前的页面，</span><br><span class=\"line\">不会向 history 栈添加一个新的记录</span><br><span class=\"line\">&#x2F;&#x2F; 一般使用replace来做404页面</span><br><span class=\"line\"></span><br><span class=\"line\">this.$router.replace(&#39;&#x2F;&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">配置路由时path有时候会加 &#39;&#x2F;&#39; 有时候不加,以&#39;&#x2F;&#39;开头的会被当作根路径，就不会一直嵌套之前的路径。</span><br></pre></td></tr></table></figure>","categories":["vue"],"tags":["vue"]},{"title":"ES6常用方方法","url":"/ES6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%96%B9%E6%B3%95/","content":"<p>ES6常用方方法</p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"ES6箭头函数\"><a href=\"#ES6箭头函数\" class=\"headerlink\" title=\"ES6箭头函数\"></a>ES6箭头函数</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let sum &#x3D; (num1, num2) &#x3D;&gt; &#123;</span><br><span class=\"line\">    let res &#x3D; num1 + num2;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#x2F;&#x2F; 相当于</span><br><span class=\"line\">let sum &#x3D; function (num1, num2) &#123;</span><br><span class=\"line\">    let res &#x3D; num1 + num2;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>this指向</strong><br>箭头函数中没有this绑定，必须通过查找作用域链来决定其值。<br>如果箭头函数被非箭头函数包含，this绑定的是最近一层非箭头函数的this。否则，this的值会被设置为全局对象。<br>不能通过call、apply、bind方法改变this的值。</p>\n<h2 id=\"对象解构\"><a href=\"#对象解构\" class=\"headerlink\" title=\"对象解构\"></a>对象解构</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const obj &#x3D; &#123;</span><br><span class=\"line\">    name: &#39;lee&#39;,</span><br><span class=\"line\">    age: 18</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let &#123; name, age, gender &#125; &#x3D; obj;</span><br><span class=\"line\">console.log(gender); &#x2F;&#x2F; undefined</span><br><span class=\"line\">console.log(name); &#x2F;&#x2F; lee</span><br><span class=\"line\">console.log(age); &#x2F;&#x2F; 18</span><br></pre></td></tr></table></figure>\n\n<p><strong>别名(非同名局部变量)</strong><br>取:左边的属性值存储在:右边的变量中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const obj &#x3D; &#123;</span><br><span class=\"line\">    name: &#39;lee&#39;,</span><br><span class=\"line\">    age: 18</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let &#123; name: myName, age: myAge &#125; &#x3D; obj;</span><br><span class=\"line\">console.log(name); &#x2F;&#x2F; 空</span><br><span class=\"line\">console.log(myName); &#x2F;&#x2F; &#39;lee&#39;</span><br></pre></td></tr></table></figure>\n\n<p><strong>嵌套</strong><br>在解构中使用花括号{}，意为在找到花括号{}前的属性后，应该继续深入一层查找花括号{}中的属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">const obj &#x3D; &#123;</span><br><span class=\"line\">    person: &#123;</span><br><span class=\"line\">        head: &#123;</span><br><span class=\"line\">            eyes: 2,</span><br><span class=\"line\">            mouth: 1</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        body: &#123;</span><br><span class=\"line\">            arms: 2,</span><br><span class=\"line\">            legs: 2</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let &#123; person: &#123;head&#125; &#125; &#x3D; obj;</span><br><span class=\"line\">console.log(head.eyes); &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组结构\"><a href=\"#数组结构\" class=\"headerlink\" title=\"数组结构\"></a>数组结构</h2><p><strong>声明变量</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let colors &#x3D; [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;];</span><br><span class=\"line\">let [firstColor, secondColor] &#x3D; colors;</span><br><span class=\"line\">console.log(firstColor); &#x2F;&#x2F; &#39;red&#39;</span><br></pre></td></tr></table></figure>\n\n<p><strong>默认值</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let colors &#x3D; [&#39;red&#39;];</span><br><span class=\"line\">let [firstColor, secondColor &#x3D; &#39;green&#39;] &#x3D; colors;</span><br><span class=\"line\">console.log(secondColor); &#x2F;&#x2F; &#39;green&#39;</span><br></pre></td></tr></table></figure>\n\n<p><strong>嵌套</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let colors &#x3D; [&#39;red&#39;, [&#39;green&#39;] ];</span><br><span class=\"line\">let [firstColor, [secondColor] ] &#x3D; colors;</span><br><span class=\"line\">console.log(secondColor); &#x2F;&#x2F; &#39;green&#39;</span><br></pre></td></tr></table></figure>\n\n<p><strong>不定元素</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let colors &#x3D; [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;];</span><br><span class=\"line\">let [firstColor, ...restColors] &#x3D; colors;</span><br><span class=\"line\">console.log(restColors); &#x2F;&#x2F; [&#39;green&#39;, &#39;blue&#39;]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"交换两个值\"><a href=\"#交换两个值\" class=\"headerlink\" title=\"交换两个值\"></a>交换两个值</h2><p>ES5</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let a &#x3D; 1,</span><br><span class=\"line\">  b &#x3D; 2,</span><br><span class=\"line\">  temp;</span><br><span class=\"line\"></span><br><span class=\"line\">  temp &#x3D; a;</span><br><span class=\"line\">  a &#x3D; b;</span><br><span class=\"line\">  b &#x3D; temp;</span><br></pre></td></tr></table></figure>\n<p>ES6</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let a &#x3D; 1,</span><br><span class=\"line\">  b &#x3D; 2;</span><br><span class=\"line\"></span><br><span class=\"line\">[a, b] &#x3D; [b, a];</span><br></pre></td></tr></table></figure>","categories":["ES6"],"tags":["vue","ES6"]},{"title":"vue项目结构","url":"/vue%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/","content":"<h2 id=\"一、目录结构\"><a href=\"#一、目录结构\" class=\"headerlink\" title=\"一、目录结构\"></a>一、目录结构</h2><p><img src=\"/images/vueTree.png\" alt=\"alt\"></p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"二、结构细分\"><a href=\"#二、结构细分\" class=\"headerlink\" title=\"二、结构细分\"></a>二、结构细分</h2><h3 id=\"build——-webpack配置\"><a href=\"#build——-webpack配置\" class=\"headerlink\" title=\"build——[webpack配置]\"></a>build——[webpack配置]</h3><p>build文件主要是webpack的配置，主要启动文件是dev-server.js，当我们输入npm run dev首先启动的就是dev-server.js，它会去检查node及npm版本，加载配置文件，启动服务。</p>\n<p><img src=\"/images/buildTree.png\" alt=\"alt\"></p>\n<h3 id=\"config——-vue项目配置\"><a href=\"#config——-vue项目配置\" class=\"headerlink\" title=\"config——[vue项目配置]\"></a>config——[vue项目配置]</h3><p>config文件主要是项目相关配置，我们常用的就是当端口冲突时配置监听端口，打包输出路径及命名等</p>\n<p><img src=\"/images/configTree.png\" alt=\"alt\"></p>\n<h3 id=\"node-modules——-依赖包\"><a href=\"#node-modules——-依赖包\" class=\"headerlink\" title=\"node_modules——[依赖包]\"></a>node_modules——[依赖包]</h3><p>node_modules里面是项目依赖包，其中包括很多基础依赖，自己也可以根据需要安装其他依赖。安装方法为打开cmd，进入项目目录，输入npm install [依赖包名称],回车。</p>\n<p>在两种情况下我们会自己去安装依赖：</p>\n<p>（1）项目运行缺少该依赖包：例如项目加载外部css会用到的css-loader，路由跳转vue-loader等（安装方法示例：npm install css-loader）</p>\n<p>（2）安装插件：如vux（基于WEUI的移动端组件库），vue-swiper（轮播插件</p>\n<p>注：有时会安装指定依赖版本，需在依赖包名称后加上版本号信息，如安装11.1.4版本的vue-loader，输入npm install <a href=\"mailto:vue-loader@11.1.4\">vue-loader@11.1.4</a></p>\n<h3 id=\"src——-项目核心文件\"><a href=\"#src——-项目核心文件\" class=\"headerlink\" title=\"src——[项目核心文件]\"></a>src——[项目核心文件]</h3><p><img src=\"/images/srcTree.png\" alt=\"alt\"></p>\n<h3 id=\"static——-静态资源文件\"><a href=\"#static——-静态资源文件\" class=\"headerlink\" title=\"static——[静态资源文件]\"></a>static——[静态资源文件]</h3><p><img src=\"/images/staticTree.png\" alt=\"alt\"></p>\n","categories":["vue"],"tags":["vue"]},{"title":"vue脚手架搭建","url":"/vue%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA/","content":"<h2 id=\"一、安装-node-js\"><a href=\"#一、安装-node-js\" class=\"headerlink\" title=\"一、安装 node.js\"></a>一、安装 node.js</h2><h2 id=\"二、安装-vue-cli\"><a href=\"#二、安装-vue-cli\" class=\"headerlink\" title=\"二、安装 vue-cli\"></a>二、安装 vue-cli</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g vue-cli</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\">$ cnpm install -g vue-cli</span><br></pre></td></tr></table></figure>\n<p>vue-cli安装常遇到的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">在node环境下搜索vue.cmd位置，配置环境变量</span><br></pre></td></tr></table></figure>\n\n\n<a id=\"more\"></a>\n\n\n<h2 id=\"三、生成项目\"><a href=\"#三、生成项目\" class=\"headerlink\" title=\"三、生成项目\"></a>三、生成项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vue init webpack [Vue-Project]</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、安装依赖\"><a href=\"#四、安装依赖\" class=\"headerlink\" title=\"四、安装依赖\"></a>四、安装依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd [Vue-Project]</span><br><span class=\"line\">$ cnpm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、启动项目\"><a href=\"#五、启动项目\" class=\"headerlink\" title=\"五、启动项目\"></a>五、启动项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、安装sass依赖包\"><a href=\"#六、安装sass依赖包\" class=\"headerlink\" title=\"六、安装sass依赖包\"></a>六、安装sass依赖包</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.安装sass</span><br><span class=\"line\">$ npm install --save-dev node-sass</span><br><span class=\"line\">$ npm install --save-dev sass-loader</span><br><span class=\"line\"></span><br><span class=\"line\">2.在build文件夹下的webpack.base.conf.js的rules里面添加配置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.scss$&#x2F;, loaders: [&#39;style&#39;, &#39;css&#39;, &#39;sass&#39;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">3.在APP.vue中修改style标签</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、rem的使用\"><a href=\"#七、rem的使用\" class=\"headerlink\" title=\"七、rem的使用\"></a>七、rem的使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">index.html文件中引入</span><br><span class=\"line\">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;g.tbcdn.cn&#x2F;mtb&#x2F;lib-flexible&#x2F;0.3.4&#x2F;??flexible_css.js,flexible.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">mixin.scss文件中引入</span><br><span class=\"line\"> </span><br><span class=\"line\">    @function px_rem($px, $base-font-size: 37.5px) &#123;</span><br><span class=\"line\">      @return ($px &#x2F; $base-font-size) * 1rem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">在scss文件中使用</span><br><span class=\"line\">    @import &quot;static&#x2F;css&#x2F;mixin.scss&quot;;</span><br><span class=\"line\">    h2&#123;</span><br><span class=\"line\">      height: px_rem(50px);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p> demo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;DownLoadPage&quot;&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">require(&#39;..&#x2F;utils&#x2F;flexible.js&#39;)</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#39;DownLoadPage&#39;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class=\"line\">@import &#39;src&#x2F;assets&#x2F;styles&#x2F;mobile&#x2F;mixin&#39;;</span><br><span class=\"line\">html,body&#123;</span><br><span class=\"line\">  min-width: px_rem(320px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八、element-ui的全局安装\"><a href=\"#八、element-ui的全局安装\" class=\"headerlink\" title=\"八、element-ui的全局安装\"></a>八、element-ui的全局安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install element-ui  --save-dev</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">整体引入</span><br><span class=\"line\">在main.js中</span><br><span class=\"line\">import ElementUI from &#39;element-ui&#39;;</span><br><span class=\"line\">import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>\n<h2 id=\"九、element-ui的按需安装\"><a href=\"#九、element-ui的按需安装\" class=\"headerlink\" title=\"九、element-ui的按需安装\"></a>九、element-ui的按需安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">按需引入element-ui</span><br><span class=\"line\">$ npm install element-ui  --save-dev</span><br><span class=\"line\">$ npm install babel-plugin-component -D</span><br></pre></td></tr></table></figure>\n<p>将 .babelrc 修改为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [</span><br><span class=\"line\">    [&quot;env&quot;, &#123;</span><br><span class=\"line\">      &quot;modules&quot;: false,</span><br><span class=\"line\">      &quot;targets&quot;: &#123;</span><br><span class=\"line\">        &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;&#x3D; 8&quot;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    &quot;stage-2&quot;,</span><br><span class=\"line\">    [&quot;es2015&quot;, &#123; &quot;modules&quot;: false &#125;]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;plugins&quot;: [</span><br><span class=\"line\">    &quot;transform-vue-jsx&quot;, </span><br><span class=\"line\">    &quot;transform-runtime&quot;,</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;component&quot;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;libraryName&quot;: &quot;element-ui&quot;,</span><br><span class=\"line\">        &quot;styleLibraryName&quot;: &quot;theme-chalk&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么需要在 main.js 中写入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; Button, Select &#125; from &#39;element-ui&#39;</span><br><span class=\"line\">Vue.prototype.$ELEMENT &#x3D; &#123; size: &#39;small&#39; &#125;</span><br><span class=\"line\">Vue.use(Button)</span><br><span class=\"line\">Vue.use(Select)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十、安装es2015\"><a href=\"#十、安装es2015\" class=\"headerlink\" title=\"十、安装es2015\"></a>十、安装es2015</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"十一、全局安装echarts\"><a href=\"#十一、全局安装echarts\" class=\"headerlink\" title=\"十一、全局安装echarts\"></a>十一、全局安装echarts</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install echarts --save-dev</span><br><span class=\"line\">&#x2F;&#x2F; 引入echarts</span><br><span class=\"line\">import echarts from &#39;echarts&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.prototype.$echarts &#x3D; echarts</span><br></pre></td></tr></table></figure>\n<h2 id=\"十二、按需安装echarts\"><a href=\"#十二、按需安装echarts\" class=\"headerlink\" title=\"十二、按需安装echarts\"></a>十二、按需安装echarts</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 引入基本模板</span><br><span class=\"line\">let echarts &#x3D; require(&#39;echarts&#x2F;lib&#x2F;echarts&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 引入柱状图组件</span><br><span class=\"line\">require(&#39;echarts&#x2F;lib&#x2F;chart&#x2F;bar&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 引入提示框和title组件</span><br><span class=\"line\">require(&#39;echarts&#x2F;lib&#x2F;component&#x2F;tooltip&#39;)</span><br><span class=\"line\">require(&#39;echarts&#x2F;lib&#x2F;component&#x2F;title&#39;)</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#39;hello&#39;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &#39;Welcome to Your Vue.js App&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    this.drawLine();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    drawLine() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 基于准备好的dom，初始化echarts实例</span><br><span class=\"line\">      let myChart &#x3D; echarts.init(document.getElementById(&#39;myChart&#39;))</span><br><span class=\"line\">      &#x2F;&#x2F; 绘制图表</span><br><span class=\"line\">      myChart.setOption(&#123;</span><br><span class=\"line\">        title: &#123; text: &#39;ECharts 入门示例&#39; &#125;,</span><br><span class=\"line\">        tooltip: &#123;&#125;,</span><br><span class=\"line\">        xAxis: &#123;</span><br><span class=\"line\">          data: [&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;, &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        yAxis: &#123;&#125;,</span><br><span class=\"line\">        series: [&#123;</span><br><span class=\"line\">          name: &#39;销量&#39;,</span><br><span class=\"line\">          type: &#39;bar&#39;,</span><br><span class=\"line\">          data: [5, 20, 36, 10, 10, 20]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十三、数据状态管理\"><a href=\"#十三、数据状态管理\" class=\"headerlink\" title=\"十三、数据状态管理\"></a>十三、数据状态管理</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install vuex --save</span><br><span class=\"line\"></span><br><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">import Vuex from &#39;vuex&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十四、http服务模块\"><a href=\"#十四、http服务模块\" class=\"headerlink\" title=\"十四、http服务模块\"></a>十四、http服务模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install axios --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"十五、安装jquery\"><a href=\"#十五、安装jquery\" class=\"headerlink\" title=\"十五、安装jquery\"></a>十五、安装jquery</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install jquery --save-dev</span><br><span class=\"line\">配置webpack.base.conf.js</span><br><span class=\"line\">在module.exports中添加一段代码，</span><br><span class=\"line\">&#x2F;&#x2F; 原有代码</span><br><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">    &#39;vue$&#39;: &#39;vue&#x2F;dist&#x2F;vue.esm.js&#39;,</span><br><span class=\"line\">    &#39;@&#39;: resolve(&#39;src&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#x2F;&#x2F; 添加代码</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">    $: &quot;jquery&quot;,</span><br><span class=\"line\">    jQuery: &quot;jquery&quot;,</span><br><span class=\"line\">    jquery: &quot;jquery&quot;,</span><br><span class=\"line\">    &quot;window.jQuery&quot;: &quot;jquery&quot;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">],</span><br><span class=\"line\">&#x2F;&#x2F; 原有代码</span><br><span class=\"line\">module: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">&#x2F;&#x2F; ......</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十六、vue-amap-高德地图\"><a href=\"#十六、vue-amap-高德地图\" class=\"headerlink\" title=\"十六、vue-amap 高德地图\"></a>十六、vue-amap 高德地图</h2><p><a href=\"https://elemefe.github.io/vue-amap/#/\" target=\"_blank\" rel=\"noopener\">https://elemefe.github.io/vue-amap/#/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install vue-amap --save</span><br><span class=\"line\">$ npm install geocoder</span><br><span class=\"line\">打开webpack.base.conf.js文件，找到module.exports，在externals对象中加入一行：’AMap’: ‘AMap’</span><br><span class=\"line\">externals: &#123;</span><br><span class=\"line\">   &#39;AMap&#39;: &#39;AMap&#39;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">配置.eslintrc.js全局的AMap</span><br><span class=\"line\">globals: &#123;</span><br><span class=\"line\">    &quot;AMap&quot;:&quot;AMap&quot;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">在main.js中配置</span><br><span class=\"line\">import VueAMap from &#39;vue-amap&#39;</span><br><span class=\"line\">配置key值</span><br><span class=\"line\">VueAMap.initAMapApiLoader(&#123;</span><br><span class=\"line\">  key: &#39;a83c56afba46482fd8fba666e27231c2&#39;,</span><br><span class=\"line\">  plugin: [&#39;AMap.Autocomplete&#39;, &#39;AMap.PlaceSearch&#39;, &#39;AMap.Scale&#39;, &#39;AMap.OverView&#39;, &#39;AMap.ToolBar&#39;, &#39;AMap.MapType&#39;, &#39;AMap.PolyEditor&#39;, &#39;AMap.CircleEditor&#39;],</span><br><span class=\"line\">  &#x2F;&#x2F; 默认高德 sdk 版本为 1.4.4</span><br><span class=\"line\">  v: &#39;1.4.4&#39;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">创建一个vue文件</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;h3 class&#x3D;&quot;title&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;amap-wrapper&quot;&gt;</span><br><span class=\"line\">      &lt;el-amap class&#x3D;&quot;amap-box&quot; :vid&#x3D;&quot;&#39;amap-vue&#39;&quot;&gt;&lt;&#x2F;el-amap&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &#39;vue-amap向你问好！&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.amap-wrapper &#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 800px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十七、适配低版本\"><a href=\"#十七、适配低版本\" class=\"headerlink\" title=\"十七、适配低版本\"></a>十七、适配低版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">首先</span><br><span class=\"line\">安装babel-polyfill </span><br><span class=\"line\">$ npm install babel-polyfill --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">入口文件引用</span><br><span class=\"line\">在main.js中引用 </span><br><span class=\"line\">import &#39;babel-polyfill&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">vue-cli 配置修改</span><br><span class=\"line\">如果也是用了官方脚手架vue-cli，还需要在webpack.config.js配置文件中做各修改，用 </span><br><span class=\"line\">module.exports &#x3D; &#123; </span><br><span class=\"line\">  entry: &#123; </span><br><span class=\"line\">    app: [&quot;babel-polyfill&quot;, &quot;.&#x2F;src&#x2F;main.js&quot;] </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">替代 </span><br><span class=\"line\">module.exports &#x3D; &#123; </span><br><span class=\"line\">  entry: &#123; </span><br><span class=\"line\">    app: &#39;.&#x2F;src&#x2F;main.js&#39; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">如果有多配置可以在webpack.base.config.js修改</span><br></pre></td></tr></table></figure>\n<h2 id=\"十九、分环境打包\"><a href=\"#十九、分环境打包\" class=\"headerlink\" title=\"十九、分环境打包\"></a>十九、分环境打包</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">安装cross-env</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm i --save-dev cross-env</span><br><span class=\"line\">config文件夹下新建文件sit.env.js</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  NODE_ENV: &#39;&quot;production&quot;&#39;,</span><br><span class=\"line\">  ENV_CONFIG: &#39;&quot;sit&quot;&#39;,</span><br><span class=\"line\">  BASE_API: &#39;&quot;https:&#x2F;&#x2F;api-sit&quot;&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">修改项目package.json文件</span><br><span class=\"line\"></span><br><span class=\"line\">NODE_ENV最好都设成production，因为在utils.js只做了production一种判定，亲测不会影响各环境API参数</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;dev&quot;: &quot;webpack-dev-server --inline --progress --config build&#x2F;webpack.dev.conf.js&quot;,</span><br><span class=\"line\">  &quot;start&quot;: &quot;npm run dev&quot;,</span><br><span class=\"line\">  &quot;build&quot;: &quot;node build&#x2F;build.js&quot;,</span><br><span class=\"line\">  &quot;build:test&quot;: &quot;cross-env NODE_ENV&#x3D;production env_config&#x3D;test node build&#x2F;build.js&quot;,</span><br><span class=\"line\">  &quot;build:pre&quot;: &quot;cross-env NODE_ENV&#x3D;production env_config&#x3D;pre node build&#x2F;build.js&quot;,</span><br><span class=\"line\">  &quot;build:prod&quot;: &quot;cross-env NODE_ENV&#x3D;production env_config&#x3D;prod node build&#x2F;build.js&quot;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">修改config&#x2F;index.js文件中build参数</span><br><span class=\"line\"></span><br><span class=\"line\">这里的参数会在build&#x2F;webpackage.prod.conf.js中使用到</span><br><span class=\"line\"></span><br><span class=\"line\">build: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 添加test pre prod 三处环境的配制</span><br><span class=\"line\">    prodEnv: require(&#39;.&#x2F;prod.env&#39;),</span><br><span class=\"line\">    testEnv: require(&#39;.&#x2F;test.env&#39;),</span><br><span class=\"line\">    &#x2F;&#x2F; Template for index.html</span><br><span class=\"line\">    index: path.resolve(__dirname, &#39;..&#x2F;dist&#x2F;index.html&#39;),</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Paths</span><br><span class=\"line\">    assetsRoot: path.resolve(__dirname, &#39;..&#x2F;dist&#39;),</span><br><span class=\"line\">    assetsSubDirectory: &#39;static&#39;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">在webpackage.prod.conf.js中使用构建环境参数</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 个性env常量的定义</span><br><span class=\"line\">&#x2F;&#x2F; const env &#x3D; require(&#39;..&#x2F;config&#x2F;prod.env&#39;)</span><br><span class=\"line\">const env &#x3D; config.build[process.env.env_config+&#39;Env&#39;]</span><br><span class=\"line\"></span><br><span class=\"line\">调整build&#x2F;build.js</span><br><span class=\"line\"></span><br><span class=\"line\">删除process.env.NODE_ENV的赋值，修改spinner的定义，调整后的内容如下：</span><br><span class=\"line\"></span><br><span class=\"line\">&#39;use strict&#39;</span><br><span class=\"line\">require(&#39;.&#x2F;check-versions&#39;)()</span><br><span class=\"line\">&#x2F;&#x2F; 注释掉的代码</span><br><span class=\"line\">&#x2F;&#x2F; process.env.NODE_ENV &#x3D; &#39;production&#39;</span><br><span class=\"line\">const ora &#x3D; require(&#39;ora&#39;)</span><br><span class=\"line\">const rm &#x3D; require(&#39;rimraf&#39;)</span><br><span class=\"line\">const path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">const chalk &#x3D; require(&#39;chalk&#39;)</span><br><span class=\"line\">const webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\">const config &#x3D; require(&#39;..&#x2F;config&#39;)</span><br><span class=\"line\">const webpackConfig &#x3D; require(&#39;.&#x2F;webpack.prod.conf&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 修改spinner的定义</span><br><span class=\"line\">&#x2F;&#x2F; const spinner &#x3D; ora(&#39;building for production...&#39;)</span><br><span class=\"line\">var spinner &#x3D; ora(&#39;building for &#39; + process.env.NODE_ENV + &#39; of &#39; + process.env.env_config+ &#39; mode...&#39; )</span><br><span class=\"line\">spinner.start()</span><br><span class=\"line\">&#x2F;&#x2F;更多的其它内容，不需要做任何调整的内容 ...</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十、登录\"><a href=\"#二十、登录\" class=\"headerlink\" title=\"二十、登录\"></a>二十、登录</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">js-cookie 一个轻量的JavaScript库来处理cookie</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十二-、svg图标的使用\"><a href=\"#二十二-、svg图标的使用\" class=\"headerlink\" title=\"二十二 、svg图标的使用\"></a>二十二 、svg图标的使用</h2><p><a href=\"http://www.iconfont.cn/plus\" target=\"_blank\" rel=\"noopener\">http://www.iconfont.cn/plus</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 安装</span><br><span class=\"line\">$npm install vue-svg-icon --save-dev</span><br><span class=\"line\">2. 将svg图片放入src&#x2F;svg</span><br><span class=\"line\">这里安利一个svg图片库iconfont</span><br><span class=\"line\"></span><br><span class=\"line\">src&#x2F;svg路径暂时不可配置</span><br><span class=\"line\"></span><br><span class=\"line\">3. 在项目的main.js入口引入vue-svg-icon和需要使用的svg文件名（不需扩展名）</span><br><span class=\"line\">import Icon from &#39;vue-svg-icon&#x2F;Icon.vue&#39;;</span><br><span class=\"line\">Vue.component(&#39;icon&#39;, Icon);</span><br><span class=\"line\"></span><br><span class=\"line\">4. 在网页中使用icon标签就可以啦！</span><br><span class=\"line\">&lt;icon name&#x3D;&quot;chameleon&quot; scale&#x3D;&quot;20&quot;&gt;&lt;&#x2F;icon&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十二、mock数据\"><a href=\"#二十二、mock数据\" class=\"headerlink\" title=\"二十二、mock数据\"></a>二十二、mock数据</h2><p><a href=\"http://mockjs.com/\" target=\"_blank\" rel=\"noopener\">http://mockjs.com/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$npm install mockjs</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十一、打包\"><a href=\"#二十一、打包\" class=\"headerlink\" title=\"二十一、打包\"></a>二十一、打包</h2><p>避免出现空白页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">第一种解决方案</span><br><span class=\"line\">打开config文件夹下的index.js，build模块，修改</span><br><span class=\"line\">assetsPublicPath 的值为 assetsPublicPath: &#39;.&#x2F;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">第二种解决方案</span><br><span class=\"line\">修改build文件夹下webpack.prod.conf.js中的output模块为</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">    publicPath: &#39;.&#x2F;&#39;,</span><br><span class=\"line\">    path: config.build.assetsRoot,</span><br><span class=\"line\">    filename: utils.assetsPath(&#39;js&#x2F;[name].[chunkhash].js&#39;),</span><br><span class=\"line\">    chunkFilename: utils.assetsPath(&#39;js&#x2F;[id].[chunkhash].js&#39;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">执行$npm run build:prod</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/moqiutao/p/7496718.html\" target=\"_blank\" rel=\"noopener\" title=\"避免背景图片路径出错解决方案\">避免背景图片路径出错解决方案</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">修改build文件夹下的utils.js代码为</span><br><span class=\"line\">if (options.extract) &#123;</span><br><span class=\"line\">  return ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">    use: loaders,</span><br><span class=\"line\">    fallback: &#39;vue-style-loader&#39;,</span><br><span class=\"line\">    publicPath: &#39;..&#x2F;..&#x2F;&#39;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  return [&#39;vue-style-loader&#39;].concat(loaders)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">增加一行代码      publicPath: &#39;..&#x2F;..&#x2F;&#39;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十二-vue-cli打包文件优化工具-webpack-bundle-analyzer\"><a href=\"#二十二-vue-cli打包文件优化工具-webpack-bundle-analyzer\" class=\"headerlink\" title=\"二十二 vue cli打包文件优化工具 webpack-bundle-analyzer\"></a>二十二 vue cli打包文件优化工具 webpack-bundle-analyzer</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">在vue-cli中不需要配置  直接执行</span><br><span class=\"line\">$ npm run build --report</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">需要配置</span><br><span class=\"line\">安装webpack-bundle-analyzer插件</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm install webpack-bundle-analyzer -–save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">在build&#x2F;webpack.prod.config.js中添加配置</span><br><span class=\"line\"></span><br><span class=\"line\">if (config.build.bundleAnalyzerReport) &#123;</span><br><span class=\"line\">    const BundleAnalyzerPlugin &#x3D; require(&#39;webpack-bundle-analyzer&#39;).BundleAnalyzerPlugin;</span><br><span class=\"line\">    webpackConfig.plugins.push(new BundleAnalyzerPlugin());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">在package.json的scripts中添加配置</span><br><span class=\"line\"></span><br><span class=\"line\">“analyz”: “NODE_ENV&#x3D;production npm_config_report&#x3D;true npm run build”</span><br><span class=\"line\"></span><br><span class=\"line\">运行命令</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm run analyz</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十三-字体\"><a href=\"#二十三-字体\" class=\"headerlink\" title=\"二十三 字体\"></a>二十三 字体</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install font-awesome</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十四-404页面跳转处理\"><a href=\"#二十四-404页面跳转处理\" class=\"headerlink\" title=\"二十四 404页面跳转处理\"></a>二十四 404页面跳转处理</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">在新建文件夹 WEB-INF 下新建 web.xml 内容如下</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;web-app xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">\txmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class=\"line\">\txsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_2_5.xsd&quot;</span><br><span class=\"line\">\tid&#x3D;&quot;scplatform&quot; version&#x3D;&quot;2.5&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;display-name&gt;&#x2F;&lt;&#x2F;display-name&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;error-page&gt;</span><br><span class=\"line\">\t   &lt;error-code&gt;404&lt;&#x2F;error-code&gt;</span><br><span class=\"line\">\t   &lt;location&gt;&#x2F;index.html&lt;&#x2F;location&gt;</span><br><span class=\"line\">\t&lt;&#x2F;error-page&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;&#x2F;web-app&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">在webpack.prod.conf.js 中修改</span><br><span class=\"line\">new CopyWebpackPlugin([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    from: path.resolve(__dirname, &#39;..&#x2F;static&#39;),</span><br><span class=\"line\">    to: config.build.assetsSubDirectory,</span><br><span class=\"line\">    ignore: [&#39;.*&#39;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    from: path.resolve(__dirname, &#39;..&#x2F;WEB-INF&#39;),</span><br><span class=\"line\">    to: &#39;WEB-INF&#39;,</span><br><span class=\"line\">    ignore: [&#39;.*&#39;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n","categories":["vue"],"tags":["vue"]},{"title":"layui前言","url":"/layui%E5%89%8D%E8%A8%80/","content":"<a id=\"more\"></a>\n\n","categories":["layui"],"tags":["layui"]},{"title":"hexo-指令","url":"/hexo-%E6%8C%87%E4%BB%A4/","content":"<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 _config.yml中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-p</code>, <code>--path</code></td>\n<td>自定义新文章的路径</td>\n</tr>\n<tr>\n<td><code>-r</code>, <code>--replace</code></td>\n<td>如果存在同名文章，将其替换</td>\n</tr>\n<tr>\n<td><code>-s</code>, <code>--slug</code></td>\n<td>文章的 Slug，作为新文章的文件名和发布后的 URL</td>\n</tr>\n</tbody></table>\n<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page --path about&#x2F;me &quot;About me&quot;</span><br></pre></td></tr></table></figure>\n\n<p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p>\n<p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page --path about&#x2F;me</span><br></pre></td></tr></table></figure>\n\n<p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p>\n<h2 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a>创建新文章</h2><p>根目录命令行输入 <code>hexo new &lt;模板&gt; &lt;文章名&gt;</code>新建文章</p>\n<p>其中&lt;模板&gt;在scaffolds中，默认情况下有三个模板post、draft、page</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>功能</th>\n<th>路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>post</td>\n<td>新建文章</td>\n<td>/source/_posts/</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>新建草稿</td>\n<td>/source/_drafts/</td>\n</tr>\n<tr>\n<td>page</td>\n<td>新建页面（标签页，分类页等）</td>\n<td>/source/</td>\n</tr>\n</tbody></table>\n<p>通常情况下使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>即可，注意这里的<code>title</code>不是文章名，具体文章中显示的文章标题可以在文章文件中修改，例如：我这里新建一篇文章，title为article</p>\n<p>命令行输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$hexo new post article</span><br></pre></td></tr></table></figure>\n<p>此时在source/_posts/文件夹中多了一个article.md文件。</p>\n<h2 id=\"给文章添加分类和模板\"><a href=\"#给文章添加分类和模板\" class=\"headerlink\" title=\"给文章添加分类和模板\"></a>给文章添加分类和模板</h2><p>通过对文件头部配置信息中<code>tags</code> 与<code>categories</code>项的修改可以设置文章的标签及分类。</p>\n<p>其中标签可以按格式贴现设置多个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: Hexo博客新建文章并发布</span><br><span class=\"line\">date: 2018-12-06 12:16:12</span><br><span class=\"line\">tags:</span><br><span class=\"line\"> - Hexo</span><br><span class=\"line\"> - Markdown</span><br><span class=\"line\">categories: 搭建博客</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-d</code>, <code>--deploy</code></td>\n<td>文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td><code>-w</code>, <code>--watch</code></td>\n<td>监视文件变动</td>\n</tr>\n<tr>\n<td><code>-b</code>, <code>--bail</code></td>\n<td>生成过程中如果发生任何未处理的异常则抛出异常</td>\n</tr>\n<tr>\n<td><code>-f</code>, <code>--force</code></td>\n<td>强制重新生成文件<br>Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。<br>使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>\n</tr>\n<tr>\n<td><code>-c</code>, <code>--concurrency</code></td>\n<td>最大同时生成文件的数量，默认无限制</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-p</code>, <code>--port</code></td>\n<td>重设端口</td>\n</tr>\n<tr>\n<td><code>-s</code>, <code>--static</code></td>\n<td>只使用静态文件</td>\n</tr>\n<tr>\n<td><code>-l</code>, <code>--log</code></td>\n<td>启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody></table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-g</code>, <code>--generate</code></td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-o</code>, <code>--output</code></td>\n<td>设置输出路径</td>\n</tr>\n</tbody></table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>\n\n<p>从其他博客系统 <a href=\"https://hexo.io/zh-cn/docs/migration\" target=\"_blank\" rel=\"noopener\" title=\"迁移内容\">迁移内容</a></p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>\n\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\" target=\"_blank\" rel=\"noopener\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class=\"line\">$ hexo server --config custom.yml</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br><span class=\"line\">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>\n\n<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class=\"line\">$ hexo server --config custom.yml</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br><span class=\"line\">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>\n\n<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --draft</span><br></pre></td></tr></table></figure>\n\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure>\n\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n","categories":["hexo"],"tags":["hexo"]},{"title":"Hexo 的 Next 主题优化一","url":"/Hexo-%E7%9A%84-Next-%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E4%B8%80/","content":"<a id=\"more\"></a>\n\n","categories":["hexo"],"tags":["hexo"]},{"title":"用Hexo和GitHub Pages 搭建博客","url":"/%E7%94%A8Hexo%E5%92%8CGitHub-Pages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","content":"<p><strong>声明：转载</strong><a href=\"https://ryanluoxu.github.io/2017/11/24/用-Hexo-和-GitHub-Pages-搭建博客/\" target=\"_blank\" rel=\"noopener\" title=\"Ryan Luo Xu 罗旭\">https://ryanluoxu.github.io/2017/11/24/用-Hexo-和-GitHub-Pages-搭建博客/</a></p>\n<p>搭建这个博客走了许多弯路。在这里分享总结之后的思路和简化步骤。</p>\n<ul>\n<li>Github Pages</li>\n<li>Hexo 博客框架</li>\n<li>部署</li>\n<li>Next 主题</li>\n</ul>\n<a id=\"more\"></a>\n\n\n<h2 id=\"Github-Pages\"><a href=\"#Github-Pages\" class=\"headerlink\" title=\"Github Pages\"></a>Github Pages</h2><p>Github Pages 其实本身就是 Github 提供的博客服务。 我们在 Github 中创建一个特定格式的 Repository，Github Pages 就会将里面的信息生成一个网页，展示出来。</p>\n<p><strong>操作如下：</strong></p>\n<ol>\n<li>注册 Github 账号，然后在 Github 中创建一个以 .github.io 结尾的 Repository。<ol>\n<li>Repository name: xxx.github.io</li>\n<li>勾选 Initialize this repository with a README</li>\n<li>Create repository</li>\n</ol>\n</li>\n<li>简单地编辑一下 README.md 这个文档。 比如添加：I am trying to create my own blog.. 保存(Commit changes)。</li>\n<li>打开网页：xxx.github.io 这里就可以看到 README.md 里的内容了。</li>\n</ol>\n<p>如果没有太多的要求，其实直接用 README.md 来写博客也是不错的。</p>\n<p>这个生成好的 Repository 就是用来存放博客内容的地方，也只有这个仓库里的内容，才会被 xxx.github.io 这个网页显示出来。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>Hexo 是一个博客框架。它把本地文件里的信息生成一个网页。如果不需要放在网上给别人看，就没 Github Pages 什么事了。</p>\n<p>使用 Hexo 之前，需要先安装 Node.js 和 Git。</p>\n<p><strong>操作如下：</strong></p>\n<ol>\n<li><p>安装 Node.js</p>\n<ul>\n<li><p>前往<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\" title=\"node官网\">https://nodejs.org/en/</a></p>\n</li>\n<li><p>点击 8.9.1 LTS 下载</p>\n</li>\n<li><p>安装</p>\n</li>\n<li><p>打开 Command Prompt， 输入 node -v</p>\n</li>\n<li><p>得到：v8.9.1</p>\n<p>安装成功</p>\n</li>\n</ul>\n</li>\n<li><p>安装 Git</p>\n<ul>\n<li><p>前往 <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n</li>\n<li><p>点击 Downloads</p>\n</li>\n<li><p>点击 Windows</p>\n</li>\n<li><p>一般情况，下载会自动开始。如果没有，就点击 click here to download manually</p>\n</li>\n<li><p>安装</p>\n</li>\n<li><p>打开 Command Prompt， 输入 git –version</p>\n</li>\n<li><p>得到：git version 2.15.0.windows.1</p>\n<p>安装成功</p>\n<p>额外说明：如果 Git –version 指令不管用，可能需要到 Environment Variable 那里添加 Path。</p>\n</li>\n</ul>\n</li>\n<li><p>安装 Hexo</p>\n<ul>\n<li><p>打开 Command Prompt</p>\n</li>\n<li><p>输入 npm install -g hexo-cli</p>\n</li>\n<li><p>回车开始安装</p>\n</li>\n<li><p>输入 hexo -v</p>\n</li>\n<li><p>得到 hexo-cli: 1.0.4 等一串数据</p>\n<p>安装成功</p>\n</li>\n</ul>\n</li>\n<li><p>创建本地博客</p>\n<ul>\n<li><p>在D盘下创建文件夹 blog</p>\n</li>\n<li><p>鼠标右键 blog，选择 Git Bash Here。 如果没有安装 Git，就不会有这个选项。</p>\n</li>\n<li><p>Git Bash 打开之后，所在的位置就是 blog 这个文件夹的位置。（/d/blog）</p>\n</li>\n<li><p>输入 hexo init 将 blog 文件夹初始化成一个博客文件夹。</p>\n</li>\n<li><p>输入 npm install 安装依赖包。</p>\n</li>\n<li><p>输入 hexo g 生成（generate）网页。 由于我们还没创建任何博客，生成的网页会展示 Hexo 里面自带了一个 Hello World 的博客。</p>\n</li>\n<li><p>输入 hexo s 将生成的网页放在了本地服务器（server）。</p>\n</li>\n<li><p>浏览器里输入 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 。 就可以看到刚才的成果了。</p>\n</li>\n<li><p>回到 Git Bash，按 Ctrl+C 结束。</p>\n<p>此时再看 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 就是无法访问了。</p>\n</li>\n</ul>\n</li>\n<li><p>发布一篇博客</p>\n<ul>\n<li>继续在 Git Bash 里，所在路径还是 /d/blog。输入 hexo new “My First Post”</li>\n<li>在 D:\\blog\\source_posts 路径下，会有一个 My-First-Post.md 的文件。 编辑这个文件，然后保存。</li>\n<li>回到 Git Bash，输入 hexo g</li>\n<li>输入 hexo s</li>\n<li>前往 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 查看成果。</li>\n<li>回到 Git Bash，按 Ctrl+C 结束。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"将本地-Hexo-博客部署在-Github-上\"><a href=\"#将本地-Hexo-博客部署在-Github-上\" class=\"headerlink\" title=\"将本地 Hexo 博客部署在 Github 上\"></a>将本地 Hexo 博客部署在 Github 上</h2><p>前面两个部分，我们已经有了本地博客，和一个能托管这些资料的线上仓库。只要把本地博客部署（deploy）在我们的 Github 对应的 Repository 就可以了。</p>\n<p><strong>操作如下：</strong></p>\n<ol>\n<li><p>获取 Github 对应的 Repository 的链接。</p>\n<ul>\n<li><p>登陆 Github，进入到 ryanluoxu.github.io</p>\n</li>\n<li><p>点击 Clone or download</p>\n</li>\n<li><p>复制 URL 待用</p>\n<p>我的是 <a href=\"https://github.com/xxx/xxx.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/xxx/xxx.github.io.git</a></p>\n</li>\n</ul>\n</li>\n<li><p>修改博客的配置文件</p>\n<ul>\n<li><p>打开配置文件 /d/blog/_config.yml （使用 bash 里的 vi 或者 notepad++）</p>\n</li>\n<li><p>找到 #Deployment，填入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:  </span><br><span class=\"line\">      type: git  </span><br><span class=\"line\">      repository: https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.github.io.git  </span><br><span class=\"line\">      branch: master</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:  </span><br><span class=\"line\">      type: git  </span><br><span class=\"line\">      repository: git@github.com:xxx&#x2F;xxx.github.io.git  </span><br><span class=\"line\">      branch: master</span><br></pre></td></tr></table></figure>\n<p>https模式每次部署需要输入账号和密码，git模式的不需要</p>\n</li>\n</ul>\n</li>\n<li><p>部署</p>\n<ul>\n<li><p>回到 Git Bash</p>\n</li>\n<li><p>输入 npm install hexo-deployer-git –save 安装 hexo-deployer-git 此步骤只需要做一次。</p>\n</li>\n<li><p>输入 hexo d</p>\n</li>\n<li><p>得到 INFO Deploy done: git 即为部署成功</p>\n<p>之前我们创建的 ReadMe.md 会被自动覆盖掉。</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>查看成果</p>\n<p> 前往 xxx.github.io 即可。</p>\n</li>\n</ol>\n<h2 id=\"使用-Next-主题\"><a href=\"#使用-Next-主题\" class=\"headerlink\" title=\"使用 Next 主题\"></a>使用 Next 主题</h2><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\" title=\"查看更多主题\">https://hexo.io/themes/</a></p>\n<p>这里以 Next 为例。 大概思路就是把整个主题的文件克隆到我们的主题文件夹中。在配置文件中注明使用该主题。</p>\n<p><strong>操作如下：</strong></p>\n<ol>\n<li><p>还是回到 Git Bash。 输入 git clone <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">https://github.com/iissnan/hexo-theme-next</a> themes/next</p>\n<p> 这样，该主题的文件就全部克隆到 D:\\blog\\themes\\next 下面。</p>\n</li>\n<li><p>修改博客配置文件</p>\n<ul>\n<li><p>打开 D:\\blog_config.yml</p>\n</li>\n<li><p>找到 theme:</p>\n</li>\n<li><p>把 Hexo 默认的 lanscape 修改成 next。 即 theme: next</p>\n</li>\n<li><p>找到 # Site，添加博客名称，作者名字等。</p>\n</li>\n<li><p>在 language 后面填入 en 或者 zh-Hans，选择英文或者中文。</p>\n</li>\n<li><p>找到 # URL, 填入 url。比如 url: <a href=\"https://xxx.github.io\" target=\"_blank\" rel=\"noopener\">https://xxx.github.io</a></p>\n<p>填入名字后会有很风骚的 © 2017 xxx 的字样出现在博客底部。</p>\n</li>\n</ul>\n</li>\n<li><p>重新生成部署即可</p>\n<ul>\n<li><p>回到 Git Bash。输入 hexo g -d就可以了。</p>\n<p>先把修改的内容生成网页，再部署。</p>\n</li>\n</ul>\n</li>\n<li><p>查看成果</p>\n<p> 前往 xxx.github.io 即可。</p>\n</li>\n</ol>\n","categories":["hexo"],"tags":["hexo"]},{"title":"Hello World","url":"/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":["hexo"],"tags":["hexo"]}]