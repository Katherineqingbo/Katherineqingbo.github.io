[{"title":"layui前言","url":"/layui%E5%89%8D%E8%A8%80/","content":"","categories":["layui"],"tags":["layui"]},{"title":"hexo-指令","url":"/hexo-%E6%8C%87%E4%BB%A4/","content":"<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 _config.yml中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-p</code>, <code>--path</code></td>\n<td>自定义新文章的路径</td>\n</tr>\n<tr>\n<td><code>-r</code>, <code>--replace</code></td>\n<td>如果存在同名文章，将其替换</td>\n</tr>\n<tr>\n<td><code>-s</code>, <code>--slug</code></td>\n<td>文章的 Slug，作为新文章的文件名和发布后的 URL</td>\n</tr>\n</tbody></table>\n<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page --path about&#x2F;me &quot;About me&quot;</span><br></pre></td></tr></table></figure>\n\n<p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p>\n<p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page --path about&#x2F;me</span><br></pre></td></tr></table></figure>\n\n<p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p>\n<h2 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a>创建新文章</h2><p>根目录命令行输入 <code>hexo new &lt;模板&gt; &lt;文章名&gt;</code>新建文章</p>\n<p>其中&lt;模板&gt;在scaffolds中，默认情况下有三个模板post、draft、page</p>\n<p>| 参数  | 功能                      | 路径             |<br>​| —– | ———————— | —————- |<br>| post  | 新建文章                  | /source/_posts/  |<br>| draft | 新建草稿                  | /source/_drafts/ |<br>| page  | 新建页面（标签页，分类页等）| /source/         |</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>功能</th>\n<th>路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>post</td>\n<td>新建文章</td>\n<td>/source/_posts/</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>新建草稿</td>\n<td>/source/_drafts/</td>\n</tr>\n<tr>\n<td>page</td>\n<td>新建页面（标签页，分类页等）</td>\n<td>/source/</td>\n</tr>\n</tbody></table>\n<p>通常情况下使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>即可，注意这里的<code>title</code>不是文章名，具体文章中显示的文章标题可以在文章文件中修改，例如：我这里新建一篇文章，title为article</p>\n<p>命令行输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$hexo new post article</span><br></pre></td></tr></table></figure>\n<p>此时在source/_posts/文件夹中多了一个article.md文件。</p>\n<h2 id=\"给文章添加分类和模板\"><a href=\"#给文章添加分类和模板\" class=\"headerlink\" title=\"给文章添加分类和模板\"></a>给文章添加分类和模板</h2><p>通过对文件头部配置信息中<code>tags</code> 与<code>categories</code>项的修改可以设置文章的标签及分类。</p>\n<p>其中标签可以按格式贴现设置多个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: Hexo博客新建文章并发布</span><br><span class=\"line\">date: 2018-12-06 12:16:12</span><br><span class=\"line\">tags:</span><br><span class=\"line\"> - Hexo</span><br><span class=\"line\"> - Markdown</span><br><span class=\"line\">categories: 搭建博客</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-d</code>, <code>--deploy</code></td>\n<td>文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td><code>-w</code>, <code>--watch</code></td>\n<td>监视文件变动</td>\n</tr>\n<tr>\n<td><code>-b</code>, <code>--bail</code></td>\n<td>生成过程中如果发生任何未处理的异常则抛出异常</td>\n</tr>\n<tr>\n<td><code>-f</code>, <code>--force</code></td>\n<td>强制重新生成文件<br>Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。<br>使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>\n</tr>\n<tr>\n<td><code>-c</code>, <code>--concurrency</code></td>\n<td>最大同时生成文件的数量，默认无限制</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-p</code>, <code>--port</code></td>\n<td>重设端口</td>\n</tr>\n<tr>\n<td><code>-s</code>, <code>--static</code></td>\n<td>只使用静态文件</td>\n</tr>\n<tr>\n<td><code>-l</code>, <code>--log</code></td>\n<td>启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody></table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-g</code>, <code>--generate</code></td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-o</code>, <code>--output</code></td>\n<td>设置输出路径</td>\n</tr>\n</tbody></table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>\n\n<p>从其他博客系统 <a href=\"https://hexo.io/zh-cn/docs/migration\" target=\"_blank\" rel=\"noopener\" title=\"迁移内容\">迁移内容</a></p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>\n\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\" target=\"_blank\" rel=\"noopener\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class=\"line\">$ hexo server --config custom.yml</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br><span class=\"line\">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>\n\n<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class=\"line\">$ hexo server --config custom.yml</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br><span class=\"line\">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>\n\n<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --draft</span><br></pre></td></tr></table></figure>\n\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure>\n\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n","categories":["hexo"],"tags":["hexo"]},{"title":"Hexo 的 Next 主题优化一","url":"/Hexo-%E7%9A%84-Next-%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E4%B8%80/","content":"","categories":["hexo"],"tags":["hexo"]},{"title":"用Hexo和GitHub Pages 搭建博客","url":"/%E7%94%A8Hexo%E5%92%8CGitHub-Pages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","content":"<p><strong>声明：转载</strong><a href=\"https://ryanluoxu.github.io/2017/11/24/用-Hexo-和-GitHub-Pages-搭建博客/\" target=\"_blank\" rel=\"noopener\" title=\"Ryan Luo Xu 罗旭\">https://ryanluoxu.github.io/2017/11/24/用-Hexo-和-GitHub-Pages-搭建博客/</a></p>\n<p>搭建这个博客走了许多弯路。在这里分享总结之后的思路和简化步骤。</p>\n<ul>\n<li>Github Pages</li>\n<li>Hexo 博客框架</li>\n<li>部署</li>\n<li>Next 主题</li>\n</ul>\n<h2 id=\"Github-Pages\"><a href=\"#Github-Pages\" class=\"headerlink\" title=\"Github Pages\"></a>Github Pages</h2><p>Github Pages 其实本身就是 Github 提供的博客服务。 我们在 Github 中创建一个特定格式的 Repository，Github Pages 就会将里面的信息生成一个网页，展示出来。</p>\n<p><strong>操作如下：</strong></p>\n<ol>\n<li>注册 Github 账号，然后在 Github 中创建一个以 .github.io 结尾的 Repository。<ol>\n<li>Repository name: xxx.github.io</li>\n<li>勾选 Initialize this repository with a README</li>\n<li>Create repository</li>\n</ol>\n</li>\n<li>简单地编辑一下 README.md 这个文档。 比如添加：I am trying to create my own blog.. 保存(Commit changes)。</li>\n<li>打开网页：xxx.github.io 这里就可以看到 README.md 里的内容了。</li>\n</ol>\n<p>如果没有太多的要求，其实直接用 README.md 来写博客也是不错的。</p>\n<p>这个生成好的 Repository 就是用来存放博客内容的地方，也只有这个仓库里的内容，才会被 xxx.github.io 这个网页显示出来。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>Hexo 是一个博客框架。它把本地文件里的信息生成一个网页。如果不需要放在网上给别人看，就没 Github Pages 什么事了。</p>\n<p>使用 Hexo 之前，需要先安装 Node.js 和 Git。</p>\n<p><strong>操作如下：</strong></p>\n<ol>\n<li><p>安装 Node.js</p>\n<ul>\n<li><p>前往<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\" title=\"node官网\">https://nodejs.org/en/</a></p>\n</li>\n<li><p>点击 8.9.1 LTS 下载</p>\n</li>\n<li><p>安装</p>\n</li>\n<li><p>打开 Command Prompt， 输入 node -v</p>\n</li>\n<li><p>得到：v8.9.1</p>\n<p>安装成功</p>\n</li>\n</ul>\n</li>\n<li><p>安装 Git</p>\n<ul>\n<li><p>前往 <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n</li>\n<li><p>点击 Downloads</p>\n</li>\n<li><p>点击 Windows</p>\n</li>\n<li><p>一般情况，下载会自动开始。如果没有，就点击 click here to download manually</p>\n</li>\n<li><p>安装</p>\n</li>\n<li><p>打开 Command Prompt， 输入 git –version</p>\n</li>\n<li><p>得到：git version 2.15.0.windows.1</p>\n<p>安装成功</p>\n<p>额外说明：如果 Git –version 指令不管用，可能需要到 Environment Variable 那里添加 Path。</p>\n</li>\n</ul>\n</li>\n<li><p>安装 Hexo</p>\n<ul>\n<li><p>打开 Command Prompt</p>\n</li>\n<li><p>输入 npm install -g hexo-cli</p>\n</li>\n<li><p>回车开始安装</p>\n</li>\n<li><p>输入 hexo -v</p>\n</li>\n<li><p>得到 hexo-cli: 1.0.4 等一串数据</p>\n<p>安装成功</p>\n</li>\n</ul>\n</li>\n<li><p>创建本地博客</p>\n<ul>\n<li><p>在D盘下创建文件夹 blog</p>\n</li>\n<li><p>鼠标右键 blog，选择 Git Bash Here。 如果没有安装 Git，就不会有这个选项。</p>\n</li>\n<li><p>Git Bash 打开之后，所在的位置就是 blog 这个文件夹的位置。（/d/blog）</p>\n</li>\n<li><p>输入 hexo init 将 blog 文件夹初始化成一个博客文件夹。</p>\n</li>\n<li><p>输入 npm install 安装依赖包。</p>\n</li>\n<li><p>输入 hexo g 生成（generate）网页。 由于我们还没创建任何博客，生成的网页会展示 Hexo 里面自带了一个 Hello World 的博客。</p>\n</li>\n<li><p>输入 hexo s 将生成的网页放在了本地服务器（server）。</p>\n</li>\n<li><p>浏览器里输入 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 。 就可以看到刚才的成果了。</p>\n</li>\n<li><p>回到 Git Bash，按 Ctrl+C 结束。</p>\n<p>此时再看 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 就是无法访问了。</p>\n</li>\n</ul>\n</li>\n<li><p>发布一篇博客</p>\n<ul>\n<li>继续在 Git Bash 里，所在路径还是 /d/blog。输入 hexo new “My First Post”</li>\n<li>在 D:\\blog\\source_posts 路径下，会有一个 My-First-Post.md 的文件。 编辑这个文件，然后保存。</li>\n<li>回到 Git Bash，输入 hexo g</li>\n<li>输入 hexo s</li>\n<li>前往 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 查看成果。</li>\n<li>回到 Git Bash，按 Ctrl+C 结束。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"将本地-Hexo-博客部署在-Github-上\"><a href=\"#将本地-Hexo-博客部署在-Github-上\" class=\"headerlink\" title=\"将本地 Hexo 博客部署在 Github 上\"></a>将本地 Hexo 博客部署在 Github 上</h2><p>前面两个部分，我们已经有了本地博客，和一个能托管这些资料的线上仓库。只要把本地博客部署（deploy）在我们的 Github 对应的 Repository 就可以了。</p>\n<p><strong>操作如下：</strong></p>\n<ol>\n<li><p>获取 Github 对应的 Repository 的链接。</p>\n<ul>\n<li><p>登陆 Github，进入到 ryanluoxu.github.io</p>\n</li>\n<li><p>点击 Clone or download</p>\n</li>\n<li><p>复制 URL 待用</p>\n<p>我的是 <a href=\"https://github.com/xxx/xxx.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/xxx/xxx.github.io.git</a></p>\n</li>\n</ul>\n</li>\n<li><p>修改博客的配置文件</p>\n<ul>\n<li><p>打开配置文件 /d/blog/_config.yml （使用 bash 里的 vi 或者 notepad++）</p>\n</li>\n<li><p>找到 #Deployment，填入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:  </span><br><span class=\"line\">      type: git  </span><br><span class=\"line\">      repository: https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.github.io.git  </span><br><span class=\"line\">      branch: master</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:  </span><br><span class=\"line\">      type: git  </span><br><span class=\"line\">      repository: git@github.com:xxx&#x2F;xxx.github.io.git  </span><br><span class=\"line\">      branch: master</span><br></pre></td></tr></table></figure>\n<p>https模式每次部署需要输入账号和密码，git模式的不需要</p>\n</li>\n</ul>\n</li>\n<li><p>部署</p>\n<ul>\n<li><p>回到 Git Bash</p>\n</li>\n<li><p>输入 npm install hexo-deployer-git –save 安装 hexo-deployer-git 此步骤只需要做一次。</p>\n</li>\n<li><p>输入 hexo d</p>\n</li>\n<li><p>得到 INFO Deploy done: git 即为部署成功</p>\n<p>之前我们创建的 ReadMe.md 会被自动覆盖掉。</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>查看成果</p>\n<p> 前往 xxx.github.io 即可。</p>\n</li>\n</ol>\n<h2 id=\"使用-Next-主题\"><a href=\"#使用-Next-主题\" class=\"headerlink\" title=\"使用 Next 主题\"></a>使用 Next 主题</h2><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\" title=\"查看更多主题\">https://hexo.io/themes/</a></p>\n<p>这里以 Next 为例。 大概思路就是把整个主题的文件克隆到我们的主题文件夹中。在配置文件中注明使用该主题。</p>\n<p><strong>操作如下：</strong></p>\n<ol>\n<li><p>还是回到 Git Bash。 输入 git clone <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">https://github.com/iissnan/hexo-theme-next</a> themes/next</p>\n<p> 这样，该主题的文件就全部克隆到 D:\\blog\\themes\\next 下面。</p>\n</li>\n<li><p>修改博客配置文件</p>\n<ul>\n<li><p>打开 D:\\blog_config.yml</p>\n</li>\n<li><p>找到 theme:</p>\n</li>\n<li><p>把 Hexo 默认的 lanscape 修改成 next。 即 theme: next</p>\n</li>\n<li><p>找到 # Site，添加博客名称，作者名字等。</p>\n</li>\n<li><p>在 language 后面填入 en 或者 zh-Hans，选择英文或者中文。</p>\n</li>\n<li><p>找到 # URL, 填入 url。比如 url: <a href=\"https://xxx.github.io\" target=\"_blank\" rel=\"noopener\">https://xxx.github.io</a></p>\n<p>填入名字后会有很风骚的 © 2017 xxx 的字样出现在博客底部。</p>\n</li>\n</ul>\n</li>\n<li><p>重新生成部署即可</p>\n<ul>\n<li><p>回到 Git Bash。输入 hexo g -d就可以了。</p>\n<p>先把修改的内容生成网页，再部署。</p>\n</li>\n</ul>\n</li>\n<li><p>查看成果</p>\n<p> 前往 xxx.github.io 即可。</p>\n</li>\n</ol>\n","categories":["hexo"],"tags":["hexo"]},{"title":"Hello World","url":"/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":["hexo"],"tags":["hexo"]}]