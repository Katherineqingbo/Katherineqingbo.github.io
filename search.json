[{"title":"layui前言","url":"/layui前言/","tags":["layui"],"categories":["layui"]},{"title":"hexo-指令","url":"/hexo-指令/","content":"\n## init ##\n\n```\n$ hexo init [folder]\n```\n\n新建一个网站。如果没有设置 `folder` ，Hexo 默认在目前的文件夹建立网站。\n\n## new ##\n\n```\n$ hexo new [layout] <title>\n```\n\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 _config.yml中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n```\n$ hexo new \"post title with whitespace\"\n```\n\n| 参数              | 描述                                          |\n| ----------------- | --------------------------------------------- |\n| `-p`, `--path`    | 自定义新文章的路径                            |\n| `-r`, `--replace` | 如果存在同名文章，将其替换                    |\n| `-s`, `--slug`    | 文章的 Slug，作为新文章的文件名和发布后的 URL |\n\n默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 `index.md` 文件。你可以使用 `--path` 参数来覆盖上述行为、自行决定文件的目录：\n\n```\nhexo new page --path about/me \"About me\"\n```\n\n以上命令会创建一个 `source/about/me.md` 文件，同时 Front Matter 中的 title 为 `\"About me\"`\n\n注意！title 是必须指定的！如果你这么做并不能达到你的目的：\n\n```\nhexo new page --path about/me\n```\n\n此时 Hexo 会创建 `source/_posts/about/me.md`，同时 `me.md` 的 Front Matter 中的 title 为 `\"page\"`。这是因为在上述命令中，hexo-cli 将 `page` 视为指定文章的标题、并采用默认的 `layout`。\n\n## 创建新文章 ##\n\n根目录命令行输入 `hexo new <模板> <文章名>`新建文章\n\n其中<模板>在scaffolds中，默认情况下有三个模板post、draft、page\n\n| 参数  | 功能                           | 路径  |\n| ----- | ------------------------------ | ----- |\n| post  | 新建文章                        | /source/_posts/  |\n| draft | 新建草稿                        | /source/_drafts/ |\n| page  | 新建页面（标签页，分类页等）      | /source/ |\n\n通常情况下使用\n\n```\nhexo new post <title>\n```\n\n即可，注意这里的`title`不是文章名，具体文章中显示的文章标题可以在文章文件中修改，例如：我这里新建一篇文章，title为article\n\n命令行输入\n```\n$hexo new post article\n```\n此时在source/_posts/文件夹中多了一个article.md文件。\n\n## 给文章添加分类和模板 ##\n\n通过对文件头部配置信息中`tags` 与`categories`项的修改可以设置文章的标签及分类。\n\n其中标签可以按格式贴现设置多个：\n\n```\ntitle: Hexo博客新建文章并发布\ndate: 2018-12-06 12:16:12\ntags:\n - Hexo\n - Markdown\ncategories: 搭建博客\n```\n\n## generate ##\n\n```\n$ hexo generate\n```\n\n生成静态文件。\n\n| 选项                  | 描述                                                         |\n| --------------------- | ------------------------------------------------------------ |\n| `-d`, `--deploy`      | 文件生成后立即部署网站                                       |\n| `-w`, `--watch`       | 监视文件变动                                                 |\n| `-b`, `--bail`        | 生成过程中如果发生任何未处理的异常则抛出异常                 |\n| `-f`, `--force`       | 强制重新生成文件<br>Hexo 引入了差分机制，如果 `public` 目录存在，那么 `hexo g` 只会重新生成改动的文件。<br>使用该参数的效果接近 `hexo clean && hexo generate` |\n| `-c`, `--concurrency` | 最大同时生成文件的数量，默认无限制                           |\n\n该命令可以简写为\n\n```\n$ hexo g\n```\n\n## publish ##\n\n```\n$ hexo publish [layout] <filename>\n```\n\n发表草稿。\n\n## server ##\n\n```\n$ hexo server\n```\n\n启动服务器。默认情况下，访问网址为： `http://localhost:4000/`。\n\n| 选项             | 描述                           |\n| ---------------- | ------------------------------ |\n| `-p`, `--port`   | 重设端口                       |\n| `-s`, `--static` | 只使用静态文件                 |\n| `-l`, `--log`    | 启动日记记录，使用覆盖记录格式 |\n\n## deploy ##\n\n```\n$ hexo deploy\n```\n\n部署网站。\n\n| 参数               | 描述                     |\n| ------------------ | ------------------------ |\n| `-g`, `--generate` | 部署之前预先生成静态文件 |\n\n该命令可以简写为：\n\n```\n$ hexo d\n```\n\n## render ##\n\n```\n$ hexo render <file1> [file2] ...\n```\n\n渲染文件。\n\n| 参数             | 描述         |\n| ---------------- | ------------ |\n| `-o`, `--output` | 设置输出路径 |\n\n## migrate ##\n\n```\n$ hexo migrate <type>\n```\n\n从其他博客系统 [迁移内容](https://hexo.io/zh-cn/docs/migration \"迁移内容\")\n\n## clean ##\n\n```\n$ hexo clean\n```\n\n清除缓存文件 (`db.json`) 和已生成的静态文件 (`public`)。\n\n在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n\n## list ##\n\n```\n$ hexo list <type>\n```\n\n列出网站资料。\n\n## version ##\n\n```\n$ hexo version\n```\n\n显示 Hexo 版本。\n\n## 选项 ##\n\n### 安全模式 ###\n\n```\n$ hexo --safe\n```\n\n在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。\n\n### 调试模式 ###\n\n```\n$ hexo --debug\n```\n\n在终端中显示调试信息并记录到 `debug.log`。当您碰到问题时，可以尝试用调试模式重新执行一次，并 [提交调试信息到 GitHub](https://github.com/hexojs/hexo/issues/new)。\n\n### 简洁模式 ###\n\n```\n$ hexo --silent\n```\n\n隐藏终端信息。\n\n### 自定义配置文件的路径 ###\n\n```\n# 使用 custom.yml 代替默认的 _config.yml\n$ hexo server --config custom.yml\n\n# 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高\n$ hexo generate --config custom.yml,custom2.json,custom3.yml\n```\n\n自定义配置文件的路径，指定这个参数后将不再使用默认的 `_config.yml`。\n你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：\n\n```\n# 使用 custom.yml 代替默认的 _config.yml\n$ hexo server --config custom.yml\n\n# 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json\n$ hexo generate --config custom.yml,custom2.json,custom3.yml\n```\n\n当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 `_multiconfig.yml`。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。\n\n### 显示草稿 ###\n\n```\n$ hexo --draft\n```\n\n显示 `source/_drafts` 文件夹中的草稿文章。\n\n### 自定义 CWD ###\n\n```\n$ hexo --cwd /path/to/cwd\n```\n\n自定义当前工作目录（Current working directory）的路径。\n\n","tags":["hexo"],"categories":["hexo"]},{"title":"Hexo 的 Next 主题优化一","url":"/Hexo-的-Next-主题优化一/","tags":["hexo"],"categories":["hexo"]},{"title":"用Hexo和GitHub Pages 搭建博客","url":"/用Hexo和GitHub-Pages-搭建博客/","content":"**声明：转载**[https://ryanluoxu.github.io/2017/11/24/用-Hexo-和-GitHub-Pages-搭建博客/](https://ryanluoxu.github.io/2017/11/24/用-Hexo-和-GitHub-Pages-搭建博客/ \"Ryan Luo Xu 罗旭\")\n\n搭建这个博客走了许多弯路。在这里分享总结之后的思路和简化步骤。\n\n  - Github Pages\n  - Hexo 博客框架\n  - 部署\n  - Next 主题\n\n## Github Pages ##\nGithub Pages 其实本身就是 Github 提供的博客服务。 我们在 Github 中创建一个特定格式的 Repository，Github Pages 就会将里面的信息生成一个网页，展示出来。\n\n**操作如下：**\n\n  1. 注册 Github 账号，然后在 Github 中创建一个以 .github.io 结尾的 Repository。\n\t1. Repository name: xxx.github.io\n\t2. 勾选 Initialize this repository with a README\n\t3. Create repository\n  2. 简单地编辑一下 README.md 这个文档。 比如添加：I am trying to create my own blog.. 保存(Commit changes)。\n  3. 打开网页：xxx.github.io 这里就可以看到 README.md 里的内容了。\n  \n如果没有太多的要求，其实直接用 README.md 来写博客也是不错的。\n\n这个生成好的 Repository 就是用来存放博客内容的地方，也只有这个仓库里的内容，才会被 xxx.github.io 这个网页显示出来。\n\n## Hexo ##\nHexo 是一个博客框架。它把本地文件里的信息生成一个网页。如果不需要放在网上给别人看，就没 Github Pages 什么事了。\n\n使用 Hexo 之前，需要先安装 Node.js 和 Git。\n\n**操作如下：**\n\n1. 安装 Node.js\n\t\n\t- 前往[https://nodejs.org/en/](https://nodejs.org/en/ \"node官网\")\n\t- 点击 8.9.1 LTS 下载\n\t- 安装\n\t- 打开 Command Prompt， 输入 node -v\n\t- 得到：v8.9.1\n\t\n\t安装成功\n\n2. 安装 Git\n\n\t- 前往 [https://git-scm.com/](https://git-scm.com/)\n\t- 点击 Downloads\n\t- 点击 Windows\n\t- 一般情况，下载会自动开始。如果没有，就点击 click here to download manually\n\t- 安装\n\t- 打开 Command Prompt， 输入 git --version\n\t- 得到：git version 2.15.0.windows.1\n\t\n\t安装成功\n\t\n\t额外说明：如果 Git –version 指令不管用，可能需要到 Environment Variable 那里添加 Path。\n\n3. 安装 Hexo\n\n\t- 打开 Command Prompt\n\t- 输入 npm install -g hexo-cli\n\t- 回车开始安装\n\t- 输入 hexo -v\n\t- 得到 hexo-cli: 1.0.4 等一串数据\n\n\t安装成功\n\n4. 创建本地博客\n\n\t- 在D盘下创建文件夹 blog\n\t- 鼠标右键 blog，选择 Git Bash Here。 如果没有安装 Git，就不会有这个选项。\n\t- Git Bash 打开之后，所在的位置就是 blog 这个文件夹的位置。（/d/blog）\n\t- 输入 hexo init 将 blog 文件夹初始化成一个博客文件夹。\n\t- 输入 npm install 安装依赖包。\n\t- 输入 hexo g 生成（generate）网页。 由于我们还没创建任何博客，生成的网页会展示 Hexo 里面自带了一个 Hello World 的博客。\n\t- 输入 hexo s 将生成的网页放在了本地服务器（server）。\n\t- 浏览器里输入 http://localhost:4000/ 。 就可以看到刚才的成果了。\n\t- 回到 Git Bash，按 Ctrl+C 结束。\n\n\t此时再看 http://localhost:4000/ 就是无法访问了。\n\n5. 发布一篇博客\n\n\t- 继续在 Git Bash 里，所在路径还是 /d/blog。输入 hexo new \"My First Post\"\n\t- 在 D:\\blog\\source_posts 路径下，会有一个 My-First-Post.md 的文件。 编辑这个文件，然后保存。\n\t- 回到 Git Bash，输入 hexo g\n\t- 输入 hexo s\n\t- 前往 http://localhost:4000/ 查看成果。\n\t- 回到 Git Bash，按 Ctrl+C 结束。\n\t\n## 将本地 Hexo 博客部署在 Github 上 ##\n前面两个部分，我们已经有了本地博客，和一个能托管这些资料的线上仓库。只要把本地博客部署（deploy）在我们的 Github 对应的 Repository 就可以了。\n\n**操作如下：**\n\n1. 获取 Github 对应的 Repository 的链接。\n\n\t- 登陆 Github，进入到 ryanluoxu.github.io\n\t- 点击 Clone or download\n\t- 复制 URL 待用\n\n\t我的是 https://github.com/xxx/xxx.github.io.git\n\n2. 修改博客的配置文件\n\n\t- 打开配置文件 /d/blog/_config.yml （使用 bash 里的 vi 或者 notepad++）\n\t- 找到 #Deployment，填入以下内容：\n\t\n\t```\n\tdeploy:  \n\t      type: git  \n\t      repository: https://github.com/xxx/xxx.github.io.git  \n\t      branch: master\n\t```\n\t或\n\t```\n\tdeploy:  \n\t      type: git  \n\t      repository: git@github.com:xxx/xxx.github.io.git  \n\t      branch: master\n\t```\n\thttps模式每次部署需要输入账号和密码，git模式的不需要\n\n3. 部署\n\t\n\t- 回到 Git Bash\n\t- 输入 npm install hexo-deployer-git --save 安装 hexo-deployer-git 此步骤只需要做一次。\n\t- 输入 hexo d\n\t- 得到 INFO Deploy done: git 即为部署成功\n\n\t之前我们创建的 ReadMe.md 会被自动覆盖掉。\n\n\n4. 查看成果\n\n\t前往 xxx.github.io 即可。\n\n## 使用 Next 主题 ##\n[https://hexo.io/themes/](https://hexo.io/themes/ \"查看更多主题\")\n\n这里以 Next 为例。 大概思路就是把整个主题的文件克隆到我们的主题文件夹中。在配置文件中注明使用该主题。\n\n**操作如下：**\n\n1. 还是回到 Git Bash。 输入 git clone https://github.com/iissnan/hexo-theme-next themes/next\n\n\t这样，该主题的文件就全部克隆到 D:\\blog\\themes\\next 下面。\n\n2. 修改博客配置文件\n\t- 打开 D:\\blog_config.yml\n\t- 找到 theme:\n\t- 把 Hexo 默认的 lanscape 修改成 next。 即 theme: next\n\t- 找到 # Site，添加博客名称，作者名字等。\n\t- 在 language 后面填入 en 或者 zh-Hans，选择英文或者中文。\n\t- 找到 # URL, 填入 url。比如 url: https://xxx.github.io\n\t\n\t填入名字后会有很风骚的 © 2017 xxx 的字样出现在博客底部。\n\n3. 重新生成部署即可\n\n\t- 回到 Git Bash。输入 hexo g -d就可以了。\n\n\t先把修改的内容生成网页，再部署。\n\n4. 查看成果\n\n\t前往 xxx.github.io 即可。","tags":["hexo"],"categories":["hexo"]},{"title":"Hello World","url":"/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","tags":["hexo"],"categories":["hexo"]}]