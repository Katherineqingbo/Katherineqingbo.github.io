[{"title":"ES6常用方方法","url":"/ES6%E5%B8%B8%E7%94%A8%E6%96%B9%E6%96%B9%E6%B3%95/","content":"","categories":["ES6"],"tags":["vue","ES6"]},{"title":"vue项目结构","url":"/vue%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/","content":"<h2 id=\"一、目录结构\"><a href=\"#一、目录结构\" class=\"headerlink\" title=\"一、目录结构\"></a>一、目录结构</h2><p><img src=\"/images/vueTree.png\" alt=\"alt\"></p>\n<h2 id=\"二、结构细分\"><a href=\"#二、结构细分\" class=\"headerlink\" title=\"二、结构细分\"></a>二、结构细分</h2><h3 id=\"build——-webpack配置\"><a href=\"#build——-webpack配置\" class=\"headerlink\" title=\"build——[webpack配置]\"></a>build——[webpack配置]</h3><p>build文件主要是webpack的配置，主要启动文件是dev-server.js，当我们输入npm run dev首先启动的就是dev-server.js，它会去检查node及npm版本，加载配置文件，启动服务。</p>\n<p><img src=\"/images/buildTree.png\" alt=\"alt\"></p>\n<h3 id=\"config——-vue项目配置\"><a href=\"#config——-vue项目配置\" class=\"headerlink\" title=\"config——[vue项目配置]\"></a>config——[vue项目配置]</h3><p>config文件主要是项目相关配置，我们常用的就是当端口冲突时配置监听端口，打包输出路径及命名等</p>\n<p><img src=\"/images/configTree.png\" alt=\"alt\"></p>\n<h3 id=\"node-modules——-依赖包\"><a href=\"#node-modules——-依赖包\" class=\"headerlink\" title=\"node_modules——[依赖包]\"></a>node_modules——[依赖包]</h3><p>node_modules里面是项目依赖包，其中包括很多基础依赖，自己也可以根据需要安装其他依赖。安装方法为打开cmd，进入项目目录，输入npm install [依赖包名称],回车。</p>\n<p>在两种情况下我们会自己去安装依赖：</p>\n<p>（1）项目运行缺少该依赖包：例如项目加载外部css会用到的css-loader，路由跳转vue-loader等（安装方法示例：npm install css-loader）</p>\n<p>（2）安装插件：如vux（基于WEUI的移动端组件库），vue-swiper（轮播插件</p>\n<p>注：有时会安装指定依赖版本，需在依赖包名称后加上版本号信息，如安装11.1.4版本的vue-loader，输入npm install <a href=\"mailto:vue-loader@11.1.4\">vue-loader@11.1.4</a></p>\n<h3 id=\"src——-项目核心文件\"><a href=\"#src——-项目核心文件\" class=\"headerlink\" title=\"src——[项目核心文件]\"></a>src——[项目核心文件]</h3><p><img src=\"/images/srcTree.png\" alt=\"alt\"></p>\n<h3 id=\"static——-静态资源文件\"><a href=\"#static——-静态资源文件\" class=\"headerlink\" title=\"static——[静态资源文件]\"></a>static——[静态资源文件]</h3><p><img src=\"/images/staticTree.png\" alt=\"alt\"></p>\n","categories":["vue"],"tags":["vue"]},{"title":"vue脚手架搭建","url":"/vue%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA/","content":"<h2 id=\"一、安装-node-js\"><a href=\"#一、安装-node-js\" class=\"headerlink\" title=\"一、安装 node.js\"></a>一、安装 node.js</h2><h2 id=\"二、安装-vue-cli\"><a href=\"#二、安装-vue-cli\" class=\"headerlink\" title=\"二、安装 vue-cli\"></a>二、安装 vue-cli</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g vue-cli</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\">$ cnpm install -g vue-cli</span><br></pre></td></tr></table></figure>\n<p>vue-cli安装常遇到的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">在node环境下搜索vue.cmd位置，配置环境变量</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、生成项目\"><a href=\"#三、生成项目\" class=\"headerlink\" title=\"三、生成项目\"></a>三、生成项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vue init webpack [Vue-Project]</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、安装依赖\"><a href=\"#四、安装依赖\" class=\"headerlink\" title=\"四、安装依赖\"></a>四、安装依赖</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd [Vue-Project]</span><br><span class=\"line\">$ cnpm install</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、启动项目\"><a href=\"#五、启动项目\" class=\"headerlink\" title=\"五、启动项目\"></a>五、启动项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm run dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、安装sass依赖包\"><a href=\"#六、安装sass依赖包\" class=\"headerlink\" title=\"六、安装sass依赖包\"></a>六、安装sass依赖包</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.安装sass</span><br><span class=\"line\">$ npm install --save-dev node-sass</span><br><span class=\"line\">$ npm install --save-dev sass-loader</span><br><span class=\"line\"></span><br><span class=\"line\">2.在build文件夹下的webpack.base.conf.js的rules里面添加配置</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    test: &#x2F;\\.scss$&#x2F;, loaders: [&#39;style&#39;, &#39;css&#39;, &#39;sass&#39;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">3.在APP.vue中修改style标签</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang&#x3D;&quot;scss&quot;&gt;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、rem的使用\"><a href=\"#七、rem的使用\" class=\"headerlink\" title=\"七、rem的使用\"></a>七、rem的使用</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">index.html文件中引入</span><br><span class=\"line\">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class=\"line\">    &#x2F;&#x2F; &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;g.tbcdn.cn&#x2F;mtb&#x2F;lib-flexible&#x2F;0.3.4&#x2F;??flexible_css.js,flexible.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">mixin.scss文件中引入</span><br><span class=\"line\"> </span><br><span class=\"line\">    @function px_rem($px, $base-font-size: 37.5px) &#123;</span><br><span class=\"line\">      @return ($px &#x2F; $base-font-size) * 1rem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">在scss文件中使用</span><br><span class=\"line\">    @import &quot;static&#x2F;css&#x2F;mixin.scss&quot;;</span><br><span class=\"line\">    h2&#123;</span><br><span class=\"line\">      height: px_rem(50px);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p> demo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;DownLoadPage&quot;&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">require(&#39;..&#x2F;utils&#x2F;flexible.js&#39;)</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#39;DownLoadPage&#39;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;style lang&#x3D;&quot;scss&quot; scoped&gt;</span><br><span class=\"line\">@import &#39;src&#x2F;assets&#x2F;styles&#x2F;mobile&#x2F;mixin&#39;;</span><br><span class=\"line\">html,body&#123;</span><br><span class=\"line\">  min-width: px_rem(320px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"八、element-ui的全局安装\"><a href=\"#八、element-ui的全局安装\" class=\"headerlink\" title=\"八、element-ui的全局安装\"></a>八、element-ui的全局安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install element-ui  --save-dev</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">整体引入</span><br><span class=\"line\">在main.js中</span><br><span class=\"line\">import ElementUI from &#39;element-ui&#39;;</span><br><span class=\"line\">import &#39;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>\n<h2 id=\"九、element-ui的按需安装\"><a href=\"#九、element-ui的按需安装\" class=\"headerlink\" title=\"九、element-ui的按需安装\"></a>九、element-ui的按需安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">按需引入element-ui</span><br><span class=\"line\">$ npm install element-ui  --save-dev</span><br><span class=\"line\">$ npm install babel-plugin-component -D</span><br></pre></td></tr></table></figure>\n<p>将 .babelrc 修改为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;presets&quot;: [</span><br><span class=\"line\">    [&quot;env&quot;, &#123;</span><br><span class=\"line\">      &quot;modules&quot;: false,</span><br><span class=\"line\">      &quot;targets&quot;: &#123;</span><br><span class=\"line\">        &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;&#x3D; 8&quot;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    &quot;stage-2&quot;,</span><br><span class=\"line\">    [&quot;es2015&quot;, &#123; &quot;modules&quot;: false &#125;]</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;plugins&quot;: [</span><br><span class=\"line\">    &quot;transform-vue-jsx&quot;, </span><br><span class=\"line\">    &quot;transform-runtime&quot;,</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &quot;component&quot;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &quot;libraryName&quot;: &quot;element-ui&quot;,</span><br><span class=\"line\">        &quot;styleLibraryName&quot;: &quot;theme-chalk&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么需要在 main.js 中写入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#123; Button, Select &#125; from &#39;element-ui&#39;</span><br><span class=\"line\">Vue.prototype.$ELEMENT &#x3D; &#123; size: &#39;small&#39; &#125;</span><br><span class=\"line\">Vue.use(Button)</span><br><span class=\"line\">Vue.use(Select)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十、安装es2015\"><a href=\"#十、安装es2015\" class=\"headerlink\" title=\"十、安装es2015\"></a>十、安装es2015</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"十一、全局安装echarts\"><a href=\"#十一、全局安装echarts\" class=\"headerlink\" title=\"十一、全局安装echarts\"></a>十一、全局安装echarts</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install echarts --save-dev</span><br><span class=\"line\">&#x2F;&#x2F; 引入echarts</span><br><span class=\"line\">import echarts from &#39;echarts&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.prototype.$echarts &#x3D; echarts</span><br></pre></td></tr></table></figure>\n<h2 id=\"十二、按需安装echarts\"><a href=\"#十二、按需安装echarts\" class=\"headerlink\" title=\"十二、按需安装echarts\"></a>十二、按需安装echarts</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 引入基本模板</span><br><span class=\"line\">let echarts &#x3D; require(&#39;echarts&#x2F;lib&#x2F;echarts&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 引入柱状图组件</span><br><span class=\"line\">require(&#39;echarts&#x2F;lib&#x2F;chart&#x2F;bar&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 引入提示框和title组件</span><br><span class=\"line\">require(&#39;echarts&#x2F;lib&#x2F;component&#x2F;tooltip&#39;)</span><br><span class=\"line\">require(&#39;echarts&#x2F;lib&#x2F;component&#x2F;title&#39;)</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#39;hello&#39;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &#39;Welcome to Your Vue.js App&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    this.drawLine();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    drawLine() &#123;</span><br><span class=\"line\">      &#x2F;&#x2F; 基于准备好的dom，初始化echarts实例</span><br><span class=\"line\">      let myChart &#x3D; echarts.init(document.getElementById(&#39;myChart&#39;))</span><br><span class=\"line\">      &#x2F;&#x2F; 绘制图表</span><br><span class=\"line\">      myChart.setOption(&#123;</span><br><span class=\"line\">        title: &#123; text: &#39;ECharts 入门示例&#39; &#125;,</span><br><span class=\"line\">        tooltip: &#123;&#125;,</span><br><span class=\"line\">        xAxis: &#123;</span><br><span class=\"line\">          data: [&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;, &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        yAxis: &#123;&#125;,</span><br><span class=\"line\">        series: [&#123;</span><br><span class=\"line\">          name: &#39;销量&#39;,</span><br><span class=\"line\">          type: &#39;bar&#39;,</span><br><span class=\"line\">          data: [5, 20, 36, 10, 10, 20]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十三、数据状态管理\"><a href=\"#十三、数据状态管理\" class=\"headerlink\" title=\"十三、数据状态管理\"></a>十三、数据状态管理</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install vuex --save</span><br><span class=\"line\"></span><br><span class=\"line\">import Vue from &#39;vue&#39;</span><br><span class=\"line\">import Vuex from &#39;vuex&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>\n<h2 id=\"十四、http服务模块\"><a href=\"#十四、http服务模块\" class=\"headerlink\" title=\"十四、http服务模块\"></a>十四、http服务模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install axios --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"十五、安装jquery\"><a href=\"#十五、安装jquery\" class=\"headerlink\" title=\"十五、安装jquery\"></a>十五、安装jquery</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install jquery --save-dev</span><br><span class=\"line\">配置webpack.base.conf.js</span><br><span class=\"line\">在module.exports中添加一段代码，</span><br><span class=\"line\">&#x2F;&#x2F; 原有代码</span><br><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">  extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],</span><br><span class=\"line\">  alias: &#123;</span><br><span class=\"line\">    &#39;vue$&#39;: &#39;vue&#x2F;dist&#x2F;vue.esm.js&#39;,</span><br><span class=\"line\">    &#39;@&#39;: resolve(&#39;src&#39;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#x2F;&#x2F; 添加代码</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  new webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">    $: &quot;jquery&quot;,</span><br><span class=\"line\">    jQuery: &quot;jquery&quot;,</span><br><span class=\"line\">    jquery: &quot;jquery&quot;,</span><br><span class=\"line\">    &quot;window.jQuery&quot;: &quot;jquery&quot;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">],</span><br><span class=\"line\">&#x2F;&#x2F; 原有代码</span><br><span class=\"line\">module: &#123;</span><br><span class=\"line\">  rules: [</span><br><span class=\"line\">&#x2F;&#x2F; ......</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十六、vue-amap-高德地图\"><a href=\"#十六、vue-amap-高德地图\" class=\"headerlink\" title=\"十六、vue-amap 高德地图\"></a>十六、vue-amap 高德地图</h2><p><a href=\"https://elemefe.github.io/vue-amap/#/\" target=\"_blank\" rel=\"noopener\">https://elemefe.github.io/vue-amap/#/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install vue-amap --save</span><br><span class=\"line\">$ npm install geocoder</span><br><span class=\"line\">打开webpack.base.conf.js文件，找到module.exports，在externals对象中加入一行：’AMap’: ‘AMap’</span><br><span class=\"line\">externals: &#123;</span><br><span class=\"line\">   &#39;AMap&#39;: &#39;AMap&#39;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">配置.eslintrc.js全局的AMap</span><br><span class=\"line\">globals: &#123;</span><br><span class=\"line\">    &quot;AMap&quot;:&quot;AMap&quot;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">在main.js中配置</span><br><span class=\"line\">import VueAMap from &#39;vue-amap&#39;</span><br><span class=\"line\">配置key值</span><br><span class=\"line\">VueAMap.initAMapApiLoader(&#123;</span><br><span class=\"line\">  key: &#39;a83c56afba46482fd8fba666e27231c2&#39;,</span><br><span class=\"line\">  plugin: [&#39;AMap.Autocomplete&#39;, &#39;AMap.PlaceSearch&#39;, &#39;AMap.Scale&#39;, &#39;AMap.OverView&#39;, &#39;AMap.ToolBar&#39;, &#39;AMap.MapType&#39;, &#39;AMap.PolyEditor&#39;, &#39;AMap.CircleEditor&#39;],</span><br><span class=\"line\">  &#x2F;&#x2F; 默认高德 sdk 版本为 1.4.4</span><br><span class=\"line\">  v: &#39;1.4.4&#39;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">创建一个vue文件</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;h3 class&#x3D;&quot;title&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;amap-wrapper&quot;&gt;</span><br><span class=\"line\">      &lt;el-amap class&#x3D;&quot;amap-box&quot; :vid&#x3D;&quot;&#39;amap-vue&#39;&quot;&gt;&lt;&#x2F;el-amap&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &#39;vue-amap向你问好！&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.amap-wrapper &#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 800px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十七、适配低版本\"><a href=\"#十七、适配低版本\" class=\"headerlink\" title=\"十七、适配低版本\"></a>十七、适配低版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">首先</span><br><span class=\"line\">安装babel-polyfill </span><br><span class=\"line\">$ npm install babel-polyfill --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">入口文件引用</span><br><span class=\"line\">在main.js中引用 </span><br><span class=\"line\">import &#39;babel-polyfill&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">vue-cli 配置修改</span><br><span class=\"line\">如果也是用了官方脚手架vue-cli，还需要在webpack.config.js配置文件中做各修改，用 </span><br><span class=\"line\">module.exports &#x3D; &#123; </span><br><span class=\"line\">  entry: &#123; </span><br><span class=\"line\">    app: [&quot;babel-polyfill&quot;, &quot;.&#x2F;src&#x2F;main.js&quot;] </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">替代 </span><br><span class=\"line\">module.exports &#x3D; &#123; </span><br><span class=\"line\">  entry: &#123; </span><br><span class=\"line\">    app: &#39;.&#x2F;src&#x2F;main.js&#39; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">如果有多配置可以在webpack.base.config.js修改</span><br></pre></td></tr></table></figure>\n<h2 id=\"十九、分环境打包\"><a href=\"#十九、分环境打包\" class=\"headerlink\" title=\"十九、分环境打包\"></a>十九、分环境打包</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">安装cross-env</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm i --save-dev cross-env</span><br><span class=\"line\">config文件夹下新建文件sit.env.js</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports &#x3D; &#123;</span><br><span class=\"line\">  NODE_ENV: &#39;&quot;production&quot;&#39;,</span><br><span class=\"line\">  ENV_CONFIG: &#39;&quot;sit&quot;&#39;,</span><br><span class=\"line\">  BASE_API: &#39;&quot;https:&#x2F;&#x2F;api-sit&quot;&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">修改项目package.json文件</span><br><span class=\"line\"></span><br><span class=\"line\">NODE_ENV最好都设成production，因为在utils.js只做了production一种判定，亲测不会影响各环境API参数</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">  &quot;dev&quot;: &quot;webpack-dev-server --inline --progress --config build&#x2F;webpack.dev.conf.js&quot;,</span><br><span class=\"line\">  &quot;start&quot;: &quot;npm run dev&quot;,</span><br><span class=\"line\">  &quot;build&quot;: &quot;node build&#x2F;build.js&quot;,</span><br><span class=\"line\">  &quot;build:test&quot;: &quot;cross-env NODE_ENV&#x3D;production env_config&#x3D;test node build&#x2F;build.js&quot;,</span><br><span class=\"line\">  &quot;build:pre&quot;: &quot;cross-env NODE_ENV&#x3D;production env_config&#x3D;pre node build&#x2F;build.js&quot;,</span><br><span class=\"line\">  &quot;build:prod&quot;: &quot;cross-env NODE_ENV&#x3D;production env_config&#x3D;prod node build&#x2F;build.js&quot;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">修改config&#x2F;index.js文件中build参数</span><br><span class=\"line\"></span><br><span class=\"line\">这里的参数会在build&#x2F;webpackage.prod.conf.js中使用到</span><br><span class=\"line\"></span><br><span class=\"line\">build: &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 添加test pre prod 三处环境的配制</span><br><span class=\"line\">    prodEnv: require(&#39;.&#x2F;prod.env&#39;),</span><br><span class=\"line\">    testEnv: require(&#39;.&#x2F;test.env&#39;),</span><br><span class=\"line\">    &#x2F;&#x2F; Template for index.html</span><br><span class=\"line\">    index: path.resolve(__dirname, &#39;..&#x2F;dist&#x2F;index.html&#39;),</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; Paths</span><br><span class=\"line\">    assetsRoot: path.resolve(__dirname, &#39;..&#x2F;dist&#39;),</span><br><span class=\"line\">    assetsSubDirectory: &#39;static&#39;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">在webpackage.prod.conf.js中使用构建环境参数</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 个性env常量的定义</span><br><span class=\"line\">&#x2F;&#x2F; const env &#x3D; require(&#39;..&#x2F;config&#x2F;prod.env&#39;)</span><br><span class=\"line\">const env &#x3D; config.build[process.env.env_config+&#39;Env&#39;]</span><br><span class=\"line\"></span><br><span class=\"line\">调整build&#x2F;build.js</span><br><span class=\"line\"></span><br><span class=\"line\">删除process.env.NODE_ENV的赋值，修改spinner的定义，调整后的内容如下：</span><br><span class=\"line\"></span><br><span class=\"line\">&#39;use strict&#39;</span><br><span class=\"line\">require(&#39;.&#x2F;check-versions&#39;)()</span><br><span class=\"line\">&#x2F;&#x2F; 注释掉的代码</span><br><span class=\"line\">&#x2F;&#x2F; process.env.NODE_ENV &#x3D; &#39;production&#39;</span><br><span class=\"line\">const ora &#x3D; require(&#39;ora&#39;)</span><br><span class=\"line\">const rm &#x3D; require(&#39;rimraf&#39;)</span><br><span class=\"line\">const path &#x3D; require(&#39;path&#39;)</span><br><span class=\"line\">const chalk &#x3D; require(&#39;chalk&#39;)</span><br><span class=\"line\">const webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class=\"line\">const config &#x3D; require(&#39;..&#x2F;config&#39;)</span><br><span class=\"line\">const webpackConfig &#x3D; require(&#39;.&#x2F;webpack.prod.conf&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 修改spinner的定义</span><br><span class=\"line\">&#x2F;&#x2F; const spinner &#x3D; ora(&#39;building for production...&#39;)</span><br><span class=\"line\">var spinner &#x3D; ora(&#39;building for &#39; + process.env.NODE_ENV + &#39; of &#39; + process.env.env_config+ &#39; mode...&#39; )</span><br><span class=\"line\">spinner.start()</span><br><span class=\"line\">&#x2F;&#x2F;更多的其它内容，不需要做任何调整的内容 ...</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十、登录\"><a href=\"#二十、登录\" class=\"headerlink\" title=\"二十、登录\"></a>二十、登录</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">js-cookie 一个轻量的JavaScript库来处理cookie</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十二-、svg图标的使用\"><a href=\"#二十二-、svg图标的使用\" class=\"headerlink\" title=\"二十二 、svg图标的使用\"></a>二十二 、svg图标的使用</h2><p><a href=\"http://www.iconfont.cn/plus\" target=\"_blank\" rel=\"noopener\">http://www.iconfont.cn/plus</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 安装</span><br><span class=\"line\">$npm install vue-svg-icon --save-dev</span><br><span class=\"line\">2. 将svg图片放入src&#x2F;svg</span><br><span class=\"line\">这里安利一个svg图片库iconfont</span><br><span class=\"line\"></span><br><span class=\"line\">src&#x2F;svg路径暂时不可配置</span><br><span class=\"line\"></span><br><span class=\"line\">3. 在项目的main.js入口引入vue-svg-icon和需要使用的svg文件名（不需扩展名）</span><br><span class=\"line\">import Icon from &#39;vue-svg-icon&#x2F;Icon.vue&#39;;</span><br><span class=\"line\">Vue.component(&#39;icon&#39;, Icon);</span><br><span class=\"line\"></span><br><span class=\"line\">4. 在网页中使用icon标签就可以啦！</span><br><span class=\"line\">&lt;icon name&#x3D;&quot;chameleon&quot; scale&#x3D;&quot;20&quot;&gt;&lt;&#x2F;icon&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十二、mock数据\"><a href=\"#二十二、mock数据\" class=\"headerlink\" title=\"二十二、mock数据\"></a>二十二、mock数据</h2><p><a href=\"http://mockjs.com/\" target=\"_blank\" rel=\"noopener\">http://mockjs.com/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$npm install mockjs</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十一、打包\"><a href=\"#二十一、打包\" class=\"headerlink\" title=\"二十一、打包\"></a>二十一、打包</h2><p>避免出现空白页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">第一种解决方案</span><br><span class=\"line\">打开config文件夹下的index.js，build模块，修改</span><br><span class=\"line\">assetsPublicPath 的值为 assetsPublicPath: &#39;.&#x2F;&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">第二种解决方案</span><br><span class=\"line\">修改build文件夹下webpack.prod.conf.js中的output模块为</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">    publicPath: &#39;.&#x2F;&#39;,</span><br><span class=\"line\">    path: config.build.assetsRoot,</span><br><span class=\"line\">    filename: utils.assetsPath(&#39;js&#x2F;[name].[chunkhash].js&#39;),</span><br><span class=\"line\">    chunkFilename: utils.assetsPath(&#39;js&#x2F;[id].[chunkhash].js&#39;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">执行$npm run build:prod</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.cnblogs.com/moqiutao/p/7496718.html\" target=\"_blank\" rel=\"noopener\" title=\"避免背景图片路径出错解决方案\">避免背景图片路径出错解决方案</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">修改build文件夹下的utils.js代码为</span><br><span class=\"line\">if (options.extract) &#123;</span><br><span class=\"line\">  return ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">    use: loaders,</span><br><span class=\"line\">    fallback: &#39;vue-style-loader&#39;,</span><br><span class=\"line\">    publicPath: &#39;..&#x2F;..&#x2F;&#39;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  return [&#39;vue-style-loader&#39;].concat(loaders)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">增加一行代码      publicPath: &#39;..&#x2F;..&#x2F;&#39;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十二-vue-cli打包文件优化工具-webpack-bundle-analyzer\"><a href=\"#二十二-vue-cli打包文件优化工具-webpack-bundle-analyzer\" class=\"headerlink\" title=\"二十二 vue cli打包文件优化工具 webpack-bundle-analyzer\"></a>二十二 vue cli打包文件优化工具 webpack-bundle-analyzer</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">在vue-cli中不需要配置  直接执行</span><br><span class=\"line\">$ npm run build --report</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">需要配置</span><br><span class=\"line\">安装webpack-bundle-analyzer插件</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm install webpack-bundle-analyzer -–save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">在build&#x2F;webpack.prod.config.js中添加配置</span><br><span class=\"line\"></span><br><span class=\"line\">if (config.build.bundleAnalyzerReport) &#123;</span><br><span class=\"line\">    const BundleAnalyzerPlugin &#x3D; require(&#39;webpack-bundle-analyzer&#39;).BundleAnalyzerPlugin;</span><br><span class=\"line\">    webpackConfig.plugins.push(new BundleAnalyzerPlugin());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">在package.json的scripts中添加配置</span><br><span class=\"line\"></span><br><span class=\"line\">“analyz”: “NODE_ENV&#x3D;production npm_config_report&#x3D;true npm run build”</span><br><span class=\"line\"></span><br><span class=\"line\">运行命令</span><br><span class=\"line\"></span><br><span class=\"line\">$ npm run analyz</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十三-字体\"><a href=\"#二十三-字体\" class=\"headerlink\" title=\"二十三 字体\"></a>二十三 字体</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install font-awesome</span><br></pre></td></tr></table></figure>\n<h2 id=\"二十四-404页面跳转处理\"><a href=\"#二十四-404页面跳转处理\" class=\"headerlink\" title=\"二十四 404页面跳转处理\"></a>二十四 404页面跳转处理</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">在新建文件夹 WEB-INF 下新建 web.xml 内容如下</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;web-app xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class=\"line\">\txmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class=\"line\">\txsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_2_5.xsd&quot;</span><br><span class=\"line\">\tid&#x3D;&quot;scplatform&quot; version&#x3D;&quot;2.5&quot;&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;display-name&gt;&#x2F;&lt;&#x2F;display-name&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&lt;error-page&gt;</span><br><span class=\"line\">\t   &lt;error-code&gt;404&lt;&#x2F;error-code&gt;</span><br><span class=\"line\">\t   &lt;location&gt;&#x2F;index.html&lt;&#x2F;location&gt;</span><br><span class=\"line\">\t&lt;&#x2F;error-page&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;&#x2F;web-app&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">在webpack.prod.conf.js 中修改</span><br><span class=\"line\">new CopyWebpackPlugin([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    from: path.resolve(__dirname, &#39;..&#x2F;static&#39;),</span><br><span class=\"line\">    to: config.build.assetsSubDirectory,</span><br><span class=\"line\">    ignore: [&#39;.*&#39;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    from: path.resolve(__dirname, &#39;..&#x2F;WEB-INF&#39;),</span><br><span class=\"line\">    to: &#39;WEB-INF&#39;,</span><br><span class=\"line\">    ignore: [&#39;.*&#39;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n","categories":["vue"],"tags":["vue"]},{"title":"layui前言","url":"/layui%E5%89%8D%E8%A8%80/","content":"","categories":["layui"],"tags":["layui"]},{"title":"hexo-指令","url":"/hexo-%E6%8C%87%E4%BB%A4/","content":"<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init [folder]</span><br></pre></td></tr></table></figure>\n\n<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>\n<h2 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 _config.yml中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-p</code>, <code>--path</code></td>\n<td>自定义新文章的路径</td>\n</tr>\n<tr>\n<td><code>-r</code>, <code>--replace</code></td>\n<td>如果存在同名文章，将其替换</td>\n</tr>\n<tr>\n<td><code>-s</code>, <code>--slug</code></td>\n<td>文章的 Slug，作为新文章的文件名和发布后的 URL</td>\n</tr>\n</tbody></table>\n<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page --path about&#x2F;me &quot;About me&quot;</span><br></pre></td></tr></table></figure>\n\n<p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p>\n<p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page --path about&#x2F;me</span><br></pre></td></tr></table></figure>\n\n<p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p>\n<h2 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a>创建新文章</h2><p>根目录命令行输入 <code>hexo new &lt;模板&gt; &lt;文章名&gt;</code>新建文章</p>\n<p>其中&lt;模板&gt;在scaffolds中，默认情况下有三个模板post、draft、page</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>功能</th>\n<th>路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>post</td>\n<td>新建文章</td>\n<td>/source/_posts/</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>新建草稿</td>\n<td>/source/_drafts/</td>\n</tr>\n<tr>\n<td>page</td>\n<td>新建页面（标签页，分类页等）</td>\n<td>/source/</td>\n</tr>\n</tbody></table>\n<p>通常情况下使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>即可，注意这里的<code>title</code>不是文章名，具体文章中显示的文章标题可以在文章文件中修改，例如：我这里新建一篇文章，title为article</p>\n<p>命令行输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$hexo new post article</span><br></pre></td></tr></table></figure>\n<p>此时在source/_posts/文件夹中多了一个article.md文件。</p>\n<h2 id=\"给文章添加分类和模板\"><a href=\"#给文章添加分类和模板\" class=\"headerlink\" title=\"给文章添加分类和模板\"></a>给文章添加分类和模板</h2><p>通过对文件头部配置信息中<code>tags</code> 与<code>categories</code>项的修改可以设置文章的标签及分类。</p>\n<p>其中标签可以按格式贴现设置多个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: Hexo博客新建文章并发布</span><br><span class=\"line\">date: 2018-12-06 12:16:12</span><br><span class=\"line\">tags:</span><br><span class=\"line\"> - Hexo</span><br><span class=\"line\"> - Markdown</span><br><span class=\"line\">categories: 搭建博客</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"generate\"><a href=\"#generate\" class=\"headerlink\" title=\"generate\"></a>generate</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>生成静态文件。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-d</code>, <code>--deploy</code></td>\n<td>文件生成后立即部署网站</td>\n</tr>\n<tr>\n<td><code>-w</code>, <code>--watch</code></td>\n<td>监视文件变动</td>\n</tr>\n<tr>\n<td><code>-b</code>, <code>--bail</code></td>\n<td>生成过程中如果发生任何未处理的异常则抛出异常</td>\n</tr>\n<tr>\n<td><code>-f</code>, <code>--force</code></td>\n<td>强制重新生成文件<br>Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。<br>使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>\n</tr>\n<tr>\n<td><code>-c</code>, <code>--concurrency</code></td>\n<td>最大同时生成文件的数量，默认无限制</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"publish\"><a href=\"#publish\" class=\"headerlink\" title=\"publish\"></a>publish</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n<p>发表草稿。</p>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-p</code>, <code>--port</code></td>\n<td>重设端口</td>\n</tr>\n<tr>\n<td><code>-s</code>, <code>--static</code></td>\n<td>只使用静态文件</td>\n</tr>\n<tr>\n<td><code>-l</code>, <code>--log</code></td>\n<td>启动日记记录，使用覆盖记录格式</td>\n</tr>\n</tbody></table>\n<h2 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>部署网站。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-g</code>, <code>--generate</code></td>\n<td>部署之前预先生成静态文件</td>\n</tr>\n</tbody></table>\n<p>该命令可以简写为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n\n<p>渲染文件。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-o</code>, <code>--output</code></td>\n<td>设置输出路径</td>\n</tr>\n</tbody></table>\n<h2 id=\"migrate\"><a href=\"#migrate\" class=\"headerlink\" title=\"migrate\"></a>migrate</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>\n\n<p>从其他博客系统 <a href=\"https://hexo.io/zh-cn/docs/migration\" target=\"_blank\" rel=\"noopener\" title=\"迁移内容\">迁移内容</a></p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>\n<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<h2 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>\n\n<p>列出网站资料。</p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br></pre></td></tr></table></figure>\n\n<p>显示 Hexo 版本。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><h3 id=\"安全模式\"><a href=\"#安全模式\" class=\"headerlink\" title=\"安全模式\"></a>安全模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --safe</span><br></pre></td></tr></table></figure>\n\n<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>\n<h3 id=\"调试模式\"><a href=\"#调试模式\" class=\"headerlink\" title=\"调试模式\"></a>调试模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --debug</span><br></pre></td></tr></table></figure>\n\n<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href=\"https://github.com/hexojs/hexo/issues/new\" target=\"_blank\" rel=\"noopener\">提交调试信息到 GitHub</a>。</p>\n<h3 id=\"简洁模式\"><a href=\"#简洁模式\" class=\"headerlink\" title=\"简洁模式\"></a>简洁模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --silent</span><br></pre></td></tr></table></figure>\n\n<p>隐藏终端信息。</p>\n<h3 id=\"自定义配置文件的路径\"><a href=\"#自定义配置文件的路径\" class=\"headerlink\" title=\"自定义配置文件的路径\"></a>自定义配置文件的路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class=\"line\">$ hexo server --config custom.yml</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br><span class=\"line\">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>\n\n<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class=\"line\">$ hexo server --config custom.yml</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br><span class=\"line\">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>\n\n<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>\n<h3 id=\"显示草稿\"><a href=\"#显示草稿\" class=\"headerlink\" title=\"显示草稿\"></a>显示草稿</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --draft</span><br></pre></td></tr></table></figure>\n\n<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>\n<h3 id=\"自定义-CWD\"><a href=\"#自定义-CWD\" class=\"headerlink\" title=\"自定义 CWD\"></a>自定义 CWD</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure>\n\n<p>自定义当前工作目录（Current working directory）的路径。</p>\n","categories":["hexo"],"tags":["hexo"]},{"title":"Hexo 的 Next 主题优化一","url":"/Hexo-%E7%9A%84-Next-%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E4%B8%80/","content":"","categories":["hexo"],"tags":["hexo"]},{"title":"用Hexo和GitHub Pages 搭建博客","url":"/%E7%94%A8Hexo%E5%92%8CGitHub-Pages-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","content":"<p><strong>声明：转载</strong><a href=\"https://ryanluoxu.github.io/2017/11/24/用-Hexo-和-GitHub-Pages-搭建博客/\" target=\"_blank\" rel=\"noopener\" title=\"Ryan Luo Xu 罗旭\">https://ryanluoxu.github.io/2017/11/24/用-Hexo-和-GitHub-Pages-搭建博客/</a></p>\n<p>搭建这个博客走了许多弯路。在这里分享总结之后的思路和简化步骤。</p>\n<ul>\n<li>Github Pages</li>\n<li>Hexo 博客框架</li>\n<li>部署</li>\n<li>Next 主题</li>\n</ul>\n<h2 id=\"Github-Pages\"><a href=\"#Github-Pages\" class=\"headerlink\" title=\"Github Pages\"></a>Github Pages</h2><p>Github Pages 其实本身就是 Github 提供的博客服务。 我们在 Github 中创建一个特定格式的 Repository，Github Pages 就会将里面的信息生成一个网页，展示出来。</p>\n<p><strong>操作如下：</strong></p>\n<ol>\n<li>注册 Github 账号，然后在 Github 中创建一个以 .github.io 结尾的 Repository。<ol>\n<li>Repository name: xxx.github.io</li>\n<li>勾选 Initialize this repository with a README</li>\n<li>Create repository</li>\n</ol>\n</li>\n<li>简单地编辑一下 README.md 这个文档。 比如添加：I am trying to create my own blog.. 保存(Commit changes)。</li>\n<li>打开网页：xxx.github.io 这里就可以看到 README.md 里的内容了。</li>\n</ol>\n<p>如果没有太多的要求，其实直接用 README.md 来写博客也是不错的。</p>\n<p>这个生成好的 Repository 就是用来存放博客内容的地方，也只有这个仓库里的内容，才会被 xxx.github.io 这个网页显示出来。</p>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>Hexo 是一个博客框架。它把本地文件里的信息生成一个网页。如果不需要放在网上给别人看，就没 Github Pages 什么事了。</p>\n<p>使用 Hexo 之前，需要先安装 Node.js 和 Git。</p>\n<p><strong>操作如下：</strong></p>\n<ol>\n<li><p>安装 Node.js</p>\n<ul>\n<li><p>前往<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\" title=\"node官网\">https://nodejs.org/en/</a></p>\n</li>\n<li><p>点击 8.9.1 LTS 下载</p>\n</li>\n<li><p>安装</p>\n</li>\n<li><p>打开 Command Prompt， 输入 node -v</p>\n</li>\n<li><p>得到：v8.9.1</p>\n<p>安装成功</p>\n</li>\n</ul>\n</li>\n<li><p>安装 Git</p>\n<ul>\n<li><p>前往 <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/</a></p>\n</li>\n<li><p>点击 Downloads</p>\n</li>\n<li><p>点击 Windows</p>\n</li>\n<li><p>一般情况，下载会自动开始。如果没有，就点击 click here to download manually</p>\n</li>\n<li><p>安装</p>\n</li>\n<li><p>打开 Command Prompt， 输入 git –version</p>\n</li>\n<li><p>得到：git version 2.15.0.windows.1</p>\n<p>安装成功</p>\n<p>额外说明：如果 Git –version 指令不管用，可能需要到 Environment Variable 那里添加 Path。</p>\n</li>\n</ul>\n</li>\n<li><p>安装 Hexo</p>\n<ul>\n<li><p>打开 Command Prompt</p>\n</li>\n<li><p>输入 npm install -g hexo-cli</p>\n</li>\n<li><p>回车开始安装</p>\n</li>\n<li><p>输入 hexo -v</p>\n</li>\n<li><p>得到 hexo-cli: 1.0.4 等一串数据</p>\n<p>安装成功</p>\n</li>\n</ul>\n</li>\n<li><p>创建本地博客</p>\n<ul>\n<li><p>在D盘下创建文件夹 blog</p>\n</li>\n<li><p>鼠标右键 blog，选择 Git Bash Here。 如果没有安装 Git，就不会有这个选项。</p>\n</li>\n<li><p>Git Bash 打开之后，所在的位置就是 blog 这个文件夹的位置。（/d/blog）</p>\n</li>\n<li><p>输入 hexo init 将 blog 文件夹初始化成一个博客文件夹。</p>\n</li>\n<li><p>输入 npm install 安装依赖包。</p>\n</li>\n<li><p>输入 hexo g 生成（generate）网页。 由于我们还没创建任何博客，生成的网页会展示 Hexo 里面自带了一个 Hello World 的博客。</p>\n</li>\n<li><p>输入 hexo s 将生成的网页放在了本地服务器（server）。</p>\n</li>\n<li><p>浏览器里输入 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 。 就可以看到刚才的成果了。</p>\n</li>\n<li><p>回到 Git Bash，按 Ctrl+C 结束。</p>\n<p>此时再看 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 就是无法访问了。</p>\n</li>\n</ul>\n</li>\n<li><p>发布一篇博客</p>\n<ul>\n<li>继续在 Git Bash 里，所在路径还是 /d/blog。输入 hexo new “My First Post”</li>\n<li>在 D:\\blog\\source_posts 路径下，会有一个 My-First-Post.md 的文件。 编辑这个文件，然后保存。</li>\n<li>回到 Git Bash，输入 hexo g</li>\n<li>输入 hexo s</li>\n<li>前往 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 查看成果。</li>\n<li>回到 Git Bash，按 Ctrl+C 结束。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"将本地-Hexo-博客部署在-Github-上\"><a href=\"#将本地-Hexo-博客部署在-Github-上\" class=\"headerlink\" title=\"将本地 Hexo 博客部署在 Github 上\"></a>将本地 Hexo 博客部署在 Github 上</h2><p>前面两个部分，我们已经有了本地博客，和一个能托管这些资料的线上仓库。只要把本地博客部署（deploy）在我们的 Github 对应的 Repository 就可以了。</p>\n<p><strong>操作如下：</strong></p>\n<ol>\n<li><p>获取 Github 对应的 Repository 的链接。</p>\n<ul>\n<li><p>登陆 Github，进入到 ryanluoxu.github.io</p>\n</li>\n<li><p>点击 Clone or download</p>\n</li>\n<li><p>复制 URL 待用</p>\n<p>我的是 <a href=\"https://github.com/xxx/xxx.github.io.git\" target=\"_blank\" rel=\"noopener\">https://github.com/xxx/xxx.github.io.git</a></p>\n</li>\n</ul>\n</li>\n<li><p>修改博客的配置文件</p>\n<ul>\n<li><p>打开配置文件 /d/blog/_config.yml （使用 bash 里的 vi 或者 notepad++）</p>\n</li>\n<li><p>找到 #Deployment，填入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:  </span><br><span class=\"line\">      type: git  </span><br><span class=\"line\">      repository: https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.github.io.git  </span><br><span class=\"line\">      branch: master</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:  </span><br><span class=\"line\">      type: git  </span><br><span class=\"line\">      repository: git@github.com:xxx&#x2F;xxx.github.io.git  </span><br><span class=\"line\">      branch: master</span><br></pre></td></tr></table></figure>\n<p>https模式每次部署需要输入账号和密码，git模式的不需要</p>\n</li>\n</ul>\n</li>\n<li><p>部署</p>\n<ul>\n<li><p>回到 Git Bash</p>\n</li>\n<li><p>输入 npm install hexo-deployer-git –save 安装 hexo-deployer-git 此步骤只需要做一次。</p>\n</li>\n<li><p>输入 hexo d</p>\n</li>\n<li><p>得到 INFO Deploy done: git 即为部署成功</p>\n<p>之前我们创建的 ReadMe.md 会被自动覆盖掉。</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p>查看成果</p>\n<p> 前往 xxx.github.io 即可。</p>\n</li>\n</ol>\n<h2 id=\"使用-Next-主题\"><a href=\"#使用-Next-主题\" class=\"headerlink\" title=\"使用 Next 主题\"></a>使用 Next 主题</h2><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\" title=\"查看更多主题\">https://hexo.io/themes/</a></p>\n<p>这里以 Next 为例。 大概思路就是把整个主题的文件克隆到我们的主题文件夹中。在配置文件中注明使用该主题。</p>\n<p><strong>操作如下：</strong></p>\n<ol>\n<li><p>还是回到 Git Bash。 输入 git clone <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">https://github.com/iissnan/hexo-theme-next</a> themes/next</p>\n<p> 这样，该主题的文件就全部克隆到 D:\\blog\\themes\\next 下面。</p>\n</li>\n<li><p>修改博客配置文件</p>\n<ul>\n<li><p>打开 D:\\blog_config.yml</p>\n</li>\n<li><p>找到 theme:</p>\n</li>\n<li><p>把 Hexo 默认的 lanscape 修改成 next。 即 theme: next</p>\n</li>\n<li><p>找到 # Site，添加博客名称，作者名字等。</p>\n</li>\n<li><p>在 language 后面填入 en 或者 zh-Hans，选择英文或者中文。</p>\n</li>\n<li><p>找到 # URL, 填入 url。比如 url: <a href=\"https://xxx.github.io\" target=\"_blank\" rel=\"noopener\">https://xxx.github.io</a></p>\n<p>填入名字后会有很风骚的 © 2017 xxx 的字样出现在博客底部。</p>\n</li>\n</ul>\n</li>\n<li><p>重新生成部署即可</p>\n<ul>\n<li><p>回到 Git Bash。输入 hexo g -d就可以了。</p>\n<p>先把修改的内容生成网页，再部署。</p>\n</li>\n</ul>\n</li>\n<li><p>查看成果</p>\n<p> 前往 xxx.github.io 即可。</p>\n</li>\n</ol>\n","categories":["hexo"],"tags":["hexo"]},{"title":"Hello World","url":"/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":["hexo"],"tags":["hexo"]}]